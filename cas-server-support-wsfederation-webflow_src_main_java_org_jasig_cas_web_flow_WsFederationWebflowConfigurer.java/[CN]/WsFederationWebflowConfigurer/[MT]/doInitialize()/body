{
  final Flow flow=getLoginFlow();
  final Expression expression=createExpression(flow,"flowScope.WsFederationIdentityProviderUrl",String.class);
  final ActionExecutingViewFactory viewFactory=new ActionExecutingViewFactory(new ExternalRedirectAction(expression));
  createEndState(flow,"wsFederationRedirect",viewFactory);
  final ActionState actionState=createActionState(flow,"wsFederationAction",createEvaluateAction("wsFederationAction"));
  actionState.getTransitionSet().add(createTransition(CasWebflowConstants.TRANSITION_ID_SUCCESS,CasWebflowConstants.TRANSITION_ID_SEND_TICKET_GRANTING_TICKET));
  actionState.getTransitionSet().add(createTransition(CasWebflowConstants.TRANSITION_ID_ERROR,getStartState(flow).getId()));
  setStartState(flow,actionState);
  final TransitionableState loginTicketState=flow.getTransitionableState(CasWebflowConstants.STATE_ID_GENERATE_LOGIN_TICKET);
  final Iterator<Transition> it=loginTicketState.getTransitionSet().iterator();
  while (it.hasNext()) {
    final Transition transition=it.next();
    if (transition.getId().equals(CasWebflowConstants.TRANSITION_ID_GENERATED)) {
      final TargetStateResolver targetStateResolver=(TargetStateResolver)fromStringTo(TargetStateResolver.class).execute("wsFederationRedirect");
      transition.setTargetStateResolver(targetStateResolver);
      break;
    }
  }
}
