{
  final MockHttpServletRequest mockRequest=new MockHttpServletRequest();
  mockRequest.setParameter(ClientAction.THEME,MY_THEME);
  mockRequest.setParameter(ClientAction.LOCALE,MY_LOCALE);
  mockRequest.setParameter(ClientAction.METHOD,MY_METHOD);
  final MockHttpSession mockSession=new MockHttpSession();
  mockRequest.setSession(mockSession);
  final ServletExternalContext servletExternalContext=mock(ServletExternalContext.class);
  when(servletExternalContext.getNativeRequest()).thenReturn(mockRequest);
  final MockRequestContext mockRequestContext=new MockRequestContext();
  mockRequestContext.setExternalContext(servletExternalContext);
  mockRequestContext.getFlowScope().put(ClientAction.SERVICE,org.jasig.cas.services.TestUtils.getService(MY_SERVICE));
  final FacebookClient facebookClient=new FacebookClient(MY_KEY,MY_SECRET);
  final TwitterClient twitterClient=new TwitterClient(MY_KEY,MY_SECRET);
  final Clients clients=new Clients(MY_LOGIN_URL,facebookClient,twitterClient);
  final ClientAction action=new ClientAction();
  action.setCentralAuthenticationService(mock(CentralAuthenticationService.class));
  action.setClients(clients);
  final Event event=action.execute(mockRequestContext);
  assertEquals("error",event.getId());
  assertEquals(MY_THEME,mockSession.getAttribute(ClientAction.THEME));
  assertEquals(MY_LOCALE,mockSession.getAttribute(ClientAction.LOCALE));
  assertEquals(MY_METHOD,mockSession.getAttribute(ClientAction.METHOD));
  final MutableAttributeMap flowScope=mockRequestContext.getFlowScope();
  final Map<String,String> urls=(Map<String,String>)flowScope.get(ClientAction.PAC4J_URLS);
  assertTrue(((String)urls.get("Facebook")).startsWith("https://www.facebook.com/v2.2/dialog/oauth?client_id=my_key&redirect_uri=http%3A%2F%2Fcasserver%2Flogin%3F" + Clients.DEFAULT_CLIENT_NAME_PARAMETER + "%3DFacebookClient&state="));
  assertEquals(MY_LOGIN_URL + '?' + Clients.DEFAULT_CLIENT_NAME_PARAMETER+ "=TwitterClient&needs_client_redirection=true",urls.get("Twitter"));
}
