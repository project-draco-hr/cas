{
  final List<MetadataFilter> metadataFilterList=new ArrayList<>();
  if (service.getMetadataMaxValidity() > 0) {
    final RequiredValidUntilFilter requiredValidUntilFilter=new RequiredValidUntilFilter(service.getMetadataMaxValidity());
    metadataFilterList.add(requiredValidUntilFilter);
    LOGGER.debug("Added metadata RequiredValidUntilFilter with max validity of [{}]",service.getMetadataMaxValidity());
  }
  if (StringUtils.isNotBlank(service.getMetadataSignatureLocation())) {
    final AbstractResource resource=ResourceUtils.getResourceFrom(service.getMetadataSignatureLocation());
    final List<KeyInfoProvider> keyInfoProviderList=new ArrayList<>();
    keyInfoProviderList.add(new RSAKeyValueProvider());
    keyInfoProviderList.add(new DSAKeyValueProvider());
    keyInfoProviderList.add(new DEREncodedKeyValueProvider());
    keyInfoProviderList.add(new InlineX509DataProvider());
    final BasicProviderKeyInfoCredentialResolver keyInfoResolver=new BasicProviderKeyInfoCredentialResolver(keyInfoProviderList);
    final BasicResourceCredentialFactoryBean credentialFactoryBean=new BasicResourceCredentialFactoryBean();
    credentialFactoryBean.setPublicKeyInfo(resource);
    credentialFactoryBean.afterPropertiesSet();
    final BasicCredential credential=credentialFactoryBean.getObject();
    final StaticCredentialResolver resolver=new StaticCredentialResolver(credential);
    final ExplicitKeySignatureTrustEngine trustEngine=new ExplicitKeySignatureTrustEngine(resolver,keyInfoResolver);
    final SignatureValidationFilter signatureValidationFilter=new SignatureValidationFilter(trustEngine);
    signatureValidationFilter.setRequireSignedRoot(false);
    metadataFilterList.add(signatureValidationFilter);
    LOGGER.debug("Added metadata SignatureValidationFilter with signature from [{}]",service.getMetadataSignatureLocation());
  }
  if (!metadataFilterList.isEmpty()) {
    final MetadataFilterChain metadataFilterChain=new MetadataFilterChain();
    metadataFilterChain.setFilters(metadataFilterList);
    LOGGER.debug("Metadata filter chain initialized with [{}] filters",metadataFilterList.size());
    metadataProvider.setMetadataFilter(metadataFilterChain);
  }
}
