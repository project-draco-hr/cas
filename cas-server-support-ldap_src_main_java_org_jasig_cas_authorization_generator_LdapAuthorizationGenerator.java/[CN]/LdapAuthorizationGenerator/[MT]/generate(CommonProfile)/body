{
  Assert.notNull(this.connectionFactory,"connectionFactory must not be null");
  Assert.notNull(this.roleSearchExecutor,"roleSearchExecutor must not be null");
  Assert.notNull(this.userSearchExecutor,"userSearchExecutor must not be null");
  final String username=profile.getId();
  final SearchResult userResult;
  try {
    logger.debug("Attempting to get details for user {}.",username);
    final Response<SearchResult> response=this.userSearchExecutor.search(this.connectionFactory,createSearchFilter(this.userSearchExecutor,username));
    logger.debug("LDAP user search response: {}",response);
    userResult=response.getResult();
  }
 catch (  final LdapException e) {
    throw new RuntimeException("LDAP error fetching details for user.",e);
  }
  if (userResult.size() == 0) {
    throw new AccountNotFoundException(username + " not found.");
  }
  if (userResult.size() > 1 && !this.allowMultipleResults) {
    throw new IllegalStateException("Found multiple results for user which is not allowed (allowMultipleResults=false).");
  }
  final LdapEntry userResultEntry=userResult.getEntry();
  final String userDn=userResultEntry.getDn();
  final LdapAttribute userAttribute=userResultEntry.getAttribute(this.userAttributeName);
  if (userAttribute == null) {
    throw new IllegalStateException(this.userAttributeName + " attribute not found in results.");
  }
  final SearchResult roleResult;
  try {
    logger.debug("Attempting to get roles for user {}.",userDn);
    final Response<SearchResult> response=this.roleSearchExecutor.search(this.connectionFactory,createSearchFilter(this.roleSearchExecutor,userDn));
    logger.debug("LDAP role search response: {}",response);
    roleResult=response.getResult();
  }
 catch (  final LdapException e) {
    throw new RuntimeException("LDAP error fetching roles for user.",e);
  }
  addProfileRolesFromAttributes(profile,roleResult);
}
