{
  final List<LogoutRequest> logoutRequests=WebUtils.getLogoutRequests(context);
  final Integer startIndex=getLogoutIndex(context);
  if (logoutRequests != null) {
    for (int i=startIndex; i < logoutRequests.size(); i++) {
      final LogoutRequest logoutRequest=logoutRequests.get(i);
      if (logoutRequest.getStatus() == LogoutRequestStatus.NOT_ATTEMPTED) {
        logoutRequest.setStatus(LogoutRequestStatus.SUCCESS);
        putLogoutIndex(context,i + 1);
        final String logoutUrl=logoutRequest.getLogoutUrl().toExternalForm();
        LOGGER.debug("Using logout url [{}] for front-channel logout requests",logoutUrl);
        final String logoutMessage=this.logoutManager.createFrontChannelLogoutMessage(logoutRequest);
        LOGGER.debug("Front-channel logout message to send under [{}] is [{}]",this.logoutRequestParameter,logoutMessage);
        final UriComponentsBuilder builder=UriComponentsBuilder.fromHttpUrl(logoutUrl);
        builder.queryParam(this.logoutRequestParameter,EncodingUtils.urlEncode(logoutMessage));
        return result(REDIRECT_APP_EVENT,DEFAULT_FLOW_ATTRIBUTE_LOGOUT_URL,builder.build().toUriString());
      }
    }
  }
  return new Event(this,FINISH_EVENT);
}
