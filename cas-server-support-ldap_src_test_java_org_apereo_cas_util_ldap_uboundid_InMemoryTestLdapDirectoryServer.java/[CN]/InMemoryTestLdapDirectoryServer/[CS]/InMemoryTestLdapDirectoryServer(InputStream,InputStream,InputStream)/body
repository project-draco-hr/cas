{
  try {
    final Properties p=new Properties();
    p.load(properties);
    final InMemoryDirectoryServerConfig config=new InMemoryDirectoryServerConfig(p.getProperty("ldap.rootDn"));
    config.addAdditionalBindCredentials(p.getProperty("ldap.managerDn"),p.getProperty("ldap.managerPassword"));
    final File keystoreFile=File.createTempFile("key","store");
    try (final OutputStream outputStream=new FileOutputStream(keystoreFile)){
      IOUtils.copy(new ClassPathResource("/ldapServerTrustStore").getInputStream(),outputStream);
    }
     final String serverKeyStorePath=keystoreFile.getCanonicalPath();
    final SSLUtil serverSSLUtil=new SSLUtil(new KeyStoreKeyManager(serverKeyStorePath,"changeit".toCharArray()),new TrustStoreTrustManager(serverKeyStorePath));
    final SSLUtil clientSSLUtil=new SSLUtil(new TrustStoreTrustManager(serverKeyStorePath));
    config.setListenerConfigs(InMemoryListenerConfig.createLDAPConfig("LDAP",null,1389,serverSSLUtil.createSSLSocketFactory()),InMemoryListenerConfig.createLDAPSConfig("LDAPS",null,1636,serverSSLUtil.createSSLServerSocketFactory(),clientSSLUtil.createSSLSocketFactory()));
    config.setEnforceSingleStructuralObjectClass(false);
    config.setEnforceAttributeSyntaxCompliance(true);
    config.setMaxConnections(-1);
    final File file=File.createTempFile("ldap","schema");
    try (final OutputStream outputStream=new FileOutputStream(file)){
      IOUtils.copy(schemaFile,outputStream);
    }
     final Schema s=Schema.mergeSchemas(Schema.getSchema(file));
    config.setSchema(s);
    this.directoryServer=new InMemoryDirectoryServer(config);
    LOGGER.debug("Populating directory...");
    final File ldif=File.createTempFile("ldiff","file");
    try (final OutputStream outputStream=new FileOutputStream(ldif)){
      IOUtils.copy(ldifFile,outputStream);
    }
     this.directoryServer.importFromLDIF(true,ldif.getCanonicalPath());
    int retryCount=5;
    while (retryCount > 0) {
      try {
        this.directoryServer.restartServer();
        final LDAPConnection c=getConnection();
        LOGGER.debug("Connected to {}:{}",c.getConnectedAddress(),c.getConnectedPort());
        populateDefaultEntries(c);
        c.close();
        retryCount=0;
      }
 catch (      final Throwable e) {
        Thread.sleep(2000);
        retryCount--;
      }
    }
  }
 catch (  final Exception e) {
    throw Throwables.propagate(e);
  }
}
