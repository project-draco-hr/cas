{
  final Map<String,List<Object>> map=new HashMap<String,List<Object>>();
  map.put("a1",Arrays.asList(new Object[]{"v1","v2","v3"}));
  map.put("a6",Arrays.asList(new Object[]{"v16","v26","v63"}));
  map.put("a2",Arrays.asList(new Object[]{"v4"}));
  map.put("username",Arrays.asList(new Object[]{"user"}));
  final IPersonAttributeDao dao=mock(IPersonAttributeDao.class);
  final IPersonAttributes person=mock(IPersonAttributes.class);
  when(person.getName()).thenReturn("user");
  when(person.getAttributes()).thenReturn(map);
  when(dao.getPerson(any(String.class))).thenReturn(person);
  final NotCachingAttributesPrincipalFactory fact=new NotCachingAttributesPrincipalFactory(dao);
  final Principal p=fact.createPrincipal("user",PrincipalUtils.convertPersonAttributesToPrincipalAttributes("user",dao));
  assertTrue(p instanceof NotCachingAttributesPrincipal);
  assertEquals(p.getAttributes().size(),map.size());
  assertTrue(p.getAttributes().containsKey("a2"));
  assertEquals(p.getAttributes().get("a2"),"v4");
  map.put("a6",Arrays.asList(new Object[]{"v26","v6311"}));
  map.remove("a2");
  assertEquals(p.getAttributes().size(),map.size());
  assertFalse(p.getAttributes().containsKey("a2"));
}
