{
  final String newDn=getDnForRegisteredService(dn,svc);
  LOGGER.debug("Creating new DN entry [{}]",newDn);
  if (svc.getId() == -1) {
    ((AbstractRegisteredService)svc).setId(newDn.hashCode());
  }
  final Collection<LdapAttribute> attrs=new LinkedList<LdapAttribute>();
  attrs.add(new LdapAttribute(this.idAttribute,String.valueOf(svc.getId())));
  attrs.add(new LdapAttribute(this.evaluationOrderAttribute,String.valueOf(svc.getEvaluationOrder())));
  attrs.add(new LdapAttribute(this.serviceEnabledAttribute,Boolean.toString(svc.isEnabled()).toUpperCase()));
  attrs.add(new LdapAttribute(this.serviceAllowedToProxyAttribute,Boolean.toString(svc.isAllowedToProxy()).toUpperCase()));
  attrs.add(new LdapAttribute(this.serviceAnonymousAccessAttribute,Boolean.toString(svc.isAnonymousAccess()).toUpperCase()));
  attrs.add(new LdapAttribute(this.serviceSsoEnabledAttribute,Boolean.toString(svc.isSsoEnabled()).toUpperCase()));
  attrs.add(new LdapAttribute(this.serviceIdAttribute,svc.getServiceId()));
  attrs.add(new LdapAttribute(this.serviceThemeAttribute,svc.getTheme()));
  attrs.add(new LdapAttribute(this.serviceDescriptionAttribute,svc.getDescription()));
  attrs.add(new LdapAttribute(this.usernameAttribute,svc.getUsernameAttribute()));
  attrs.add(new LdapAttribute(this.serviceAllowedAttributesAttribute,svc.getAllowedAttributes().toArray(new String[]{})));
  attrs.add(new LdapAttribute(LdapUtils.OBJECTCLASS_ATTRIBUTE,this.objectclass));
  return new LdapEntry(newDn,attrs);
}
