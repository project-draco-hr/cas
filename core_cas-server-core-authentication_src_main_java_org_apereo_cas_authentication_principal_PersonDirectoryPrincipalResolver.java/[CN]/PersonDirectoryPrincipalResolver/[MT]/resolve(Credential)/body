{
  logger.debug("Attempting to resolve a principal...");
  String principalId=extractPrincipalId(credential);
  if (StringUtils.isBlank(principalId)) {
    logger.debug("Principal id [{}] could not be found",principalId);
    return null;
  }
  if (principalNameTransformer != null) {
    principalId=principalNameTransformer.transform(principalId);
  }
  logger.debug("Creating SimplePrincipal for [{}]",principalId);
  final Map<String,List<Object>> attributes=retrievePersonAttributes(principalId,credential);
  if (attributes == null || attributes.isEmpty()) {
    logger.debug("Principal id [{}] did not specify any attributes",principalId);
    if (!this.returnNullIfNoAttributes) {
      logger.debug("Returning the principal with id [{}] without any attributes",principalId);
      return this.principalFactory.createPrincipal(principalId);
    }
    logger.debug("[{}] is configured to return null if no attributes are found for [{}]",this.getClass().getName(),principalId);
    return null;
  }
  logger.debug("Retrieved [{}] attribute(s) from the repository",attributes.size());
  final Pair<String,Map<String,Object>> pair=convertPersonAttributesToPrincipal(principalId,attributes);
  return this.principalFactory.createPrincipal(pair.getFirst(),pair.getSecond());
}
