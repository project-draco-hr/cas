{
  try {
    request.removeParameter(OpenIdProtocolConstants.OPENID_ASSOCHANDLE);
    request.addParameter(OpenIdProtocolConstants.OPENID_ASSOCHANDLE,association.getHandle());
    openIdService=openIdServiceFactory.createService(request);
    final AuthenticationContext ctx=getAuthenticationContext(openIdService,org.jasig.cas.authentication.TestUtils.getCredentialsWithSameUsernameAndPassword());
    final String tgt=centralAuthenticationService.createTicketGrantingTicket(ctx).getId();
    final String st=centralAuthenticationService.grantServiceTicket(tgt,openIdService,ctx).getId();
    centralAuthenticationService.validateServiceTicket(st,openIdService);
    final Response response=this.openIdService.getResponse(st);
    assertNotNull(response);
    assertEquals(association.getHandle(),response.getAttributes().get(OpenIdProtocolConstants.OPENID_ASSOCHANDLE));
    assertEquals("http://www.ja-sig.org/?service=fa",response.getAttributes().get(OpenIdProtocolConstants.OPENID_RETURNTO));
    assertEquals("http://openid.ja-sig.org/battags",response.getAttributes().get(OpenIdProtocolConstants.OPENID_IDENTITY));
    final Response response2=this.openIdService.getResponse(null);
    assertEquals("cancel",response2.getAttributes().get(OpenIdProtocolConstants.OPENID_MODE));
  }
 catch (  final Exception e) {
    logger.debug("Exception during verification of service ticket",e);
  }
}
