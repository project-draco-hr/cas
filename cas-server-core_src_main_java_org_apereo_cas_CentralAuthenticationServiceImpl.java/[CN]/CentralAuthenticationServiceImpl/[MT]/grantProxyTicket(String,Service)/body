{
  final ProxyGrantingTicket proxyGrantingTicketObject=getTicket(proxyGrantingTicket,ProxyGrantingTicket.class);
  final RegisteredService registeredService=this.servicesManager.findServiceBy(service);
  try {
    RegisteredServiceAccessStrategyUtils.ensurePrincipalAccessIsAllowedForService(service,registeredService,proxyGrantingTicketObject);
    RegisteredServiceAccessStrategyUtils.ensureServiceSsoAccessIsAllowed(registeredService,service,proxyGrantingTicketObject);
  }
 catch (  final PrincipalException e) {
    throw new UnauthorizedSsoServiceException();
  }
  evaluateProxiedServiceIfNeeded(service,proxyGrantingTicketObject,registeredService);
  getAuthenticationSatisfiedByPolicy(proxyGrantingTicketObject.getRoot().getAuthentication(),new ServiceContext(service,registeredService));
  final List<Authentication> authentications=proxyGrantingTicketObject.getChainedAuthentications();
  final Authentication authentication=authentications.get(authentications.size() - 1);
  CurrentCredentialsAndAuthentication.bindCurrent(authentication);
  final Principal principal=authentication.getPrincipal();
  final ProxyTicketFactory factory=this.ticketFactory.get(ProxyTicket.class);
  final ProxyTicket proxyTicket=factory.create(proxyGrantingTicketObject,service);
  this.ticketRegistry.updateTicket(proxyGrantingTicketObject);
  this.ticketRegistry.addTicket(proxyTicket);
  logger.info("Granted ticket [{}] for service [{}] for user [{}]",proxyTicket.getId(),service.getId(),principal.getId());
  doPublishEvent(new CasProxyTicketGrantedEvent(this,proxyGrantingTicketObject,proxyTicket));
  return proxyTicket;
}
