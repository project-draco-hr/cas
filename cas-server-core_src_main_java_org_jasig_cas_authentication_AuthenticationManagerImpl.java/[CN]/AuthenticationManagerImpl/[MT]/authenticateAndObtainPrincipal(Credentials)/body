{
  boolean foundSupported=false;
  boolean authenticated=false;
  AuthenticationHandler authenticatedClass=null;
  String handlerName;
  AuthenticationException unAuthSupportedHandlerException=BadCredentialsAuthenticationException.ERROR;
  for (  final AuthenticationHandler authenticationHandler : this.authenticationHandlers) {
    if (authenticationHandler.supports(credentials)) {
      foundSupported=true;
      handlerName=authenticationHandler.getClass().getName();
      try {
        authenticationHandler.authenticate(credentials);
        log.info("{} successfully authenticated {}",handlerName,credentials);
        authenticatedClass=authenticationHandler;
        authenticated=true;
        break;
      }
 catch (      final GeneralSecurityException e) {
        logAuthenticationHandlerError(handlerName,credentials,e);
      }
catch (      final PreventedException e) {
        logAuthenticationHandlerError(handlerName,credentials,e);
      }
    }
  }
  if (!authenticated) {
    if (foundSupported) {
      throw unAuthSupportedHandlerException;
    }
    throw UnsupportedCredentialsException.ERROR;
  }
  foundSupported=false;
  for (  final CredentialsToPrincipalResolver credentialsToPrincipalResolver : this.credentialsToPrincipalResolvers) {
    if (credentialsToPrincipalResolver.supports(credentials)) {
      final Principal principal=credentialsToPrincipalResolver.resolvePrincipal(credentials);
      log.info("Resolved principal " + principal);
      foundSupported=true;
      if (principal != null) {
        return new Pair<AuthenticationHandler,Principal>(authenticatedClass,principal);
      }
    }
  }
  if (foundSupported) {
    if (log.isDebugEnabled()) {
      log.debug("CredentialsToPrincipalResolver found but no principal returned.");
    }
    throw BadCredentialsAuthenticationException.ERROR;
  }
  log.error("CredentialsToPrincipalResolver not found for " + credentials.getClass().getName());
  throw UnsupportedCredentialsException.ERROR;
}
