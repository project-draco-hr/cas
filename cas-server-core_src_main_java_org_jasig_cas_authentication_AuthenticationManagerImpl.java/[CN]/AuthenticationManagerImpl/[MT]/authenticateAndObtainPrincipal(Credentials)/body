{
  boolean foundSupported=false;
  boolean authenticated=false;
  AuthenticationHandler authenticatedClass=null;
  for (  final AuthenticationHandler authenticationHandler : this.authenticationHandlers) {
    if (authenticationHandler.supports(credentials)) {
      foundSupported=true;
      boolean auth=false;
      final LoggingStopWatch stopWatch=new LoggingStopWatch(authenticationHandler.getClass().getSimpleName());
      try {
        auth=authenticationHandler.authenticate(credentials);
      }
  finally {
        stopWatch.stop();
      }
      if (!auth) {
        if (log.isInfoEnabled()) {
          log.info("AuthenticationHandler: " + authenticationHandler.getClass().getName() + " failed to authenticate the user which provided the following credentials: "+ credentials.toString());
        }
      }
 else {
        if (log.isInfoEnabled()) {
          log.info("AuthenticationHandler: " + authenticationHandler.getClass().getName() + " successfully authenticated the user which provided the following credentials: "+ credentials.toString());
        }
        authenticatedClass=authenticationHandler;
        authenticated=true;
        break;
      }
    }
  }
  if (!authenticated) {
    if (foundSupported) {
      throw BadCredentialsAuthenticationException.ERROR;
    }
    throw UnsupportedCredentialsException.ERROR;
  }
  foundSupported=false;
  for (  final CredentialsToPrincipalResolver credentialsToPrincipalResolver : this.credentialsToPrincipalResolvers) {
    if (credentialsToPrincipalResolver.supports(credentials)) {
      final Principal principal=credentialsToPrincipalResolver.resolvePrincipal(credentials);
      log.info("Resolved principal " + principal);
      foundSupported=true;
      if (principal != null) {
        return new Pair<AuthenticationHandler,Principal>(authenticatedClass,principal);
      }
    }
  }
  if (foundSupported) {
    if (log.isDebugEnabled()) {
      log.debug("CredentialsToPrincipalResolver found but no principal returned.");
    }
    throw BadCredentialsAuthenticationException.ERROR;
  }
  log.error("CredentialsToPrincipalResolver not found for " + credentials.getClass().getName());
  throw UnsupportedCredentialsException.ERROR;
}
