{
  boolean foundSupported=false;
  final Map<String,Exception> errorMap=new LinkedHashMap<String,Exception>();
  final Map<String,HandlerResult> successMap=new LinkedHashMap<String,HandlerResult>();
  HandlerResult authenticatedResult=null;
  AuthenticationHandler authenticatedClass=null;
  String handlerName;
  for (  final AuthenticationHandler authenticationHandler : this.authenticationHandlers) {
    if (authenticationHandler.supports(credentials)) {
      foundSupported=true;
      handlerName=authenticationHandler.getName();
      try {
        authenticatedResult=authenticationHandler.authenticate(credentials);
        successMap.put(handlerName,authenticatedResult);
        log.info("{} successfully authenticated {}",handlerName,credentials);
        authenticatedClass=authenticationHandler;
        break;
      }
 catch (      final Exception e) {
        logAuthenticationHandlerError(handlerName,credentials,e);
        errorMap.put(handlerName,e);
      }
    }
  }
  if (authenticatedResult == null) {
    if (errorMap.size() > 0) {
      throw new AuthenticationException(errorMap);
    }
    throw new AuthenticationException();
  }
  foundSupported=false;
  for (  final CredentialsToPrincipalResolver credentialsToPrincipalResolver : this.credentialsToPrincipalResolvers) {
    if (credentialsToPrincipalResolver.supports(credentials)) {
      final Principal principal=credentialsToPrincipalResolver.resolvePrincipal(credentials);
      log.info("Resolved principal " + principal);
      foundSupported=true;
      if (principal != null) {
        return new Pair<AuthenticationHandler,Principal>(authenticatedClass,principal);
      }
    }
  }
  if (foundSupported) {
    throw new PrincipalException("Resolver found but no principal returned.",errorMap,successMap);
  }
  throw new PrincipalException("Resolver not found for " + credentials.getClass().getName(),errorMap,successMap);
}
