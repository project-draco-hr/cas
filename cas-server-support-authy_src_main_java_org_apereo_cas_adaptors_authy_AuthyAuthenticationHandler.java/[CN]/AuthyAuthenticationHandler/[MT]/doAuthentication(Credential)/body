{
  final AuthyTokenCredential tokenCredential=(AuthyTokenCredential)credential;
  final RequestContext context=RequestContextHolder.getRequestContext();
  final Principal principal=WebUtils.getAuthentication(context).getPrincipal();
  if (!this.registry.contains(principal)) {
    final String email=(String)principal.getAttributes().get(this.mailAttribute);
    if (StringUtils.isBlank(email)) {
      throw new FailedLoginException("No email address found for " + principal.getId());
    }
    final String phone=(String)principal.getAttributes().get(this.phoneAttribute);
    if (StringUtils.isBlank(phone)) {
      throw new FailedLoginException("No phone number found for " + principal.getId());
    }
    final User user=authyUsers.createUser(email,phone);
    if (!user.isOk()) {
      throw new FailedLoginException(getAuthyErrorMessage(user.getError()));
    }
    final Integer authyId=user.getId();
    this.registry.add(authyId,principal);
  }
  final Integer authyId=this.registry.get(principal);
  final Map<String,String> options=new HashMap<>();
  options.put("force",this.forceVerification.toString());
  final Token verification=this.authyTokens.verify(authyId,tokenCredential.getToken(),options);
  if (!verification.isOk()) {
    throw new FailedLoginException(getAuthyErrorMessage(verification.getError()));
  }
  return createHandlerResult(tokenCredential,principal,new ArrayStack());
}
