{
  final String accessToken=request.getParameter(OAuthConstants.ACCESS_TOKEN);
  logger.debug("accessToken : {}",accessToken);
  final JsonFactory jsonFactory=new JsonFactory();
  final JsonGenerator jsonGenerator=jsonFactory.createJsonGenerator(response.getWriter());
  if (StringUtils.isBlank(accessToken)) {
    logger.error("missing accessToken");
    jsonGenerator.writeStartObject();
    jsonGenerator.writeStringField("error",OAuthConstants.MISSING_ACCESS_TOKEN);
    jsonGenerator.writeEndObject();
    jsonGenerator.close();
    response.flushBuffer();
    return null;
  }
  final TicketGrantingTicket ticketGrantingTicket=(TicketGrantingTicket)ticketRegistry.getTicket(accessToken);
  if (ticketGrantingTicket == null || ticketGrantingTicket.isExpired()) {
    logger.error("expired accessToken : {}",accessToken);
    jsonGenerator.writeStartObject();
    jsonGenerator.writeStringField("error",OAuthConstants.EXPIRED_ACCESS_TOKEN);
    jsonGenerator.writeEndObject();
    jsonGenerator.close();
    response.flushBuffer();
    return null;
  }
  final Principal principal=ticketGrantingTicket.getAuthentication().getPrincipal();
  jsonGenerator.writeStartObject();
  jsonGenerator.writeStringField(CasWrapperProfile.ID,principal.getId());
  jsonGenerator.writeArrayFieldStart(CasWrapperProfile.ATTRIBUTES);
  final Map<String,Object> attributes=principal.getAttributes();
  for (  final String key : attributes.keySet()) {
    jsonGenerator.writeStartObject();
    jsonGenerator.writeObjectField(key,attributes.get(key));
    jsonGenerator.writeEndObject();
  }
  jsonGenerator.writeEndArray();
  jsonGenerator.writeEndObject();
  jsonGenerator.close();
  response.flushBuffer();
  return null;
}
