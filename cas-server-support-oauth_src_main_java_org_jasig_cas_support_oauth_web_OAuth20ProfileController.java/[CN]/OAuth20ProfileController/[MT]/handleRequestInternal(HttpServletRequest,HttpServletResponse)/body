{
  String accessToken=request.getParameter(OAuthConstants.ACCESS_TOKEN);
  if (StringUtils.isBlank(accessToken)) {
    String authHeader=request.getHeader("Authorization");
    if (authHeader != null && authHeader.startsWith("bearer ")) {
      accessToken=authHeader.substring(7);
    }
  }
  LOGGER.debug("{} : {}",OAuthConstants.ACCESS_TOKEN,accessToken);
  final JsonGenerator jsonGenerator=this.jsonFactory.createJsonGenerator(response.getWriter());
  try {
    response.setContentType("application/json");
    if (StringUtils.isBlank(accessToken)) {
      LOGGER.error("Missing {}",OAuthConstants.ACCESS_TOKEN);
      jsonGenerator.writeStartObject();
      jsonGenerator.writeStringField("error",OAuthConstants.MISSING_ACCESS_TOKEN);
      jsonGenerator.writeEndObject();
      return null;
    }
    final TicketGrantingTicket ticketGrantingTicket=(TicketGrantingTicket)this.ticketRegistry.getTicket(accessToken);
    if (ticketGrantingTicket == null || ticketGrantingTicket.isExpired()) {
      LOGGER.error("expired accessToken : {}",accessToken);
      jsonGenerator.writeStartObject();
      jsonGenerator.writeStringField("error",OAuthConstants.EXPIRED_ACCESS_TOKEN);
      jsonGenerator.writeEndObject();
      return null;
    }
    final Principal principal=ticketGrantingTicket.getAuthentication().getPrincipal();
    jsonGenerator.writeStartObject();
    jsonGenerator.writeStringField(ID,principal.getId());
    jsonGenerator.writeArrayFieldStart(ATTRIBUTES);
    final Map<String,Object> attributes=principal.getAttributes();
    for (    final String key : attributes.keySet()) {
      jsonGenerator.writeStartObject();
      jsonGenerator.writeObjectField(key,attributes.get(key));
      jsonGenerator.writeEndObject();
    }
    jsonGenerator.writeEndArray();
    jsonGenerator.writeEndObject();
    return null;
  }
  finally {
    IOUtils.closeQuietly(jsonGenerator);
    response.flushBuffer();
  }
}
