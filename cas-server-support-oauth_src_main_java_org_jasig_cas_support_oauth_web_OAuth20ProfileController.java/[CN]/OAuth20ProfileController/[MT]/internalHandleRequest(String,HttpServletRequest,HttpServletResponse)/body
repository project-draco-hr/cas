{
  String accessToken=request.getParameter(OAuthConstants.ACCESS_TOKEN);
  if (StringUtils.isBlank(accessToken)) {
    final String authHeader=request.getHeader(HttpConstants.AUTHORIZATION_HEADER);
    if (StringUtils.isNotBlank(authHeader) && authHeader.toLowerCase().startsWith(OAuthConstants.BEARER_TOKEN.toLowerCase() + ' ')) {
      accessToken=authHeader.substring(OAuthConstants.BEARER_TOKEN.length() + 1);
    }
  }
  LOGGER.debug("{} : {}",OAuthConstants.ACCESS_TOKEN,accessToken);
  try (final JsonGenerator jsonGenerator=this.jsonFactory.createJsonGenerator(response.getWriter())){
    response.setContentType("application/json");
    if (StringUtils.isBlank(accessToken)) {
      LOGGER.error("Missing {}",OAuthConstants.ACCESS_TOKEN);
      jsonGenerator.writeStartObject();
      jsonGenerator.writeStringField("error",OAuthConstants.MISSING_ACCESS_TOKEN);
      jsonGenerator.writeEndObject();
      return null;
    }
    try {
      final Pair<String,Service> pair=this.accessTokenGenerator.degenerate(accessToken);
      accessToken=pair.getFirst();
      final TicketGrantingTicket ticketGrantingTicket=verifyAccessToken(accessToken,jsonGenerator);
      if (ticketGrantingTicket == null) {
        return null;
      }
      final RegisteredService service=verifyRegisteredService(jsonGenerator,pair);
      if (service == null) {
        return null;
      }
      final Principal principal=ticketGrantingTicket.getAuthentication().getPrincipal();
      if (!verifyPrincipalServiceAccess(jsonGenerator,service,principal)) {
        return null;
      }
      writeOutProfileResponse(jsonGenerator,service,principal);
    }
 catch (    final Exception e) {
      jsonGenerator.writeStartObject();
      jsonGenerator.writeStringField("error",OAuthConstants.INVALID_REQUEST + ". " + e.getMessage());
      jsonGenerator.writeEndObject();
    }
    return null;
  }
  finally {
    response.flushBuffer();
  }
}
