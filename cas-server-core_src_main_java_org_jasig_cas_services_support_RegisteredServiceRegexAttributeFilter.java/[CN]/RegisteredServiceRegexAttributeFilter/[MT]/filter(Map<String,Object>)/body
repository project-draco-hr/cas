{
  final Map<String,Object> attributesToRelease=new HashMap<>();
  for (  final Map.Entry<String,Object> entry : givenAttributes.entrySet()) {
    final String attributeName=entry.getKey();
    final Object attributeValue=entry.getValue();
    logger.debug("Received attribute [{}] with value [{}]",attributeName,attributeValue);
    if (attributeValue != null) {
      if (attributeValue instanceof Collection) {
        logger.trace("Attribute value {} is a collection",attributeValue);
        final String[] filteredAttributes=filterArrayAttributes(((Collection<String>)attributeValue).toArray(new String[]{}),attributeName);
        if (filteredAttributes.length > 0) {
          attributesToRelease.put(attributeName,Arrays.asList(filteredAttributes));
        }
      }
 else       if (attributeValue.getClass().isArray()) {
        logger.trace("Attribute value {} is an array",attributeValue);
        final String[] filteredAttributes=filterArrayAttributes((String[])attributeValue,attributeName);
        if (filteredAttributes.length > 0) {
          attributesToRelease.put(attributeName,Arrays.asList(filteredAttributes));
        }
      }
 else       if (attributeValue instanceof Map) {
        logger.trace("Attribute value {} is a map",attributeValue);
        final Map<String,String> filteredAttributes=filterMapAttributes((Map<String,String>)attributeValue);
        if (filteredAttributes.size() > 0) {
          attributesToRelease.put(attributeName,filteredAttributes);
        }
      }
 else {
        logger.trace("Attribute value {} is a string",attributeValue);
        final String attrValue=attributeValue.toString();
        if (patternMatchesAttributeValue(attrValue)) {
          logReleasedAttributeEntry(attributeName,attrValue);
          attributesToRelease.put(attributeName,attrValue);
        }
      }
    }
  }
  logger.debug("Received {} attributes. Filtered and released {}",givenAttributes.size(),attributesToRelease.size());
  return attributesToRelease;
}
