{
  try {
    final AbstractRegisteredService regSvc;
    final String type=data.getType();
    if (StringUtils.equalsIgnoreCase(type,RegisteredServiceTypeEditBean.OAUTH_CALLBACK_AUTHZ.toString())) {
      regSvc=new OAuthCallbackAuthorizeService();
    }
 else     if (StringUtils.equalsIgnoreCase(type,RegisteredServiceTypeEditBean.OAUTH.toString())) {
      regSvc=new OAuthRegisteredService();
      final RegisteredServiceOAuthTypeEditBean oauthBean=data.getOauth();
      ((OAuthRegisteredService)regSvc).setClientId(oauthBean.getClientId());
      ((OAuthRegisteredService)regSvc).setClientSecret(oauthBean.getClientSecret());
      ((OAuthRegisteredService)regSvc).setBypassApprovalPrompt(oauthBean.isBypass());
      ((OAuthRegisteredService)regSvc).setGenerateRefreshToken(oauthBean.isRefreshToken());
      ((OAuthRegisteredService)regSvc).setJsonFormat(oauthBean.isJsonFormat());
    }
 else {
      regSvc=determineServiceTypeByPattern(data.getServiceId());
    }
    final long assignedId=Long.parseLong(data.getAssignedId());
    if (assignedId <= 0) {
      regSvc.setId(RegisteredService.INITIAL_IDENTIFIER_VALUE);
    }
 else {
      regSvc.setId(assignedId);
    }
    regSvc.setServiceId(data.getServiceId());
    regSvc.setName(data.getName());
    regSvc.setDescription(data.getDescription());
    if (StringUtils.isNotBlank(data.getLogoUrl())) {
      regSvc.setLogo(new URL(data.getLogoUrl()));
    }
    regSvc.setTheme(data.getTheme());
    regSvc.setEvaluationOrder(data.getEvalOrder());
    regSvc.setRequiredHandlers(data.getRequiredHandlers());
    parseLogoutType(data.getLogoutType());
    if (StringUtils.isNotBlank(data.getLogoutUrl())) {
      regSvc.setLogoutUrl(new URL(data.getLogoutUrl()));
    }
    final RegisteredServicePublicKeyEditBean publicKey=data.getPublicKey();
    if (publicKey != null && publicKey.isValid()) {
      regSvc.setPublicKey(new RegisteredServicePublicKeyImpl(publicKey.getLocation(),publicKey.getAlgorithm()));
    }
    return regSvc;
  }
 catch (  final Exception e) {
    throw new RuntimeException(e);
  }
}
