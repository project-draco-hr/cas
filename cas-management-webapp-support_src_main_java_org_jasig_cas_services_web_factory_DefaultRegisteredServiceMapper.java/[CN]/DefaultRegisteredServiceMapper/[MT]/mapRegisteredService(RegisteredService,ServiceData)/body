{
  bean.setAssignedId(svc.getId());
  bean.setServiceId(svc.getServiceId());
  bean.setName(svc.getName());
  bean.setDescription(svc.getDescription());
  if (svc.getLogo() != null) {
    bean.setLogoUrl(svc.getLogo().toExternalForm());
  }
  bean.setRequiredHandlers(svc.getRequiredHandlers());
  if (svc instanceof OAuthCallbackAuthorizeService) {
    bean.setType(RegisteredServiceTypeEditBean.OAUTH_CALLBACK_AUTHZ.toString());
  }
  if (svc instanceof OAuthRegisteredService) {
    bean.setType(RegisteredServiceTypeEditBean.OAUTH.toString());
    final OAuthRegisteredService oauth=(OAuthRegisteredService)svc;
    final RegisteredServiceOAuthTypeEditBean oauthBean=bean.getOauth();
    oauthBean.setBypass(oauth.isBypassApprovalPrompt());
    oauthBean.setClientId(oauth.getClientId());
    oauthBean.setClientSecret(oauth.getClientSecret());
  }
  bean.setTheme(svc.getTheme());
  bean.setEvalOrder(svc.getEvaluationOrder());
  final LogoutType logoutType=svc.getLogoutType();
switch (logoutType) {
case BACK_CHANNEL:
    bean.setLogoutType(RegisteredServiceLogoutTypeEditBean.BACK.toString());
  break;
case FRONT_CHANNEL:
bean.setLogoutType(RegisteredServiceLogoutTypeEditBean.FRONT.toString());
break;
default :
bean.setLogoutType(RegisteredServiceLogoutTypeEditBean.NONE.toString());
break;
}
final URL url=svc.getLogoutUrl();
if (url != null) {
bean.setLogoutUrl(url.toExternalForm());
}
final RegisteredServicePublicKey key=svc.getPublicKey();
final RegisteredServicePublicKeyEditBean pBean=bean.getPublicKey();
if (key != null) {
pBean.setAlgorithm(key.getAlgorithm());
pBean.setLocation(key.getLocation());
}
}
