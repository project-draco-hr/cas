{
  final Map<String,String> parameters=new HashMap<>();
  if (ticketId != null) {
    final ServerManager manager=(ServerManager)ApplicationContextProvider.getApplicationContext().getBean("serverManager");
    final CentralAuthenticationService cas=ApplicationContextProvider.getApplicationContext().getBean("centralAuthenticationService",CentralAuthenticationService.class);
    boolean associated=false;
    boolean associationValid=true;
    try {
      final AuthRequest authReq=AuthRequest.createAuthRequest(requestParameters,manager.getRealmVerifier());
      final Map parameterMap=authReq.getParameterMap();
      if (parameterMap != null && !parameterMap.isEmpty()) {
        final String assocHandle=(String)parameterMap.get(OpenIdProtocolConstants.OPENID_ASSOCHANDLE);
        if (assocHandle != null) {
          final Association association=manager.getSharedAssociations().load(assocHandle);
          if (association != null) {
            associated=true;
            if (association.hasExpired()) {
              associationValid=false;
            }
          }
        }
      }
    }
 catch (    final MessageException me) {
      LOGGER.error("Message exception : {}",me.getMessage(),me);
    }
    boolean successFullAuthentication=true;
    Assertion assertion=null;
    try {
      if (associated) {
        if (associationValid) {
          assertion=cas.validateServiceTicket(ticketId,this);
          LOGGER.info("Validated openid ticket");
        }
 else {
          successFullAuthentication=false;
        }
      }
    }
 catch (    final TicketException te) {
      LOGGER.error("Could not validate ticket : {}",te.getMessage(),te);
      successFullAuthentication=false;
    }
    final String id;
    if (assertion != null && OpenIdProtocolConstants.OPENID_IDENTIFIERSELECT.equals(this.identity)) {
      id=this.openIdPrefixUrl + '/' + assertion.getPrimaryAuthentication().getPrincipal().getId();
    }
 else {
      id=this.identity;
    }
    final Message response=manager.authResponse(requestParameters,id,id,successFullAuthentication,true);
    parameters.putAll(response.getParameterMap());
    if (!associated) {
      parameters.put(OpenIdProtocolConstants.OPENID_ASSOCHANDLE,ticketId);
    }
  }
 else {
    parameters.put(OpenIdProtocolConstants.OPENID_MODE,OpenIdProtocolConstants.CANCEL);
  }
  return DefaultResponse.getRedirectResponse(getOriginalUrl(),parameters);
}
