{
  final Map<String,String> parameters=new HashMap<String,String>();
  if (ticketId != null) {
    ServerManager manager=(ServerManager)ApplicationContextProvider.getApplicationContext().getBean("serverManager");
    CentralAuthenticationService cas=(CentralAuthenticationService)ApplicationContextProvider.getApplicationContext().getBean("centralAuthenticationService");
    boolean associated=false;
    boolean associationValid=true;
    try {
      AuthRequest authReq=AuthRequest.createAuthRequest(requestParameters,manager.getRealmVerifier());
      Map parameterMap=authReq.getParameterMap();
      if (parameterMap != null && parameterMap.size() > 0) {
        String assocHandle=(String)parameterMap.get("openid.assoc_handle");
        if (assocHandle != null) {
          Association association=manager.getSharedAssociations().load(assocHandle);
          if (association != null) {
            associated=true;
            if (association.hasExpired()) {
              associationValid=false;
            }
          }
        }
      }
    }
 catch (    MessageException me) {
      LOG.error("Message exception : " + me.getMessage(),me);
    }
    boolean successFullAuthentication=true;
    try {
      if (associated) {
        if (associationValid) {
          cas.validateServiceTicket(ticketId,this);
          LOG.info("Validated openid ticket");
        }
 else {
          successFullAuthentication=false;
        }
      }
    }
 catch (    TicketException te) {
      LOG.error("Could not validate ticket : " + te.getMessage(),te);
      successFullAuthentication=false;
    }
    Message response=manager.authResponse(requestParameters,this.identity,this.identity,successFullAuthentication,true);
    parameters.putAll(response.getParameterMap());
    if (!associated) {
      parameters.put("openid.assoc_handle",ticketId);
    }
  }
 else {
    parameters.put("openid.mode","cancel");
  }
  return Response.getRedirectResponse(getOriginalUrl(),parameters);
}
