{
  final Map<String,Object> filteredAuthenticationAttributes=new HashMap<>(getAuthenticationAttributes(model));
  filteredAuthenticationAttributes.put(CasProtocolConstants.VALIDATION_CAS_MODEL_ATTRIBUTE_NAME_AUTHENTICATION_DATE,Collections.singleton(getAuthenticationDate(model)));
  filteredAuthenticationAttributes.put(CasProtocolConstants.VALIDATION_CAS_MODEL_ATTRIBUTE_NAME_FROM_NEW_LOGIN,Collections.singleton(isAssertionBackedByNewLogin(model)));
  filteredAuthenticationAttributes.put(CasProtocolConstants.VALIDATION_REMEMBER_ME_ATTRIBUTE_NAME,Collections.singleton(isRememberMeAuthentication(model)));
  final Optional<MultifactorAuthenticationProvider> contextProvider=getSatisfiedMultifactorAuthenticationProvider(model);
  if (contextProvider.isPresent()) {
    filteredAuthenticationAttributes.put(this.authenticationContextAttribute,Collections.singleton(contextProvider.get().getId()));
  }
  return filteredAuthenticationAttributes;
}
