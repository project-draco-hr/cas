{
  final String tId=getCentralAuthenticationService().createTicketGrantingTicket(TestUtils.getCredentialsWithSameUsernameAndPassword());
  final String sId=getCentralAuthenticationService().grantServiceTicket(tId,TestUtils.getService());
  final MockHttpServletRequest request=new MockHttpServletRequest();
  request.addParameter("service",TestUtils.getService().getId());
  request.addParameter("ticket",sId);
  request.addParameter("pgtUrl","https://www.github.com");
  this.serviceValidateController.setProxyHandler(new ProxyHandler(){
    @Override public String handle(    final Credential credential,    final String proxyGrantingTicketId){
      return null;
    }
    @Override public boolean canHandle(    final Credential credential){
      return true;
    }
  }
);
  final ModelAndView modelAndView=this.serviceValidateController.handleRequestInternal(request,new MockHttpServletResponse());
  assertEquals(ServiceValidateController.DEFAULT_SERVICE_FAILURE_VIEW_NAME,modelAndView.getViewName());
  assertNull(modelAndView.getModel().get("pgtIou"));
}
