{
  final Principal principal=createPrincipal();
  final RegisteredService registeredService=addRegisteredService();
  final Authentication authentication=getAuthentication(principal);
  final Service service=new OAuthWebApplicationService(registeredService);
  final DefaultRefreshTokenFactory expiringRefreshTokenFactory=new DefaultRefreshTokenFactory();
  expiringRefreshTokenFactory.setExpirationPolicy(new AlwaysExpiresExpirationPolicy());
  final RefreshToken refreshToken=expiringRefreshTokenFactory.create(service,authentication);
  oAuth20AccessTokenController.getTicketRegistry().addTicket(refreshToken);
  final MockHttpServletRequest mockRequest=new MockHttpServletRequest("GET",CONTEXT + OAuthConstants.ACCESS_TOKEN_URL);
  mockRequest.setParameter(OAuthConstants.GRANT_TYPE,OAuthGrantType.REFRESH_TOKEN.name().toLowerCase());
  mockRequest.setParameter(OAuthConstants.CLIENT_ID,CLIENT_ID);
  mockRequest.setParameter(OAuthConstants.CLIENT_SECRET,CLIENT_SECRET);
  mockRequest.setParameter(OAuthConstants.REFRESH_TOKEN,refreshToken.getId());
  final MockHttpServletResponse mockResponse=new MockHttpServletResponse();
  requiresAuthenticationInterceptor.preHandle(mockRequest,mockResponse,null);
  oAuth20AccessTokenController.handleRequestInternal(mockRequest,mockResponse);
  assertEquals(HttpStatus.SC_BAD_REQUEST,mockResponse.getStatus());
  assertEquals("error=" + OAuthConstants.INVALID_GRANT,mockResponse.getContentAsString());
}
