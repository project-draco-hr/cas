{
  final RegisteredService registeredService=getRegisteredService(REDIRECT_URI,CLIENT_SECRET);
  servicesManager.save(registeredService);
  final Map<String,Object> map=new HashMap<>();
  map.put(NAME,VALUE);
  final List<String> list=Arrays.asList(VALUE,VALUE);
  map.put(NAME2,list);
  final Principal principal=TestUtils.getPrincipal(ID,map);
  final Authentication authentication=getAuthentication(principal);
  final DefaultOAuthCodeFactory expiringOAuthCodeFactory=new DefaultOAuthCodeFactory();
  expiringOAuthCodeFactory.setExpirationPolicy(new AlwaysExpiresExpirationPolicy());
  final Service service=new OAuthWebApplicationService(registeredService);
  final OAuthCode code=expiringOAuthCodeFactory.create(service,authentication);
  oAuth20AccessTokenController.getTicketRegistry().addTicket(code);
  final MockHttpServletRequest mockRequest=new MockHttpServletRequest("GET",CONTEXT + OAuthConstants.ACCESS_TOKEN_URL);
  mockRequest.setParameter(OAuthConstants.CLIENT_ID,CLIENT_ID);
  mockRequest.setParameter(OAuthConstants.REDIRECT_URI,REDIRECT_URI);
  mockRequest.setParameter(OAuthConstants.CLIENT_SECRET,CLIENT_SECRET);
  mockRequest.setParameter(OAuthConstants.CODE,code.getId());
  mockRequest.setParameter(OAuthConstants.GRANT_TYPE,OAuthGrantType.AUTHORIZATION_CODE.name().toLowerCase());
  servicesManager.save(getRegisteredService(REDIRECT_URI,CLIENT_SECRET));
  final MockHttpServletResponse mockResponse=new MockHttpServletResponse();
  requiresAuthenticationInterceptor.preHandle(mockRequest,mockResponse,null);
  oAuth20AccessTokenController.handleRequest(mockRequest,mockResponse);
  assertEquals(400,mockResponse.getStatus());
  assertEquals("error=" + OAuthConstants.INVALID_GRANT,mockResponse.getContentAsString());
}
