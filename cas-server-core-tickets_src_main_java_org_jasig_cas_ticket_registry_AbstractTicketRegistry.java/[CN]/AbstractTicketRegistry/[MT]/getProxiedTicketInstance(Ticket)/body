{
  if (ticket == null) {
    return null;
  }
  for (  final Pair<Class<? extends Ticket>,Constructor<? extends AbstractTicketDelegator>> ticketDelegator : ticketDelegators) {
    final Class<? extends Ticket> clazz=ticketDelegator.getFirst();
    if (clazz.isAssignableFrom(ticket.getClass())) {
      final Constructor<? extends AbstractTicketDelegator> constructor=ticketDelegator.getSecond();
      try {
        return constructor.newInstance(this,ticket,needsCallback());
      }
 catch (      final Exception e) {
        throw new RuntimeException(e);
      }
    }
  }
  throw new IllegalStateException("Cannot wrap ticket of type: " + ticket.getClass() + " with a ticket delegator");
}
