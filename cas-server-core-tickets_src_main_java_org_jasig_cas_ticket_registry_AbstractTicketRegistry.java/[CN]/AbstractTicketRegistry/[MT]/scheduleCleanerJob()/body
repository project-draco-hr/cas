{
  try {
    if (!this.cleanerEnabled) {
      logger.info("Ticket registry cleaner is disabled for {}. No cleaner processes will be scheduled.",getClass().getSimpleName());
      return;
    }
    if (!isCleanerSupported()) {
      logger.info("Ticket registry cleaner is not supported by {}. No cleaner processes will be scheduled.",getClass().getSimpleName());
      return;
    }
    logger.info("Preparing to schedule job to clean up after tickets...");
    final JobDetail job=JobBuilder.newJob(getClass()).withIdentity(getClass().getSimpleName().concat(UUID.randomUUID().toString())).build();
    final Trigger trigger=TriggerBuilder.newTrigger().withIdentity(getClass().getSimpleName().concat(UUID.randomUUID().toString())).startAt(DateTimeUtils.dateOf(ZonedDateTime.now(ZoneOffset.UTC).plusSeconds(this.startDelay))).withSchedule(SimpleScheduleBuilder.simpleSchedule().withIntervalInSeconds(this.refreshInterval).repeatForever()).build();
    logger.debug("Scheduling {} job",getClass().getSimpleName());
    scheduler.getContext().put(getClass().getSimpleName(),this);
    this.scheduler.scheduleJob(job,trigger);
    logger.info("{} will clean tickets every {} minutes",getClass().getSimpleName(),TimeUnit.SECONDS.toMinutes(this.refreshInterval));
  }
 catch (  final Exception e) {
    logger.warn(e.getMessage(),e);
  }
}
