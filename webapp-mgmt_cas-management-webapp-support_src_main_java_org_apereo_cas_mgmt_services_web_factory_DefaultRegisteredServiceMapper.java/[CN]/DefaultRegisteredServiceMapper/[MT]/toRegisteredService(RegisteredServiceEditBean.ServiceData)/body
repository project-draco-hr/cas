{
  try {
    final AbstractRegisteredService regSvc;
    final String type=data.getType();
    if (StringUtils.equalsIgnoreCase(type,RegisteredServiceTypeEditBean.OAUTH_CALLBACK_AUTHZ.toString())) {
      regSvc=new OAuthCallbackAuthorizeService();
    }
 else     if (StringUtils.equalsIgnoreCase(type,RegisteredServiceTypeEditBean.OAUTH.toString()) || StringUtils.equalsIgnoreCase(type,RegisteredServiceTypeEditBean.OIDC.toString())) {
      if (StringUtils.equalsIgnoreCase(type,RegisteredServiceTypeEditBean.OAUTH.toString())) {
        regSvc=new OAuthRegisteredService();
      }
 else {
        regSvc=new OidcRegisteredService();
      }
      final RegisteredServiceOAuthTypeEditBean oauthBean=data.getOauth();
      ((OAuthRegisteredService)regSvc).setClientId(oauthBean.getClientId());
      ((OAuthRegisteredService)regSvc).setClientSecret(oauthBean.getClientSecret());
      ((OAuthRegisteredService)regSvc).setBypassApprovalPrompt(oauthBean.isBypass());
      ((OAuthRegisteredService)regSvc).setGenerateRefreshToken(oauthBean.isRefreshToken());
      ((OAuthRegisteredService)regSvc).setJsonFormat(oauthBean.isJsonFormat());
      if (StringUtils.equalsIgnoreCase(type,RegisteredServiceTypeEditBean.OIDC.toString())) {
        ((OidcRegisteredService)regSvc).setJwks(data.getOidc().getJwks());
        ((OidcRegisteredService)regSvc).setSignIdToken(data.getOidc().isSignToken());
      }
    }
 else     if (StringUtils.equalsIgnoreCase(type,RegisteredServiceTypeEditBean.SAML.toString())) {
      regSvc=new SamlRegisteredService();
      final RegisteredServiceSamlTypeEditBean samlBean=data.getSaml();
      ((SamlRegisteredService)regSvc).setEncryptAssertions(samlBean.isEncAssert());
      ((SamlRegisteredService)regSvc).setSignAssertions(samlBean.isSignAssert());
      ((SamlRegisteredService)regSvc).setSignResponses(samlBean.isSignResp());
      ((SamlRegisteredService)regSvc).setMetadataLocation(samlBean.getMdLoc());
      ((SamlRegisteredService)regSvc).setMetadataSignatureLocation(samlBean.getMdSigLoc());
      ((SamlRegisteredService)regSvc).setMetadataMaxValidity(samlBean.getMdMaxVal());
      ((SamlRegisteredService)regSvc).setRequiredAuthenticationContextClass(samlBean.getAuthCtxCls());
    }
 else {
      if (RegexUtils.isValidRegex(data.getServiceId())) {
        regSvc=new RegexRegisteredService();
      }
 else {
        throw new RuntimeException("Invalid service type.");
      }
    }
    final long assignedId=Long.parseLong(data.getAssignedId());
    if (assignedId <= 0) {
      regSvc.setId(RegisteredService.INITIAL_IDENTIFIER_VALUE);
    }
 else {
      regSvc.setId(assignedId);
    }
    regSvc.setServiceId(data.getServiceId());
    regSvc.setName(data.getName());
    regSvc.setDescription(data.getDescription());
    if (StringUtils.isNotBlank(data.getLogoUrl())) {
      regSvc.setLogo(new URL(data.getLogoUrl()));
    }
    regSvc.setTheme(data.getTheme());
    regSvc.setEvaluationOrder(data.getEvalOrder());
    regSvc.setRequiredHandlers(data.getRequiredHandlers());
    regSvc.setLogoutType(parseLogoutType(data.getLogoutType()));
    if (StringUtils.isNotBlank(data.getLogoutUrl())) {
      regSvc.setLogoutUrl(new URL(data.getLogoutUrl()));
    }
    final RegisteredServicePublicKeyEditBean publicKey=data.getPublicKey();
    if (publicKey != null && publicKey.isValid()) {
      regSvc.setPublicKey(new RegisteredServicePublicKeyImpl(publicKey.getLocation(),publicKey.getAlgorithm()));
    }
    final Set<RegisteredServiceEditBean.ServiceData.PropertyBean> props=data.getProperties();
    for (    final RegisteredServiceEditBean.ServiceData.PropertyBean str : props) {
      final DefaultRegisteredServiceProperty value=new DefaultRegisteredServiceProperty();
      value.setValues(org.springframework.util.StringUtils.commaDelimitedListToSet(str.getValue()));
      regSvc.getProperties().put(str.getName(),value);
    }
    return regSvc;
  }
 catch (  final Exception e) {
    throw Throwables.propagate(e);
  }
}
