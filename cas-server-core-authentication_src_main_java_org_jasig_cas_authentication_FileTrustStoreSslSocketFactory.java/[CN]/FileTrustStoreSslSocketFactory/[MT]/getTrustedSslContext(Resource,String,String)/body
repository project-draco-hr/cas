{
  try {
    final KeyStore casTrustStore=KeyStore.getInstance(trustStoreType);
    final char[] trustStorePasswordCharArray=trustStorePassword.toCharArray();
    try (final InputStream casStream=trustStoreFile.getInputStream()){
      casTrustStore.load(casStream,trustStorePasswordCharArray);
    }
     final String defaultAlgorithm=KeyManagerFactory.getDefaultAlgorithm();
    final X509KeyManager customKeyManager=getKeyManager(ALG_NAME_PKIX,casTrustStore,trustStorePasswordCharArray);
    final X509KeyManager jvmKeyManager=getKeyManager(defaultAlgorithm,null,null);
    final X509TrustManager customTrustManager=getTrustManager(ALG_NAME_PKIX,casTrustStore);
    final X509TrustManager jvmTrustManager=getTrustManager(defaultAlgorithm,null);
    final KeyManager[] keyManagers={new CompositeX509KeyManager(Arrays.asList(jvmKeyManager,customKeyManager))};
    final TrustManager[] trustManagers={new CompositeX509TrustManager(Arrays.asList(jvmTrustManager,customTrustManager))};
    final SSLContext context=SSLContexts.custom().useSSL().build();
    context.init(keyManagers,trustManagers,null);
    return context;
  }
 catch (  final Exception e) {
    LOGGER.error(e.getMessage(),e);
    throw new RuntimeException(e);
  }
}
