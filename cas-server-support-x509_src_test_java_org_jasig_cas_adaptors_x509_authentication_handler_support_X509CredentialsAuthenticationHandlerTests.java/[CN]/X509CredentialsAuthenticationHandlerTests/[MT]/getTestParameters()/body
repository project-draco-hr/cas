{
  final Collection<Object[]> params=new ArrayList<>();
  X509CredentialsAuthenticationHandler handler;
  X509CertificateCredential credential;
  handler=new X509CredentialsAuthenticationHandler();
  handler.setTrustedIssuerDnPattern(".*");
  params.add(new Object[]{handler,new UsernamePasswordCredential(),false,null});
  handler=new X509CredentialsAuthenticationHandler();
  handler.setTrustedIssuerDnPattern(".*");
  credential=new X509CertificateCredential(createCertificates("user-valid.crt"));
  params.add(new Object[]{handler,credential,true,new DefaultHandlerResult(handler,credential,new DefaultPrincipalFactory().createPrincipal(credential.getId()))});
  handler=new X509CredentialsAuthenticationHandler();
  handler.setTrustedIssuerDnPattern(".*");
  params.add(new Object[]{handler,new X509CertificateCredential(createCertificates("user-expired.crt")),true,new CertificateExpiredException()});
  handler=new X509CredentialsAuthenticationHandler();
  handler.setTrustedIssuerDnPattern("CN=\\w+,OU=CAS,O=Jasig,L=Westminster,ST=Colorado,C=US");
  handler.setMaxPathLengthAllowUnspecified(true);
  params.add(new Object[]{handler,new X509CertificateCredential(createCertificates("snake-oil.crt")),true,new FailedLoginException()});
  handler=new X509CredentialsAuthenticationHandler();
  handler.setTrustedIssuerDnPattern(".*");
  handler.setSubjectDnPattern("CN=\\w+,OU=CAS,O=Jasig,L=Westminster,ST=Colorado,C=US");
  handler.setMaxPathLengthAllowUnspecified(true);
  params.add(new Object[]{handler,new X509CertificateCredential(createCertificates("snake-oil.crt")),true,new FailedLoginException()});
  handler=new X509CredentialsAuthenticationHandler();
  handler.setTrustedIssuerDnPattern(".*");
  handler.setCheckKeyUsage(true);
  credential=new X509CertificateCredential(createCertificates("user-valid.crt"));
  params.add(new Object[]{handler,credential,true,new DefaultHandlerResult(handler,credential,new DefaultPrincipalFactory().createPrincipal(credential.getId()))});
  handler=new X509CredentialsAuthenticationHandler();
  handler.setTrustedIssuerDnPattern(".*");
  handler.setCheckKeyUsage(true);
  handler.setRequireKeyUsage(true);
  params.add(new Object[]{handler,new X509CertificateCredential(createCertificates("user-valid.crt")),true,new FailedLoginException()});
  handler=new X509CredentialsAuthenticationHandler();
  handler.setTrustedIssuerDnPattern(".*");
  handler.setCheckKeyUsage(true);
  handler.setRequireKeyUsage(true);
  credential=new X509CertificateCredential(createCertificates("user-valid-keyUsage.crt"));
  params.add(new Object[]{handler,credential,true,new DefaultHandlerResult(handler,credential,new DefaultPrincipalFactory().createPrincipal(credential.getId()))});
  handler=new X509CredentialsAuthenticationHandler();
  handler.setTrustedIssuerDnPattern(".*");
  handler.setCheckKeyUsage(true);
  handler.setRequireKeyUsage(true);
  params.add(new Object[]{handler,new X509CertificateCredential(createCertificates("user-invalid-keyUsage.crt")),true,new FailedLoginException()});
  ResourceCRLRevocationChecker checker;
  handler=new X509CredentialsAuthenticationHandler();
  checker=new ResourceCRLRevocationChecker(new ClassPathResource("userCA-valid.crl"));
  checker.init();
  handler.setRevocationChecker(checker);
  handler.setTrustedIssuerDnPattern(".*");
  credential=new X509CertificateCredential(createCertificates("user-valid.crt"));
  params.add(new Object[]{handler,new X509CertificateCredential(createCertificates("user-valid.crt")),true,new DefaultHandlerResult(handler,credential,new DefaultPrincipalFactory().createPrincipal(credential.getId()))});
  handler=new X509CredentialsAuthenticationHandler();
  checker=new ResourceCRLRevocationChecker(new ClassPathResource("userCA-valid.crl"));
  checker.init();
  handler.setRevocationChecker(checker);
  handler.setTrustedIssuerDnPattern(".*");
  params.add(new Object[]{handler,new X509CertificateCredential(createCertificates("user-revoked.crt")),true,new RevokedCertificateException(ZonedDateTime.now(ZoneOffset.UTC),null)});
  final ThresholdExpiredCRLRevocationPolicy zeroThresholdPolicy=new ThresholdExpiredCRLRevocationPolicy();
  zeroThresholdPolicy.setThreshold(0);
  handler=new X509CredentialsAuthenticationHandler();
  handler.setTrustedIssuerDnPattern(".*");
  checker=new ResourceCRLRevocationChecker(new ClassPathResource("userCA-expired.crl"));
  checker.setExpiredCRLPolicy(zeroThresholdPolicy);
  checker.init();
  handler.setRevocationChecker(checker);
  params.add(new Object[]{handler,new X509CertificateCredential(createCertificates("user-valid.crt")),true,new ExpiredCRLException(null,ZonedDateTime.now(ZoneOffset.UTC))});
  return params;
}
