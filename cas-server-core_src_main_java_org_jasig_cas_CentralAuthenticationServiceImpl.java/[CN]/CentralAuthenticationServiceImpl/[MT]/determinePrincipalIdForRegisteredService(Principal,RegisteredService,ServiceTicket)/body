{
  String principalId=null;
  final String serviceUsernameAttribute=registeredService.getUsernameAttribute();
  if (registeredService.isAnonymousAccess()) {
    principalId=this.persistentIdGenerator.generate(principal,serviceTicket.getService());
  }
 else   if (StringUtils.isBlank(serviceUsernameAttribute)) {
    principalId=principal.getId();
  }
 else {
    if ((registeredService.isIgnoreAttributes() || registeredService.getAllowedAttributes().contains(serviceUsernameAttribute)) && principal.getAttributes().containsKey(serviceUsernameAttribute)) {
      principalId=principal.getAttributes().get(registeredService.getUsernameAttribute()).toString();
    }
 else {
      principalId=principal.getId();
      final Object[] errorLogParameters=new Object[]{principalId,registeredService.getUsernameAttribute(),principal.getAttributes(),registeredService.getServiceId(),principalId};
      log.warn("Principal [{}] did not have attribute [{}] among attributes [{}] so CAS cannot " + "provide on the validation response the user attribute the registered service [{}] expects. " + "CAS will instead return the default username attribute [{}]",errorLogParameters);
    }
  }
  return principalId;
}
