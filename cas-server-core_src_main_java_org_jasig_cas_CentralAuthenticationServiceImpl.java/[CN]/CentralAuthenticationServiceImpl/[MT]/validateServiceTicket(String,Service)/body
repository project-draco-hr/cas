{
  final RegisteredService registeredService=this.servicesManager.findServiceBy(service);
  RegisteredServiceAccessStrategySupport.ensureServiceAccessIsAllowed(service,registeredService);
  final ServiceTicket serviceTicket=this.ticketRegistry.getTicket(serviceTicketId,ServiceTicket.class);
  if (serviceTicket == null) {
    logger.info("Service ticket [{}] does not exist.",serviceTicketId);
    throw new InvalidTicketException(serviceTicketId);
  }
  try {
synchronized (serviceTicket) {
      if (serviceTicket.isExpired()) {
        logger.info("ServiceTicket [{}] has expired.",serviceTicketId);
        throw new InvalidTicketException(serviceTicketId);
      }
      if (!serviceTicket.isValidFor(service)) {
        logger.error("Service ticket [{}] with service [{}] does not match supplied service [{}]",serviceTicketId,serviceTicket.getService().getId(),service);
        throw new UnrecognizableServiceForServiceTicketValidationException(serviceTicket.getService());
      }
    }
    final TicketGrantingTicket root=serviceTicket.getGrantingTicket().getRoot();
    final Authentication authentication=getAuthenticationSatisfiedByPolicy(root,new ServiceContext(serviceTicket.getService(),registeredService));
    final Principal principal=authentication.getPrincipal();
    final RegisteredServiceAttributeReleasePolicy attributePolicy=registeredService.getAttributeReleasePolicy();
    logger.debug("Attribute policy [{}] is associated with service [{}]",attributePolicy,registeredService);
    @SuppressWarnings("unchecked") final Map<String,Object> attributesToRelease=attributePolicy != null ? attributePolicy.getAttributes(principal) : Collections.EMPTY_MAP;
    final String principalId=registeredService.getUsernameAttributeProvider().resolveUsername(principal,service);
    final Principal modifiedPrincipal=this.principalFactory.createPrincipal(principalId,attributesToRelease);
    final AuthenticationBuilder builder=DefaultAuthenticationBuilder.newInstance(authentication);
    builder.setPrincipal(modifiedPrincipal);
    final Assertion assertion=new ImmutableAssertion(builder.build(),serviceTicket.getGrantingTicket().getChainedAuthentications(),serviceTicket.getService(),serviceTicket.isFromNewLogin());
    doPublishEvent(new CasServiceTicketValidatedEvent(this,serviceTicket,assertion));
    return assertion;
  }
  finally {
    if (serviceTicket.isExpired()) {
      this.ticketRegistry.deleteTicket(serviceTicketId);
    }
  }
}
