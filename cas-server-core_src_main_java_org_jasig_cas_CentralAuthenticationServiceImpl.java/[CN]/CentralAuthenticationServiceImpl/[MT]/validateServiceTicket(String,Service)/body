{
  Assert.notNull(serviceTicketId,"serviceTicketId cannot be null");
  Assert.notNull(service,"service cannot be null");
  final ServiceTicket serviceTicket=(ServiceTicket)this.serviceTicketRegistry.getTicket(serviceTicketId,ServiceTicket.class);
  final RegisteredService registeredService=this.servicesManager.findServiceBy(service);
  if (registeredService == null || !registeredService.isEnabled()) {
    log.warn("ServiceManagement: Service [{}] does not exist or is not enabled, and thus not allowed to validate tickets.",service.getId());
    throw new UnauthorizedServiceException("Service not allowed to validate tickets.");
  }
  if (serviceTicket == null) {
    log.info("ServiceTicket [{}] does not exist.",serviceTicketId);
    throw new InvalidTicketException();
  }
  try {
synchronized (serviceTicket) {
      if (serviceTicket.isExpired()) {
        log.info("ServiceTicket [" + serviceTicketId + "] has expired.");
        throw new InvalidTicketException();
      }
      if (!serviceTicket.isValidFor(service)) {
        log.error("ServiceTicket [{}] with service [{}] does not match supplied service [{}]",serviceTicketId,serviceTicket.getService().getId(),service);
        throw new TicketValidationException(serviceTicket.getService());
      }
    }
    final List<Authentication> chainedAuthenticationsList=serviceTicket.getGrantingTicket().getChainedAuthentications();
    final Authentication authentication=chainedAuthenticationsList.get(chainedAuthenticationsList.size() - 1);
    final Principal principal=authentication.getPrincipal();
    Map<String,Object> attributesToRelease=this.defaultAttributeFilter.filter(principal.getId(),principal.getAttributes(),registeredService);
    if (registeredService.getAttributeFilter() != null) {
      attributesToRelease=registeredService.getAttributeFilter().filter(principal.getId(),attributesToRelease,registeredService);
    }
    final String principalId=determinePrincipalIdForRegisteredService(principal,registeredService,serviceTicket);
    final Principal modifiedPrincipal=new SimplePrincipal(principalId,attributesToRelease);
    final Authentication authToUse=new MutableAuthentication(modifiedPrincipal,authentication.getAuthenticatedDate(),authentication.getAttributes());
    final List<Authentication> authentications=new ArrayList<Authentication>();
    for (int i=0; i < chainedAuthenticationsList.size() - 1; i++) {
      authentications.add(serviceTicket.getGrantingTicket().getChainedAuthentications().get(i));
    }
    authentications.add(authToUse);
    return new ImmutableAssertionImpl(authentications,serviceTicket.getService(),serviceTicket.isFromNewLogin());
  }
  finally {
    if (serviceTicket.isExpired()) {
      this.serviceTicketRegistry.deleteTicket(serviceTicketId);
    }
  }
}
