{
  final TicketGrantingTicket ticketGrantingTicket=getTicket(ticketGrantingTicketId,TicketGrantingTicket.class);
  final RegisteredService registeredService=this.servicesManager.findServiceBy(service);
  RegisteredServiceAccessStrategySupport.ensurePrincipalAccessIsAllowedForService(service,registeredService,ticketGrantingTicket);
  final Authentication currentAuthentication=evaluatePossibilityOfMixedPrincipals(authenticationResult,ticketGrantingTicket);
  RegisteredServiceAccessStrategySupport.ensureServiceSsoAccessIsAllowed(registeredService,service,currentAuthentication);
  evaluateProxiedServiceIfNeeded(service,ticketGrantingTicket,registeredService);
  getAuthenticationSatisfiedByPolicy(ticketGrantingTicket,new ServiceContext(service,registeredService));
  final List<Authentication> authentications=ticketGrantingTicket.getChainedAuthentications();
  final Principal principal=authentications.get(authentications.size() - 1).getPrincipal();
  final ServiceTicketFactory factory=this.ticketFactory.get(ServiceTicket.class);
  final ServiceTicket serviceTicket=factory.create(ticketGrantingTicket,service,currentAuthentication != null);
  this.ticketRegistry.addTicket(serviceTicket);
  logger.info("Granted ticket [{}] for service [{}] and principal [{}]",serviceTicket.getId(),service.getId(),principal.getId());
  doPublishEvent(new CasServiceTicketGrantedEvent(this,ticketGrantingTicket,serviceTicket));
  return serviceTicket;
}
