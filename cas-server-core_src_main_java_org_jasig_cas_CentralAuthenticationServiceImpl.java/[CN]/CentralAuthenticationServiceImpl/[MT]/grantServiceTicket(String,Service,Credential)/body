{
  final TicketGrantingTicket ticketGrantingTicket=getTicket(ticketGrantingTicketId,TicketGrantingTicket.class);
  final RegisteredService registeredService=this.servicesManager.findServiceBy(service);
  verifyRegisteredServiceProperties(registeredService,service);
  final Set<Credential> sanitizedCredentials=sanitizeCredentials(credentials);
  Authentication currentAuthentication=null;
  if (!sanitizedCredentials.isEmpty()) {
    currentAuthentication=this.authenticationManager.authenticate(sanitizedCredentials.toArray(new Credential[]{}));
    final Authentication original=ticketGrantingTicket.getAuthentication();
    if (!currentAuthentication.getPrincipal().equals(original.getPrincipal())) {
      throw new MixedPrincipalException(currentAuthentication,currentAuthentication.getPrincipal(),original.getPrincipal());
    }
    ticketGrantingTicket.getSupplementalAuthentications().add(currentAuthentication);
  }
  if (currentAuthentication == null && !registeredService.getAccessStrategy().isServiceAccessAllowedForSso()) {
    logger.warn("Service [{}] is not allowed to use SSO.",service.getId());
    throw new UnauthorizedSsoServiceException();
  }
  evaluateProxiedServiceIfNeeded(service,ticketGrantingTicket,registeredService);
  getAuthenticationSatisfiedByPolicy(ticketGrantingTicket,new ServiceContext(service,registeredService));
  final List<Authentication> authentications=ticketGrantingTicket.getChainedAuthentications();
  final Principal principal=authentications.get(authentications.size() - 1).getPrincipal();
  final RegisteredServiceAttributeReleasePolicy releasePolicy=registeredService.getAttributeReleasePolicy();
  final Map<String,Object> principalAttrs;
  if (releasePolicy != null) {
    principalAttrs=releasePolicy.getAttributes(principal);
  }
 else {
    principalAttrs=new HashMap<>();
  }
  if (!registeredService.getAccessStrategy().doPrincipalAttributesAllowServiceAccess(principal.getId(),principalAttrs)) {
    logger.warn("Cannot grant service ticket because Service [{}] is not authorized for use by [{}].",service.getId(),principal);
    throw new UnauthorizedServiceForPrincipalException();
  }
  final ServiceTicketFactory factory=this.ticketFactory.get(ServiceTicket.class);
  final ServiceTicket serviceTicket=factory.create(ticketGrantingTicket,service,currentAuthentication != null);
  this.ticketRegistry.addTicket(serviceTicket);
  logger.info("Granted ticket [{}] for service [{}] for user [{}]",serviceTicket.getId(),service.getId(),principal.getId());
  doPublishEvent(new CasServiceTicketGrantedEvent(this,ticketGrantingTicket,serviceTicket));
  return serviceTicket;
}
