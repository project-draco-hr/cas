{
  final TicketGrantingTicket ticketGrantingTicket=getTicket(ticketGrantingTicketId,TicketGrantingTicket.class);
  final RegisteredService registeredService=this.servicesManager.findServiceBy(service);
  verifyRegisteredServiceProperties(registeredService,service);
  final Set<Credential> sanitizedCredentials=sanitizeCredentials(credentials);
  Authentication currentAuthentication=null;
  if (sanitizedCredentials.size() > 0) {
    currentAuthentication=this.authenticationManager.authenticate(sanitizedCredentials.toArray(new Credential[]{}));
    final Authentication original=ticketGrantingTicket.getAuthentication();
    if (!currentAuthentication.getPrincipal().equals(original.getPrincipal())) {
      throw new MixedPrincipalException(currentAuthentication,currentAuthentication.getPrincipal(),original.getPrincipal());
    }
    ticketGrantingTicket.getSupplementalAuthentications().add(currentAuthentication);
  }
  if (!registeredService.isSsoEnabled() && currentAuthentication == null) {
    logger.warn("ServiceManagement: Service [{}] is not allowed to use SSO.",service.getId());
    throw new UnauthorizedSsoServiceException();
  }
  final List<Authentication> authns=ticketGrantingTicket.getChainedAuthentications();
  if (authns.size() > 1) {
    if (!registeredService.getProxyPolicy().isAllowedToProxy()) {
      final String message=String.format("ServiceManagement: Proxy attempt by service [%s] (registered service [%s]) is not allowed.",service.getId(),registeredService.toString());
      logger.warn(message);
      throw new UnauthorizedProxyingException(message);
    }
  }
  getAuthenticationSatisfiedByPolicy(ticketGrantingTicket,new ServiceContext(service,registeredService));
  final String uniqueTicketIdGenKey=service.getClass().getName();
  logger.debug("Looking up service ticket id generator for [{}]",uniqueTicketIdGenKey);
  UniqueTicketIdGenerator serviceTicketUniqueTicketIdGenerator=this.uniqueTicketIdGeneratorsForService.get(uniqueTicketIdGenKey);
  if (serviceTicketUniqueTicketIdGenerator == null) {
    serviceTicketUniqueTicketIdGenerator=this.defaultServiceTicketIdGenerator;
    logger.debug("Service ticket id generator not found for [{}]. Using the default generator...",uniqueTicketIdGenKey);
  }
  final List<Authentication> authentications=ticketGrantingTicket.getChainedAuthentications();
  final String ticketPrefix=authentications.size() == 1 ? ServiceTicket.PREFIX : ServiceTicket.PROXY_TICKET_PREFIX;
  final String ticketId=serviceTicketUniqueTicketIdGenerator.getNewTicketId(ticketPrefix);
  final ServiceTicket serviceTicket=ticketGrantingTicket.grantServiceTicket(ticketId,service,this.serviceTicketExpirationPolicy,currentAuthentication != null);
  this.serviceTicketRegistry.addTicket(serviceTicket);
  final String principalId=authentications.get(authentications.size() - 1).getPrincipal().getId();
  logger.info("Granted ticket [{}] for service [{}] for user [{}]",serviceTicket.getId(),service.getId(),principalId);
  return serviceTicket;
}
