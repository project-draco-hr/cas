{
  Assert.notNull(serviceTicketId,"serviceTicketId cannot be null");
  Assert.notNull(credentials,"credentials cannot be null");
  final ServiceTicket serviceTicket=this.serviceTicketRegistry.getTicket(serviceTicketId,ServiceTicket.class);
  if (serviceTicket == null || serviceTicket.isExpired()) {
    log.debug("ServiceTicket [{}] has expired or cannot be found in the ticket registry",serviceTicketId);
    throw new InvalidTicketException(serviceTicketId);
  }
  final RegisteredService registeredService=this.servicesManager.findServiceBy(serviceTicket.getService());
  if (registeredService == null || !registeredService.isEnabled() || !registeredService.isAllowedToProxy()) {
    log.warn("ServiceManagement: Service [{}] attempted to proxy, but is not allowed.",serviceTicket.getService().getId());
    throw new UnauthorizedProxyingException();
  }
  final Authentication authentication=this.authenticationManager.authenticate(credentials);
  final ContextualAuthenticationPolicy<ServiceContext> policy=serviceContextAuthenticationPolicyFactory.createPolicy(new ServiceContext(serviceTicket.getService(),registeredService));
  if (!policy.isSatisfiedBy(authentication)) {
    throw new UnsatisfiedAuthenticationPolicyException(policy);
  }
  final TicketGrantingTicket ticketGrantingTicket=serviceTicket.grantTicketGrantingTicket(this.ticketGrantingTicketUniqueTicketIdGenerator.getNewTicketId(TicketGrantingTicket.PREFIX),authentication,this.ticketGrantingTicketExpirationPolicy);
  this.ticketRegistry.addTicket(ticketGrantingTicket);
  return ticketGrantingTicket.getId();
}
