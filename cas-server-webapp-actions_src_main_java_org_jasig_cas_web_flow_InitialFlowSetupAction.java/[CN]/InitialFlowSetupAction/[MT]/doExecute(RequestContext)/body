{
  final HttpServletRequest request=WebUtils.getHttpServletRequest(context);
  final String contextPath=context.getExternalContext().getContextPath();
  final String cookiePath=StringUtils.isNotBlank(contextPath) ? contextPath + '/' : "/";
  if (StringUtils.isBlank(this.warnCookieGenerator.getCookiePath())) {
    logger.info("Setting path for cookies for warn cookie generator to: {} ",cookiePath);
    this.warnCookieGenerator.setCookiePath(cookiePath);
  }
 else {
    logger.debug("Warning cookie path is set to {} and path {}",this.warnCookieGenerator.getCookieDomain(),this.warnCookieGenerator.getCookiePath());
  }
  if (StringUtils.isBlank(this.ticketGrantingTicketCookieGenerator.getCookiePath())) {
    logger.info("Setting path for cookies for TGC cookie generator to: {} ",cookiePath);
    this.ticketGrantingTicketCookieGenerator.setCookiePath(cookiePath);
  }
 else {
    logger.debug("TGC cookie path is set to {} and path {}",this.ticketGrantingTicketCookieGenerator.getCookieDomain(),this.ticketGrantingTicketCookieGenerator.getCookiePath());
  }
  WebUtils.putTicketGrantingTicketInScopes(context,this.ticketGrantingTicketCookieGenerator.retrieveCookieValue(request));
  WebUtils.putWarningCookie(context,Boolean.valueOf(this.warnCookieGenerator.retrieveCookieValue(request)));
  WebUtils.putGeoLocationTrackingIntoFlowScope(context,this.trackGeoLocation);
  WebUtils.putGoogleAnalyticsTrackingIdIntoFlowScope(context,this.googleAnalyticsTrackingId);
  final Service service=WebUtils.getService(this.argumentExtractors,context);
  if (service != null) {
    logger.debug("Placing service in context scope: [{}]",service.getId());
    final RegisteredService registeredService=this.servicesManager.findServiceBy(service);
    if (registeredService != null && registeredService.getAccessStrategy().isServiceAccessAllowed()) {
      logger.debug("Placing registered service [{}] with id [{}] in context scope",registeredService.getServiceId(),registeredService.getId());
      WebUtils.putRegisteredService(context,registeredService);
      final RegisteredServiceAccessStrategy accessStrategy=registeredService.getAccessStrategy();
      if (accessStrategy.getUnauthorizedRedirectUrl() != null) {
        logger.debug("Placing registered service's unauthorized redirect url [{}] with id [{}] in context scope",accessStrategy.getUnauthorizedRedirectUrl(),registeredService.getServiceId());
        WebUtils.putUnauthorizedRedirectUrl(context,accessStrategy.getUnauthorizedRedirectUrl());
      }
    }
  }
 else   if (!this.enableFlowOnAbsentServiceRequest) {
    logger.warn("No service authentication request is available at [{}]. CAS is configured to disable the flow.",WebUtils.getHttpServletRequest(context).getRequestURL());
    throw new NoSuchFlowExecutionException(context.getFlowExecutionContext().getKey(),new UnauthorizedServiceException("screen.service.required.message","Service is required"));
  }
  WebUtils.putService(context,service);
  return result("success");
}
