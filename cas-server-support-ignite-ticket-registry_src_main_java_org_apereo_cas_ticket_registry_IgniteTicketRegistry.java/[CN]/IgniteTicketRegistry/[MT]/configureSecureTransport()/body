{
  final String nullKey="NULL";
  if (StringUtils.isNotBlank(casProperties.getTicket().getRegistry().getIgnite().getKeyStoreFilePath()) && StringUtils.isNotBlank(casProperties.getTicket().getRegistry().getIgnite().getKeyStorePassword()) && StringUtils.isNotBlank(casProperties.getTicket().getRegistry().getIgnite().getTrustStoreFilePath())&& StringUtils.isNotBlank(casProperties.getTicket().getRegistry().getIgnite().getTrustStorePassword())) {
    final SslContextFactory sslContextFactory=new SslContextFactory();
    sslContextFactory.setKeyStoreFilePath(casProperties.getTicket().getRegistry().getIgnite().getKeyStoreFilePath());
    sslContextFactory.setKeyStorePassword(casProperties.getTicket().getRegistry().getIgnite().getKeyStorePassword().toCharArray());
    if (nullKey.equals(casProperties.getTicket().getRegistry().getIgnite().getTrustStoreFilePath()) && nullKey.equals(casProperties.getTicket().getRegistry().getIgnite().getTrustStorePassword())) {
      sslContextFactory.setTrustManagers(SslContextFactory.getDisabledTrustManager());
    }
 else {
      sslContextFactory.setTrustStoreFilePath(casProperties.getTicket().getRegistry().getIgnite().getTrustStoreFilePath());
      sslContextFactory.setTrustStorePassword(casProperties.getTicket().getRegistry().getIgnite().getKeyStorePassword().toCharArray());
    }
    if (StringUtils.isNotBlank(casProperties.getTicket().getRegistry().getIgnite().getKeyAlgorithm())) {
      sslContextFactory.setKeyAlgorithm(casProperties.getTicket().getRegistry().getIgnite().getKeyAlgorithm());
    }
    if (StringUtils.isNotBlank(casProperties.getTicket().getRegistry().getIgnite().getProtocol())) {
      sslContextFactory.setProtocol(casProperties.getTicket().getRegistry().getIgnite().getProtocol());
    }
    if (StringUtils.isNotBlank(casProperties.getTicket().getRegistry().getIgnite().getTrustStoreType())) {
      sslContextFactory.setTrustStoreType(casProperties.getTicket().getRegistry().getIgnite().getTrustStoreType());
    }
    if (StringUtils.isNotBlank(casProperties.getTicket().getRegistry().getIgnite().getKeyStoreType())) {
      sslContextFactory.setKeyStoreType(casProperties.getTicket().getRegistry().getIgnite().getKeyStoreType());
    }
    this.igniteConfiguration.setSslContextFactory(sslContextFactory);
  }
}
