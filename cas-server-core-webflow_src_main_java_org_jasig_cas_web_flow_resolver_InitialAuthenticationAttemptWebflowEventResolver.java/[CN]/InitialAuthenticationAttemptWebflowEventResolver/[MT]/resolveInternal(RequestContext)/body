{
  try {
    final Credential credential=getCredentialFromContext(context);
    final AuthenticationResultBuilder builder=this.authenticationSystemSupport.handleInitialAuthenticationTransaction(credential);
    WebUtils.putAuthenticationResultBuilder(builder,context);
    WebUtils.putAuthentication(builder.getInitialAuthentication(),context);
    final Service service=WebUtils.getService(context);
    if (service != null) {
      logger.debug("Locating service {} in service registry to determine authentication policy",service);
      final RegisteredService registeredService=this.servicesManager.findServiceBy(service);
      RegisteredServiceAccessStrategySupport.ensureServiceAccessIsAllowed(service,registeredService);
      final Set<Event> resolvedEvents=resolveCandidateAuthenticationEvents(context,service,registeredService);
      if (!resolvedEvents.isEmpty()) {
        putResolvedEventsAsAttribute(context,resolvedEvents);
        final Event finalResolvedEvent=selectiveAuthenticationProviderWebflowEventResolver.resolveSingle(context);
        if (finalResolvedEvent != null) {
          return ImmutableSet.of(finalResolvedEvent);
        }
      }
    }
    return ImmutableSet.of(grantTicketGrantingTicketToAuthenticationResult(context,builder,service));
  }
 catch (  final Exception e) {
    Event event=returnAuthenticationExceptionEventIfNeeded(e);
    if (event == null) {
      logger.debug(e.getMessage(),e);
      event=newEvent(CasWebflowConstants.TRANSITION_ID_ERROR,e);
    }
    return ImmutableSet.of(event);
  }
}
