{
  final String authoritativeLoginTicket=WebUtils.getLoginTicketFromFlowScope(context);
  final String providedLoginTicket=WebUtils.getLoginTicketFromRequest(context);
  if (!authoritativeLoginTicket.equals(providedLoginTicket)) {
    log.warn("Invalid login ticket {}",providedLoginTicket);
    final String code="INVALID_TICKET";
    messageContext.addMessage(new MessageBuilder().error().code(code).arg(providedLoginTicket).defaultText(code).build());
    return "error";
  }
  final String ticketGrantingTicketId=WebUtils.getTicketGrantingTicketId(context);
  final Service service=WebUtils.getService(context);
  if (StringUtils.hasText(context.getRequestParameters().get("renew")) && ticketGrantingTicketId != null && service != null) {
    try {
      final String serviceTicketId=this.centralAuthenticationService.grantServiceTicket(ticketGrantingTicketId,service,credentials);
      WebUtils.putServiceTicketInRequestScope(context,serviceTicketId);
      putWarnCookieIfRequestParameterPresent(context);
      return "warn";
    }
 catch (    final TicketException e) {
      if (isCauseAuthenticationException(e)) {
        populateErrorsInstance(e,messageContext);
        return getAuthenticationExceptionEventId(e);
      }
      this.centralAuthenticationService.destroyTicketGrantingTicket(ticketGrantingTicketId);
      log.debug("Attempted to generate a ServiceTicket using renew=true with different credentials",e);
    }
  }
  try {
    WebUtils.putTicketGrantingTicketInRequestScope(context,this.centralAuthenticationService.createTicketGrantingTicket(credentials));
    putWarnCookieIfRequestParameterPresent(context);
    return "success";
  }
 catch (  final TicketException e) {
    populateErrorsInstance(e,messageContext);
    if (isCauseAuthenticationException(e)) {
      return getAuthenticationExceptionEventId(e);
    }
    return "error";
  }
}
