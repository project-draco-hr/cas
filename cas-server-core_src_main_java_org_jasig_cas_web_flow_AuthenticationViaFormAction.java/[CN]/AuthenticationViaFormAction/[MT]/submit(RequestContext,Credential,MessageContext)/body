{
  final String authoritativeLoginTicket=WebUtils.getLoginTicketFromFlowScope(context);
  final String providedLoginTicket=WebUtils.getLoginTicketFromRequest(context);
  if (!authoritativeLoginTicket.equals(providedLoginTicket)) {
    log.warn("Invalid login ticket {}",providedLoginTicket);
    messageContext.addMessage(new MessageBuilder().code("error.invalid.loginticket").build());
    return newEvent(ERROR);
  }
  final String ticketGrantingTicketId=WebUtils.getTicketGrantingTicketId(context);
  final Service service=WebUtils.getService(context);
  if (StringUtils.hasText(context.getRequestParameters().get("renew")) && ticketGrantingTicketId != null && service != null) {
    try {
      final String serviceTicketId=this.centralAuthenticationService.grantServiceTicket(ticketGrantingTicketId,service,credential);
      WebUtils.putServiceTicketInRequestScope(context,serviceTicketId);
      putWarnCookieIfRequestParameterPresent(context);
      return newEvent(WARN);
    }
 catch (    final AuthenticationException e) {
      return newEvent(AUTHENTICATION_FAILURE,e);
    }
catch (    final TicketCreationException e) {
      log.warn("Invalid attempt to access service using renew=true with different credential. Ending SSO session.");
      this.centralAuthenticationService.destroyTicketGrantingTicket(ticketGrantingTicketId);
    }
catch (    final TicketException e) {
      return newEvent(ERROR,e);
    }
  }
  try {
    WebUtils.putTicketGrantingTicketInRequestScope(context,this.centralAuthenticationService.createTicketGrantingTicket(credential));
    putWarnCookieIfRequestParameterPresent(context);
    return newEvent(SUCCESS);
  }
 catch (  final AuthenticationException e) {
    return newEvent(AUTHENTICATION_FAILURE,e);
  }
catch (  final Exception e) {
    return newEvent(ERROR,e);
  }
}
