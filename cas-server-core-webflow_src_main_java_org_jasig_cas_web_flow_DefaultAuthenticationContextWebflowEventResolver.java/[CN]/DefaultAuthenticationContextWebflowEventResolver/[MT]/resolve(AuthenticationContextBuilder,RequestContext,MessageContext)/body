{
  final Service service=WebUtils.getService(context);
  final AuthenticationContext authenticationContext=authenticationContextBuilder.build(service);
  if (authenticationContext.getService() != null) {
    final RegisteredService registeredService=this.servicesManager.findServiceBy(authenticationContext.getService());
    if (registeredService == null || !registeredService.getAccessStrategy().isServiceAccessAllowed()) {
      throw new UnauthorizedServiceException(UnauthorizedServiceException.CODE_UNAUTHZ_SERVICE,"Service access is disallowed");
    }
    if (StringUtils.isNotBlank(registeredService.getAuthenticationPolicy().getAuthenticationMethod())) {
      return buildEventByServiceAuthenticationMethod(context,registeredService,authenticationContextBuilder,authenticationContext);
    }
  }
  final TicketGrantingTicket tgt=this.centralAuthenticationService.createTicketGrantingTicket(authenticationContext);
  WebUtils.putTicketGrantingTicketInScopes(context,tgt);
  if (addWarningMessagesToMessageContextIfNeeded(tgt,messageContext)) {
    return newEvent(SUCCESS_WITH_WARNINGS);
  }
  return newEvent(AbstractCasWebflowConfigurer.TRANSITION_ID_SUCCESS);
}
