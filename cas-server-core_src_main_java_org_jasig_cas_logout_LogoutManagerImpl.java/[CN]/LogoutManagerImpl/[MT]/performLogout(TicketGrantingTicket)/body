{
  final Collection<Pair<String,Service>> services;
synchronized (ticket) {
    services=ticket.getServices();
    ticket.removeAllServices();
  }
  ticket.markTicketExpired();
  final List<Pair<String,Service>> frontServices=new ArrayList<Pair<String,Service>>();
  if (!disableSingleSignOut) {
    for (    final Pair<String,Service> ticketedService : services) {
      final String ticketId=ticketedService.getFirst();
      final Service service=ticketedService.getSecond();
      if (service instanceof SingleLogoutService) {
        final SingleLogoutService singleLogoutService=(SingleLogoutService)service;
        if (!singleLogoutService.isLoggedOutAlready()) {
          final RegisteredService registeredService=servicesManager.findServiceBy(service);
          if (registeredService != null && registeredService.getLogoutType() == LogoutType.FRONT_CHANNEL) {
            frontServices.add(ticketedService);
          }
 else {
            if (!performBackChannelLogout(singleLogoutService,ticketId)) {
              log.warn("Logout message not sent to [[]]; Continuing processing...",singleLogoutService.getId());
            }
          }
        }
      }
    }
  }
  return frontServices.iterator();
}
