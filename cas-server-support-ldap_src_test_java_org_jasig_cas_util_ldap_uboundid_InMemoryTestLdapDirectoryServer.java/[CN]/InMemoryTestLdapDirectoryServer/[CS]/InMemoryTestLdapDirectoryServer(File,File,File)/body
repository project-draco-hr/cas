{
  try {
    final Properties p=new Properties();
    p.load(new FileInputStream(properties));
    final InMemoryDirectoryServerConfig config=new InMemoryDirectoryServerConfig(p.getProperty("ldap.rootDn"));
    config.addAdditionalBindCredentials(p.getProperty("ldap.managerDn"),p.getProperty("ldap.managerPassword"));
    final String serverKeyStorePath=new File(System.getProperty("java.home"),"lib/security/cacerts").getCanonicalPath();
    final SSLUtil serverSSLUtil=new SSLUtil(new KeyStoreKeyManager(serverKeyStorePath,"changeit".toCharArray()),new TrustStoreTrustManager(serverKeyStorePath));
    final SSLUtil clientSSLUtil=new SSLUtil(new TrustStoreTrustManager(serverKeyStorePath));
    config.setListenerConfigs(InMemoryListenerConfig.createLDAPConfig("LDAP",null,389,serverSSLUtil.createSSLSocketFactory()),InMemoryListenerConfig.createLDAPSConfig("LDAPS",null,636,serverSSLUtil.createSSLServerSocketFactory(),clientSSLUtil.createSSLSocketFactory()));
    config.setEnforceSingleStructuralObjectClass(false);
    config.setEnforceAttributeSyntaxCompliance(false);
    final Schema s=Schema.mergeSchemas(Schema.getSchema(schemaFile));
    config.setSchema(null);
    this.directoryServer=new InMemoryDirectoryServer(config);
    LOGGER.debug("Populating directory with {}",ldifFile);
    this.directoryServer.importFromLDIF(true,ldifFile.getCanonicalPath());
    this.directoryServer.startListening();
    final LDAPConnection c=getConnection();
    LOGGER.debug("Connected to {}:{}",c.getConnectedAddress(),c.getConnectedPort());
    populateEntries();
  }
 catch (  final Exception e) {
    throw new RuntimeException(e);
  }
}
