{
  final Credential credential=mock(Credential.class);
  when(credential.getId()).thenReturn("input");
  final PrincipalResolver resolver1=mock(PrincipalResolver.class);
  when(resolver1.supports(eq(credential))).thenReturn(true);
  when(resolver1.resolve((eq(credential)))).thenReturn(new SimplePrincipal("output"));
  final PrincipalResolver resolver2=mock(PrincipalResolver.class);
  when(resolver2.supports(any(Credential.class))).thenReturn(false);
  when(resolver2.resolve(argThat(new ArgumentMatcher<Credential>(){
    @Override public boolean matches(    final Object o){
      return ((Credential)o).getId().equals("output");
    }
  }
))).thenReturn(new SimplePrincipal("final",Collections.<String,Object>singletonMap("mail","final@example.com")));
  final ChainingPrincipalResolver resolver=new ChainingPrincipalResolver();
  resolver.setChain(Arrays.asList(resolver1,resolver2));
  final Principal principal=resolver.resolve(credential);
  assertEquals("final",principal.getId());
  assertEquals("final@example.com",principal.getAttributes().get("mail"));
}
