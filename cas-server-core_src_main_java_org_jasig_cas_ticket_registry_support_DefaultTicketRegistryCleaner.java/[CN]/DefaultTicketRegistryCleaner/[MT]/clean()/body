{
  log.info("Beginning ticket cleanup.");
  log.debug("Attempting to acquire ticket cleanup lock.");
  if (!this.lock.acquire()) {
    log.info("Could not obtain lock.  Aborting cleanup.");
    return;
  }
  log.debug("Acquired lock.  Proceeding with cleanup.");
  try {
    final List<Ticket> ticketsToRemove=new ArrayList<Ticket>();
    final Collection<Ticket> ticketsInCache;
    ticketsInCache=this.ticketRegistry.getTickets();
    for (    final Ticket ticket : ticketsInCache) {
      if (ticket.isExpired()) {
        ticketsToRemove.add(ticket);
      }
    }
    log.info("{} tickets found to be removed.",ticketsToRemove.size());
    for (    final Ticket ticket : ticketsToRemove) {
      if (this.logUserOutOfServices && ticket instanceof TicketGrantingTicket) {
        logoutManager.performLogout((TicketGrantingTicket)ticket);
      }
      this.ticketRegistry.deleteTicket(ticket.getId());
    }
  }
  finally {
    log.debug("Releasing ticket cleanup lock.");
    this.lock.release();
  }
  log.info("Finished ticket cleanup.");
}
