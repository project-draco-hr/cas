{
  try {
    final String serviceId=requestBody.getFirst(CasProtocolConstants.PARAMETER_SERVICE);
    final AuthenticationResultBuilder builder=new DefaultAuthenticationResultBuilder(this.authenticationSystemSupport.getPrincipalElectionStrategy());
    final Service service=this.webApplicationServiceFactory.createService(serviceId);
    final AuthenticationResult authenticationResult=builder.collect(this.ticketRegistrySupport.getAuthenticationFrom(tgtId)).build(service);
    final ServiceTicket serviceTicketId=this.centralAuthenticationService.grantServiceTicket(tgtId,service,authenticationResult);
    return new ResponseEntity<>(serviceTicketId.getId(),HttpStatus.OK);
  }
 catch (  final InvalidTicketException e) {
    return new ResponseEntity<>("TicketGrantingTicket could not be found",HttpStatus.NOT_FOUND);
  }
catch (  final Exception e) {
    LOGGER.error(e.getMessage(),e);
    return new ResponseEntity<>(e.getMessage(),HttpStatus.INTERNAL_SERVER_ERROR);
  }
}
