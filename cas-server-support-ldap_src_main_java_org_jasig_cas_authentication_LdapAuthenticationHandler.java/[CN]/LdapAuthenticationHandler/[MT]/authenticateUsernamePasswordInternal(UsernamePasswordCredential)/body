{
  final AuthenticationResponse response;
  try {
    logger.debug("Attempting LDAP authentication for {}",upc);
    final String password=getPasswordEncoder().encode(upc.getPassword());
    final AuthenticationRequest request=new AuthenticationRequest(upc.getUsername(),new org.ldaptive.Credential(password),this.authenticatedEntryAttributes);
    response=this.authenticator.authenticate(request);
  }
 catch (  final LdapException e) {
    logger.trace(e.getMessage(),e);
    throw new PreventedException("Unexpected LDAP error",e);
  }
  logger.debug("LDAP response: {}",response);
  final List<MessageDescriptor> messageList;
  final LdapPasswordPolicyConfiguration ldapPasswordPolicyConfiguration=(LdapPasswordPolicyConfiguration)super.getPasswordPolicyConfiguration();
  if (ldapPasswordPolicyConfiguration != null) {
    logger.debug("Applying password policy to {}",response);
    messageList=ldapPasswordPolicyConfiguration.getAccountStateHandler().handle(response,ldapPasswordPolicyConfiguration);
  }
 else {
    logger.debug("No ldap password policy configuration is defined");
    messageList=Collections.emptyList();
  }
  if (response.getResult()) {
    logger.debug("LDAP response returned as result. Creating the final LDAP principal");
    return createHandlerResult(upc,createPrincipal(upc.getUsername(),response.getLdapEntry()),messageList);
  }
  if (AuthenticationResultCode.DN_RESOLUTION_FAILURE == response.getAuthenticationResultCode()) {
    throw new AccountNotFoundException(upc.getUsername() + " not found.");
  }
  throw new FailedLoginException("Invalid credentials");
}
