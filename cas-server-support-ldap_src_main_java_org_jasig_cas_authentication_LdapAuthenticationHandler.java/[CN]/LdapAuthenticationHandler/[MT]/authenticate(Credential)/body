{
  final AuthenticationResponse response;
  final UsernamePasswordCredential upc=(UsernamePasswordCredential)credential;
  try {
    logger.debug("Attempting LDAP authentication for {}",credential);
    final AuthenticationRequest request=new AuthenticationRequest(upc.getUsername(),new org.ldaptive.Credential(upc.getPassword()),this.authenticatedEntryAttributes);
    response=this.authenticator.authenticate(request);
  }
 catch (  final LdapException e) {
    throw new PreventedException("Unexpected LDAP error",e);
  }
  logger.debug("LDAP response: {}",response);
  if (response.getResult()) {
    final List<Message> messageList;
    if (this.ldapPasswordPolicyConfiguration != null) {
      logger.debug("Applying password policy to {}",response);
      messageList=this.ldapPasswordPolicyConfiguration.getAccountStateHandler().handle(response,ldapPasswordPolicyConfiguration);
    }
 else {
      messageList=Collections.emptyList();
    }
    return new HandlerResult(this,new BasicCredentialMetaData(credential),createPrincipal(upc.getUsername(),response.getLdapEntry()),messageList);
  }
 else {
    if (this.ldapPasswordPolicyConfiguration != null) {
      logger.debug("Applying password policy to {}",response);
      this.ldapPasswordPolicyConfiguration.getAccountStateHandler().handle(response,ldapPasswordPolicyConfiguration);
    }
  }
  if (AuthenticationResultCode.DN_RESOLUTION_FAILURE == response.getAuthenticationResultCode()) {
    throw new AccountNotFoundException(upc.getUsername() + " not found.");
  }
  throw new FailedLoginException("Invalid credentials.");
}
