{
  logger.debug("Creating LDAP principal for {} based on {}",username,ldapEntry.getDn());
  final String id;
  if (this.principalIdAttribute != null) {
    final LdapAttribute principalAttr=ldapEntry.getAttribute(this.principalIdAttribute);
    if (principalAttr == null || principalAttr.size() == 0) {
      throw new LoginException(this.principalIdAttribute + " attribute not found for " + username);
    }
    if (principalAttr.size() > 1) {
      if (this.allowMultiplePrincipalAttributeValues) {
        logger.warn("Found multiple values for principal ID attribute: {}. Using first value={}.",principalAttr,principalAttr.getStringValue());
      }
 else {
        throw new LoginException("Multiple principal values not allowed: " + principalAttr);
      }
    }
    id=principalAttr.getStringValue();
    logger.debug("Retrieved principal id attribute {}",id);
  }
 else {
    id=username;
    logger.debug("Principal id attribute is not defined. Using the default id {}",id);
  }
  final Map<String,Object> attributeMap=new LinkedHashMap<>(this.principalAttributeMap.size());
  for (  final Map.Entry<String,String> ldapAttr : this.principalAttributeMap.entrySet()) {
    final LdapAttribute attr=ldapEntry.getAttribute(ldapAttr.getKey());
    if (attr != null) {
      logger.debug("Found principal attribute: {}",attr);
      final String principalAttrName=ldapAttr.getValue();
      if (attr.size() > 1) {
        logger.debug("Principal attribute: {} is multivalued",attr);
        attributeMap.put(principalAttrName,attr.getStringValues());
      }
 else {
        attributeMap.put(principalAttrName,attr.getStringValue());
      }
    }
  }
  logger.debug("Created LDAP principal for id {} and {} attributes",id,attributeMap.size());
  return this.principalFactory.createPrincipal(id,attributeMap);
}
