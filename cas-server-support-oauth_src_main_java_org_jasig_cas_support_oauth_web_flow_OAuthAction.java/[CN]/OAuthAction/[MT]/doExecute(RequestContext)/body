{
  final HttpServletRequest request=WebUtils.getHttpServletRequest(context);
  final HttpSession session=request.getSession();
  final String providerType=request.getParameter(OAuthConstants.OAUTH_PROVIDER);
  logger.debug("providerType : {}",providerType);
  if (StringUtils.isNotBlank(providerType)) {
    final OAuthProvider provider=OAuthUtils.getProviderByType(providers,providerType);
    logger.debug("provider : {}",provider);
    @SuppressWarnings("unchecked") final OAuthCredential credential=provider.getCredential(new HttpUserSession(request),request.getParameterMap());
    logger.debug("credential : {}",credential);
    final Service service=(Service)session.getAttribute("service");
    context.getFlowScope().put("service",service);
    restoreState(context);
    final Credentials credentials=new OAuthCredentials(credential);
    try {
      WebUtils.putTicketGrantingTicketInRequestScope(context,this.centralAuthenticationService.createTicketGrantingTicket(credentials));
      return success();
    }
 catch (    final TicketException e) {
      return error();
    }
  }
 else {
    final Service service=(Service)context.getFlowScope().get("service");
    session.setAttribute("service",service);
    saveState(context);
    for (    final OAuthProvider provider : providers.getProviders()) {
      final String key=provider.getType() + "Url";
      String authorizationUrl=null;
      if (provider instanceof BaseOAuth10Provider) {
        authorizationUrl=OAuthUtils.addParameter(request.getContextPath() + oauth10loginUrl,OAuthConstants.OAUTH_PROVIDER,provider.getType());
      }
 else {
        authorizationUrl=provider.getAuthorizationUrl(new HttpUserSession(session));
      }
      logger.debug("{} -> {}",key,authorizationUrl);
      context.getFlowScope().put(key,authorizationUrl);
    }
  }
  return error();
}
