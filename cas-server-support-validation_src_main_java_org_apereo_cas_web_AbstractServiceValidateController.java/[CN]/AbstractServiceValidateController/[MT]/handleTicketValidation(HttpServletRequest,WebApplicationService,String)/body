{
  TicketGrantingTicket proxyGrantingTicketId=null;
  final Credential serviceCredential=getServiceCredentialsFromRequest(service,request);
  if (serviceCredential != null) {
    try {
      proxyGrantingTicketId=handleProxyGrantingTicketDelivery(serviceTicketId,serviceCredential);
    }
 catch (    final AuthenticationException e) {
      logger.warn("Failed to authenticate service credential {}",serviceCredential);
      return generateErrorView(CasProtocolConstants.ERROR_CODE_INVALID_PROXY_CALLBACK,CasProtocolConstants.ERROR_CODE_INVALID_PROXY_CALLBACK,new Object[]{serviceCredential.getId()},request,service);
    }
catch (    final InvalidTicketException e) {
      logger.error("Failed to create proxy granting ticket due to an invalid ticket for {}",serviceCredential,e);
      return generateErrorView(e.getCode(),e.getCode(),new Object[]{serviceTicketId},request,service);
    }
catch (    final AbstractTicketException e) {
      logger.error("Failed to create proxy granting ticket for {}",serviceCredential,e);
      return generateErrorView(e.getCode(),e.getCode(),new Object[]{serviceCredential.getId()},request,service);
    }
  }
  final Assertion assertion=this.centralAuthenticationService.validateServiceTicket(serviceTicketId,service);
  if (!validateAssertion(request,serviceTicketId,assertion)) {
    return generateErrorView(CasProtocolConstants.ERROR_CODE_INVALID_TICKET,CasProtocolConstants.ERROR_CODE_INVALID_TICKET,new Object[]{serviceTicketId},request,service);
  }
  final Pair<Boolean,Optional<MultifactorAuthenticationProvider>> ctxResult=validateAuthenticationContext(assertion,request);
  if (!ctxResult.getFirst()) {
    throw new UnsatisfiedAuthenticationContextTicketValidationException(assertion.getService());
  }
  String proxyIou=null;
  if (serviceCredential != null && this.proxyHandler.canHandle(serviceCredential)) {
    proxyIou=handleProxyIouDelivery(serviceCredential,proxyGrantingTicketId);
    if (StringUtils.isEmpty(proxyIou)) {
      return generateErrorView(CasProtocolConstants.ERROR_CODE_INVALID_PROXY_CALLBACK,CasProtocolConstants.ERROR_CODE_INVALID_PROXY_CALLBACK,new Object[]{serviceCredential.getId()},request,service);
    }
  }
 else {
    logger.debug("No service credentials specified, and/or the proxy handler [{}] cannot handle credentials",this.proxyHandler);
  }
  onSuccessfulValidation(serviceTicketId,assertion);
  logger.debug("Successfully validated service ticket {} for service [{}]",serviceTicketId,service.getId());
  return generateSuccessView(assertion,proxyIou,service,request,ctxResult.getSecond(),proxyGrantingTicketId);
}
