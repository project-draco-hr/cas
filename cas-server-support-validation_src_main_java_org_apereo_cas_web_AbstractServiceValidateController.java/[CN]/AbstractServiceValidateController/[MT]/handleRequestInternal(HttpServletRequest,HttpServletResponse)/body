{
  final WebApplicationService service=this.argumentExtractor.extractService(request);
  final String serviceTicketId=service != null ? service.getArtifactId() : null;
  if (service == null || serviceTicketId == null) {
    logger.debug("Could not identify service and/or service ticket for service: [{}]",service);
    return generateErrorView(CasProtocolConstants.ERROR_CODE_INVALID_REQUEST,CasProtocolConstants.ERROR_CODE_INVALID_REQUEST,null,request,service);
  }
  try {
    return handleTicketValidation(request,service,serviceTicketId);
  }
 catch (  final AbstractTicketValidationException e) {
    final String code=e.getCode();
    return generateErrorView(code,code,new Object[]{serviceTicketId,e.getOriginalService().getId(),service.getId()},request,service);
  }
catch (  final AbstractTicketException e) {
    return generateErrorView(e.getCode(),e.getCode(),new Object[]{serviceTicketId},request,service);
  }
catch (  final UnauthorizedProxyingException e) {
    return generateErrorView(e.getMessage(),e.getMessage(),new Object[]{service.getId()},request,service);
  }
catch (  final UnauthorizedServiceException e) {
    return generateErrorView(e.getMessage(),e.getMessage(),null,request,service);
  }
}
