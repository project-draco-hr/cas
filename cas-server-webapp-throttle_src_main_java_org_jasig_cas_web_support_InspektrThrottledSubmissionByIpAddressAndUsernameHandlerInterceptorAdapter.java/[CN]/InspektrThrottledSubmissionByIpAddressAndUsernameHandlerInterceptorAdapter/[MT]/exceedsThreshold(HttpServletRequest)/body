{
  if (this.dataSource != null && this.jdbcTemplate != null) {
    final String userToUse=constructUsername(request,getUsernameParameter());
    final Calendar cutoff=Calendar.getInstance();
    cutoff.add(Calendar.SECOND,-1 * getFailureRangeInSeconds());
    final ClientInfo clientInfo=ClientInfoHolder.getClientInfo();
    final String remoteAddress=clientInfo.getClientIpAddress();
    final List<Timestamp> failures=this.jdbcTemplate.query(sqlQueryAudit,new Object[]{remoteAddress,userToUse,this.authenticationFailureCode,this.applicationCode,cutoff.getTime()},new int[]{Types.VARCHAR,Types.VARCHAR,Types.VARCHAR,Types.VARCHAR,Types.TIMESTAMP},new RowMapper<Timestamp>(){
      @Override public Timestamp mapRow(      final ResultSet resultSet,      final int i) throws SQLException {
        return resultSet.getTimestamp(1);
      }
    }
);
    if (failures.size() < 2) {
      return false;
    }
    return NUMBER_OF_MILLISECONDS_IN_SECOND / (failures.get(0).getTime() - failures.get(1).getTime()) > getThresholdRate();
  }
  logger.debug("No data source is defined for {}. Ignoring threshold checking",this.getName());
  return false;
}
