{
  final Credential credential=constructCredentialsFromRequest(context);
  if (credential == null) {
    return error();
  }
  final String ticketGrantingTicketId=WebUtils.getTicketGrantingTicketId(context);
  final Service service=WebUtils.getService(context);
  if (isRenewPresent(context) && ticketGrantingTicketId != null && service != null) {
    try {
      this.authenticationSupervisor.authenticate(credential);
      final AuthenticationContext authenticationContext=this.authenticationSupervisor.build();
      final ServiceTicket serviceTicketId=this.centralAuthenticationService.grantServiceTicket(ticketGrantingTicketId,service,authenticationContext);
      WebUtils.putServiceTicketInRequestScope(context,serviceTicketId);
      return result("warn");
    }
 catch (    final AuthenticationException e) {
      onError(context,credential);
      return error();
    }
catch (    final AbstractTicketException e) {
      this.authenticationSupervisor.clear();
      this.centralAuthenticationService.destroyTicketGrantingTicket(ticketGrantingTicketId);
      logger.debug("Attempted to generate a ServiceTicket using renew=true with different credential",e);
    }
  }
  try {
    this.authenticationSupervisor.authenticate(credential);
    final AuthenticationContext authenticationContext=this.authenticationSupervisor.build();
    final TicketGrantingTicket tgt=this.centralAuthenticationService.createTicketGrantingTicket(authenticationContext);
    WebUtils.putTicketGrantingTicketInScopes(context,tgt);
    onSuccess(context,credential);
    return success();
  }
 catch (  final Exception e) {
    logger.warn(e.getMessage(),e);
    onError(context,credential);
    return error();
  }
}
