{
  final MergingPersonAttributeDaoImpl mergingDao=new MergingPersonAttributeDaoImpl();
  mergingDao.setMerger(new ReplacingAttributeAdder());
  final List<IPersonAttributeDao> list=new ArrayList<>();
  final PrincipalAttributesProperties.Ldap ldap=casProperties.getAuthn().getAttributeRepository().getLdap();
  if (!casProperties.getAuthn().getAttributeRepository().getAttributes().isEmpty() && StringUtils.isNotBlank(ldap.getBaseDn()) && StringUtils.isNotBlank(ldap.getLdapUrl())) {
    final LdaptivePersonAttributeDao ldapDao=new LdaptivePersonAttributeDao();
    ldapDao.setConnectionFactory(Beans.newPooledConnectionFactory(ldap));
    ldapDao.setBaseDN(ldap.getBaseDn());
    ldapDao.setSearchFilter(ldap.getUserFilter());
    ldapDao.setResultAttributeMapping(casProperties.getAuthn().getAttributeRepository().getAttributes());
    final SearchControls constraints=new SearchControls();
    final String[] attributes=casProperties.getAuthn().getAttributeRepository().getAttributes().keySet().toArray(new String[casProperties.getAuthn().getAttributeRepository().getAttributes().keySet().size()]);
    constraints.setReturningAttributes(attributes);
    if (ldap.isSubtreeSearch()) {
      constraints.setSearchScope(SearchControls.SUBTREE_SCOPE);
    }
    constraints.setDerefLinkFlag(true);
    ldapDao.setSearchControls(constraints);
    list.add(ldapDao);
  }
  final PrincipalAttributesProperties.Jdbc jdbc=casProperties.getAuthn().getAttributeRepository().getJdbc();
  if (!casProperties.getAuthn().getAttributeRepository().getAttributes().isEmpty() && StringUtils.isNotBlank(jdbc.getSql())) {
    final AbstractJdbcPersonAttributeDao jdbcDao;
    if (jdbc.isSingleRow()) {
      jdbcDao=new SingleRowJdbcPersonAttributeDao(Beans.newHickariDataSource(jdbc),jdbc.getSql());
    }
 else {
      jdbcDao=new MultiRowJdbcPersonAttributeDao(Beans.newHickariDataSource(jdbc),jdbc.getSql());
      ((MultiRowJdbcPersonAttributeDao)jdbcDao).setNameValueColumnMappings(jdbc.getColumnMappings());
    }
    jdbcDao.setQueryAttributeMapping(ImmutableMap.of("username",jdbc.getUsername()));
    jdbcDao.setResultAttributeMapping(casProperties.getAuthn().getAttributeRepository().getAttributes());
    jdbcDao.setRequireAllQueryAttributes(jdbc.isRequireAllAttributes());
    jdbcDao.setUsernameCaseCanonicalizationMode(jdbc.getCaseCanonicalization());
    jdbcDao.setQueryType(jdbc.getQueryType());
    list.add(mergingDao);
  }
  if (!casProperties.getAuthn().getAttributeRepository().getAttributes().isEmpty()) {
    list.add(Beans.newStubAttributeRepository(casProperties.getAuthn().getAttributeRepository()));
  }
  mergingDao.setPersonAttributeDaos(list);
  final CachingPersonAttributeDaoImpl impl=new CachingPersonAttributeDaoImpl();
  impl.setCacheNullResults(false);
  final Cache graphs=CacheBuilder.newBuilder().concurrencyLevel(2).weakKeys().maximumSize(casProperties.getAuthn().getAttributeRepository().getMaximumCacheSize()).expireAfterWrite(casProperties.getAuthn().getAttributeRepository().getExpireInMinutes(),TimeUnit.MINUTES).build();
  impl.setUserInfoCache(graphs.asMap());
  impl.setCachedPersonAttributesDao(mergingDao);
  return impl;
}
