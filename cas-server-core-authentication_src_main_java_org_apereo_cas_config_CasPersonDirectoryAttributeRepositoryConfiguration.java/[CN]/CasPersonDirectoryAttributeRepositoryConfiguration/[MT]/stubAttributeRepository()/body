{
  final CachingPersonAttributeDaoImpl impl=new CachingPersonAttributeDaoImpl();
  impl.setCacheNullResults(false);
  final Cache graphs=CacheBuilder.newBuilder().concurrencyLevel(2).weakKeys().maximumSize(casProperties.getAuthn().getAttributeRepository().getMaximumCacheSize()).expireAfterWrite(casProperties.getAuthn().getAttributeRepository().getExpireInMinutes(),TimeUnit.MINUTES).build();
  impl.setUserInfoCache(graphs.asMap());
  final MergingPersonAttributeDaoImpl dao=new MergingPersonAttributeDaoImpl();
  dao.setMerger(new ReplacingAttributeAdder());
  final List list=new ArrayList<>();
  if (!casProperties.getAuthn().getAttributeRepository().getAttributes().isEmpty()) {
    list.add(Beans.newAttributeRepository(casProperties.getAuthn().getAttributeRepository().getAttributes()));
  }
  if (!casProperties.getAuthn().getAttributeRepository().getAttributes().isEmpty() && StringUtils.isNotBlank(casProperties.getAuthn().getAttributeRepository().getLdap().getBaseDn()) && StringUtils.isNotBlank(casProperties.getAuthn().getAttributeRepository().getLdap().getLdapUrl())) {
    final LdaptivePersonAttributeDao ldap=new LdaptivePersonAttributeDao();
    ldap.setConnectionFactory(Beans.newPooledConnectionFactory(casProperties.getAuthn().getAttributeRepository().getLdap()));
    ldap.setBaseDN(casProperties.getAuthn().getAttributeRepository().getLdap().getBaseDn());
    ldap.setSearchFilter(casProperties.getAuthn().getAttributeRepository().getLdap().getUserFilter());
    ldap.setResultAttributeMapping(casProperties.getAuthn().getAttributeRepository().getAttributes());
    final SearchControls constraints=new SearchControls();
    final String[] attributes=casProperties.getAuthn().getAttributeRepository().getAttributes().keySet().toArray(new String[casProperties.getAuthn().getAttributeRepository().getAttributes().keySet().size()]);
    constraints.setReturningAttributes(attributes);
    if (casProperties.getAuthn().getAttributeRepository().getLdap().isSubtreeSearch()) {
      constraints.setSearchScope(SearchControls.SUBTREE_SCOPE);
    }
    constraints.setDerefLinkFlag(true);
    ldap.setSearchControls(constraints);
    list.add(ldap);
  }
  if (!casProperties.getAuthn().getAttributeRepository().getAttributes().isEmpty() && StringUtils.isNotBlank(casProperties.getAuthn().getAttributeRepository().getJdbc().getSql())) {
    final SingleRowJdbcPersonAttributeDao jdbc=new SingleRowJdbcPersonAttributeDao(Beans.newHickariDataSource(casProperties.getAuthn().getAttributeRepository().getJdbc()),casProperties.getAuthn().getAttributeRepository().getJdbc().getSql());
    jdbc.setQueryAttributeMapping(ImmutableMap.of("username",casProperties.getAuthn().getAttributeRepository().getJdbc().getUsername()));
    jdbc.setResultAttributeMapping(casProperties.getAuthn().getAttributeRepository().getAttributes());
    list.add(jdbc);
  }
  dao.setPersonAttributeDaos(list);
  return dao;
}
