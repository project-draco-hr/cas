{
  kryo.writeObject(output,service.getServiceId());
  kryo.writeObject(output,StringUtils.defaultIfEmpty(service.getName(),""));
  kryo.writeObject(output,StringUtils.defaultIfEmpty(service.getDescription(),""));
  kryo.writeObject(output,service.getId());
  kryo.writeObject(output,service.getEvaluationOrder());
  kryo.writeObject(output,ObjectUtils.defaultIfNull(service.getLogo(),getEmptyUrl()));
  kryo.writeObject(output,service.getLogoutType());
  kryo.writeObject(output,ObjectUtils.defaultIfNull(service.getLogoutUrl(),getEmptyUrl()));
  kryo.writeObject(output,ImmutableSet.copyOf(service.getRequiredHandlers()));
  kryo.writeObject(output,StringUtils.defaultIfEmpty(service.getTheme(),""));
  writeObjectByReflection(kryo,output,ObjectUtils.defaultIfNull(service.getPublicKey(),new RegisteredServicePublicKeyImpl()));
  writeObjectByReflection(kryo,output,ObjectUtils.defaultIfNull(service.getProxyPolicy(),new RefuseRegisteredServiceProxyPolicy()));
  writeObjectByReflection(kryo,output,ObjectUtils.defaultIfNull(service.getAttributeReleasePolicy(),new ReturnAllowedAttributeReleasePolicy()));
  writeObjectByReflection(kryo,output,ObjectUtils.defaultIfNull(service.getUsernameAttributeProvider(),new DefaultRegisteredServiceUsernameProvider()));
  writeObjectByReflection(kryo,output,ObjectUtils.defaultIfNull(service.getAccessStrategy(),new DefaultRegisteredServiceAccessStrategy()));
}
