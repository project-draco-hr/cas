{
  final RemoteAddressCredential c=(RemoteAddressCredential)credential;
  final String formattedIpAddress=getFormattedIpAddress(c.getRemoteAddress().trim());
  if (!StringUtils.hasText(formattedIpAddress)) {
    return null;
  }
  log.debug("Original IP address: {}, formatted IP address {}",c.getRemoteAddress(),formattedIpAddress);
  final String attributeId=getAttributeIds()[0];
  final List<?> principalList=this.getLdapTemplate().search(getSearchBase(),LdapUtils.getFilterWithValues(getFilter(),formattedIpAddress),getSearchControls(),new AttributesMapper(){
    @Override public Object mapFromAttributes(    final Attributes attrs) throws NamingException {
      final Attribute attribute=attrs.get(attributeId);
      return attribute == null ? null : attribute.get();
    }
  }
);
  if (principalList.isEmpty()) {
    log.debug("LDAP search returned zero results.");
    return null;
  }
  if (principalList.size() > 1) {
    log.error("LDAP search returned multiple results " + "for filter \"" + getFilter() + "\", "+ "which is not allowed.");
    return null;
  }
  return (String)principalList.get(0);
}
