{
  final RegisteredService service=WebUtils.getRegisteredService(context);
  final Authentication authentication=WebUtils.getAuthentication(context);
  final RegisteredServiceAuthenticationPolicy policy=service.getAuthenticationPolicy();
  if (policy == null || service.getAuthenticationPolicy().getMultifactorAuthenticationProviders().isEmpty()) {
    logger.debug("Authentication policy is absent or does not contain any multifactor authentication providers");
    return null;
  }
  if (StringUtils.isBlank(policy.getPrincipalAttributeNameTrigger()) || StringUtils.isBlank(policy.getPrincipalAttributeValueToMatch())) {
    logger.debug("Authentication policy does not define a principal attribute and/or value to trigger multifactor authentication");
    return null;
  }
  final Principal principal=authentication.getPrincipal();
  final Set<MultifactorAuthenticationProvider> providers=getAuthenticationProviderForService(service);
  return resolveEventViaPrincipalAttribute(principal,policy.getPrincipalAttributeNameTrigger(),service,context,providers,Predicates.containsPattern(policy.getPrincipalAttributeValueToMatch()));
}
