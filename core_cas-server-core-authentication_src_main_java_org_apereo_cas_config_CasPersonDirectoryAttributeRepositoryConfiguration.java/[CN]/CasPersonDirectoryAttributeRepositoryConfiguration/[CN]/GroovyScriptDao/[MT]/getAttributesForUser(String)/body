{
  final PrincipalAttributesProperties.Groovy groovy=casProperties.getAuthn().getAttributeRepository().getGroovy();
  final ClassLoader parent=getClass().getClassLoader();
  try (GroovyClassLoader loader=new GroovyClassLoader(parent)){
    if (groovy.getConfig().getLocation() != null) {
      final File groovyFile=groovy.getConfig().getLocation().getFile();
      if (groovyFile.exists()) {
        final Class<?> groovyClass=loader.parseClass(groovyFile);
        LOGGER.debug("Loaded groovy class {} from script {}",groovyClass.getSimpleName(),groovyFile.getCanonicalPath());
        final GroovyObject groovyObject=(GroovyObject)groovyClass.newInstance();
        LOGGER.debug("Created groovy object instance from class {}",groovyFile.getCanonicalPath());
        final Object[] args={uid,LOGGER,casProperties,applicationContext};
        LOGGER.debug("Executing groovy script's run method, with parameters {}",args);
        final Map<String,Object> personAttributesMap=(Map<String,Object>)groovyObject.invokeMethod("run",args);
        LOGGER.debug("Creating person attributes with the username {} and attributes {}",uid,personAttributesMap);
        return personAttributesMap;
      }
    }
  }
 catch (  final Exception e) {
    LOGGER.error(e.getMessage(),e);
  }
  return new HashMap<>();
}
