{
  final String searchFilter=LdapUtils.getFilterWithValues(getFilter(),lookupAttributeValue);
  logger.debug("LDAP search with filter {}",searchFilter);
  try {
    final String idAttribute=getAttributeIds()[0];
    final List principalList=getLdapTemplate().search(getSearchBase(),searchFilter,getSearchControls(),new AttributesMapper(){
      @Override public Object mapFromAttributes(      final Attributes attrs) throws NamingException {
        final Attribute attribute=attrs.get(idAttribute);
        if (attribute == null) {
          logger.debug("Principal attribute {} not found in LDAP search results. Returning null.",idAttribute);
          return null;
        }
        return attribute.get();
      }
    }
);
    if (principalList.isEmpty()) {
      logger.debug("LDAP search returned zero results.");
      return null;
    }
    if (principalList.size() > 1) {
      logger.error("LDAP search returned multiple results " + "for filter \"" + searchFilter + "\", "+ "which is not allowed.");
      return null;
    }
    return (String)principalList.get(0);
  }
 catch (  final Exception e) {
    logger.error(e.getMessage(),e);
    return null;
  }
}
