{
  try {
    logger.debug("Determining if SAML assertionfor {} should be signed",service.getEntityId());
    if (!adaptor.isWantAssertionsSigned()) {
      logger.debug("Relying party does not want assertions signed, so assertions will not be signed");
      return;
    }
    final MessageContext<org.opensaml.saml.saml2.core.Assertion> outboundContext=new MessageContext<>();
    outboundContext.setMessage(assertion);
    final List<AssertionConsumerService> assertionConsumerServices=adaptor.getAssertionConsumerServices();
    final SAMLPeerEntityContext peerEntityContext=outboundContext.getSubcontext(SAMLPeerEntityContext.class,true);
    if (peerEntityContext != null) {
      final SAMLEndpointContext endpointContext=peerEntityContext.getSubcontext(SAMLEndpointContext.class,true);
      if (endpointContext != null) {
        endpointContext.setEndpoint(assertionConsumerServices.get(0));
      }
    }
    final SecurityParametersContext secParametersContext=outboundContext.getSubcontext(SecurityParametersContext.class,true);
    if (secParametersContext == null) {
      throw new RuntimeException("No signature signing parameters could be determined");
    }
    final SignatureSigningParameters signingParameters=buildSignatureSigningParameters(adaptor.getSsoDescriptor());
    secParametersContext.setSignatureSigningParameters(signingParameters);
    final EndpointURLSchemeSecurityHandler handlerEnd=new EndpointURLSchemeSecurityHandler();
    handlerEnd.initialize();
    handlerEnd.invoke(outboundContext);
    final SAMLOutboundDestinationHandler handlerDest=new SAMLOutboundDestinationHandler();
    handlerDest.initialize();
    handlerDest.invoke(outboundContext);
    final SAMLOutboundProtocolMessageSigningHandler handler=new SAMLOutboundProtocolMessageSigningHandler();
    handler.setSignErrorResponses(false);
    handler.invoke(outboundContext);
  }
 catch (  final Exception e) {
    logger.error("Unable to marshall assertion for signing",e);
    throw new SAMLException("Unable to marshall assertion for signing",e);
  }
}
