{
  final String ticketGrantingTicketId=WebUtils.getTicketGrantingTicketId(context);
  try {
    final Service service=WebUtils.getService(context);
    final AuthenticationContextBuilder builder=new DefaultAuthenticationContextBuilder(this.authenticationObjectsRepository.getPrincipalElectionStrategy());
    final AuthenticationTransaction transaction=this.authenticationObjectsRepository.getAuthenticationTransactionFactory().get(credential);
    this.authenticationObjectsRepository.getAuthenticationTransactionManager().handle(transaction,builder);
    final AuthenticationContext authenticationContext=builder.build(service);
    final ServiceTicket serviceTicketId=this.centralAuthenticationService.grantServiceTicket(ticketGrantingTicketId,service,authenticationContext);
    WebUtils.putServiceTicketInRequestScope(context,serviceTicketId);
    putWarnCookieIfRequestParameterPresent(context);
    return newEvent(WARN);
  }
 catch (  final AuthenticationException e) {
    return newEvent(AUTHENTICATION_FAILURE,e);
  }
catch (  final TicketCreationException e) {
    logger.warn("Invalid attempt to access service using renew=true with different credential. Ending SSO session.");
    this.centralAuthenticationService.destroyTicketGrantingTicket(ticketGrantingTicketId);
  }
catch (  final AbstractTicketException e) {
    return newEvent(ERROR,e);
  }
  return newEvent(ERROR);
}
