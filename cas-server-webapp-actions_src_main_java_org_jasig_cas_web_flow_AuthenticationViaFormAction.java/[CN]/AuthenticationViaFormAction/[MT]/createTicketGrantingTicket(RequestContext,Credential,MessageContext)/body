{
  try {
    final Service service=WebUtils.getService(context);
    final AuthenticationContextBuilder builder=new DefaultAuthenticationContextBuilder(this.authenticationObjectsRepository.getPrincipalElectionStrategy());
    final AuthenticationTransaction transaction=this.authenticationObjectsRepository.getAuthenticationTransactionFactory().get(credential);
    this.authenticationObjectsRepository.getAuthenticationTransactionManager().handle(transaction,builder);
    final AuthenticationContext authenticationContext=builder.build(service);
    final TicketGrantingTicket tgt=this.centralAuthenticationService.createTicketGrantingTicket(authenticationContext);
    WebUtils.putTicketGrantingTicketInScopes(context,tgt);
    putWarnCookieIfRequestParameterPresent(context);
    putPublicWorkstationToFlowIfRequestParameterPresent(context);
    if (addWarningMessagesToMessageContextIfNeeded(tgt,messageContext)) {
      return newEvent(SUCCESS_WITH_WARNINGS);
    }
    return newEvent(SUCCESS);
  }
 catch (  final AuthenticationException e) {
    logger.debug(e.getMessage(),e);
    return newEvent(AUTHENTICATION_FAILURE,e);
  }
catch (  final Exception e) {
    logger.debug(e.getMessage(),e);
  }
  return newEvent(ERROR);
}
