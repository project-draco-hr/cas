{
  final String providerId=CommonUtils.safeGetParameter(request,"providerId");
  if (StringUtils.isBlank(providerId)) {
    logger.warn("No providerId parameter given in unsolicited SSO authentication request.");
    throw new MessageDecodingException("No providerId parameter given in unsolicited SSO authentication request.");
  }
  final SamlRegisteredService registeredService=verifySamlRegisteredService(providerId);
  final SamlRegisteredServiceServiceProviderMetadataFacade adaptor=getSamlMetadataFacadeFor(registeredService,providerId);
  String shire=CommonUtils.safeGetParameter(request,"shire");
  if (StringUtils.isBlank(shire)) {
    shire=adaptor.getAssertionConsumerService().getLocation();
  }
  if (StringUtils.isBlank(shire)) {
    logger.warn("Unable to resolve SP ACS URL for AuthnRequest construction for entityID: {}",providerId);
    throw new MessageDecodingException("Unable to resolve SP ACS URL for AuthnRequest construction");
  }
  final String target=CommonUtils.safeGetParameter(request,"target");
  final String time=CommonUtils.safeGetParameter(request,"time");
  final SAMLObjectBuilder builder=(SAMLObjectBuilder)configBean.getBuilderFactory().getBuilder(AuthnRequest.DEFAULT_ELEMENT_NAME);
  final AuthnRequest authnRequest=(AuthnRequest)builder.buildObject();
  authnRequest.setAssertionConsumerServiceURL(shire);
  final SAMLObjectBuilder isBuilder=(SAMLObjectBuilder)configBean.getBuilderFactory().getBuilder(Issuer.DEFAULT_ELEMENT_NAME);
  final Issuer issuer=(Issuer)isBuilder.buildObject();
  issuer.setValue(providerId);
  authnRequest.setIssuer(issuer);
  authnRequest.setProtocolBinding(SAMLConstants.SAML2_POST_BINDING_URI);
  final SAMLObjectBuilder pBuilder=(SAMLObjectBuilder)configBean.getBuilderFactory().getBuilder(NameIDPolicy.DEFAULT_ELEMENT_NAME);
  final NameIDPolicy nameIDPolicy=(NameIDPolicy)pBuilder.buildObject();
  nameIDPolicy.setAllowCreate(Boolean.valueOf(true));
  authnRequest.setNameIDPolicy(nameIDPolicy);
  final String id="_" + String.valueOf(Math.abs(new SecureRandom().nextLong()));
  if (NumberUtils.isNumber(time)) {
    authnRequest.setID(id + time);
    authnRequest.setIssueInstant(new DateTime(TimeUnit.SECONDS.convert(Long.parseLong(time),TimeUnit.MILLISECONDS),ISOChronology.getInstanceUTC()));
  }
 else {
    authnRequest.setID(id);
    authnRequest.setIssueInstant(new DateTime(DateTime.now(),ISOChronology.getInstanceUTC()));
  }
  authnRequest.setForceAuthn(false);
  if (StringUtils.isNotBlank(target)) {
    request.setAttribute(SamlProtocolConstants.PARAMETER_SAML_RELAY_STATE,target);
  }
  initiateAuthenticationRequest(authnRequest,response,request);
}
