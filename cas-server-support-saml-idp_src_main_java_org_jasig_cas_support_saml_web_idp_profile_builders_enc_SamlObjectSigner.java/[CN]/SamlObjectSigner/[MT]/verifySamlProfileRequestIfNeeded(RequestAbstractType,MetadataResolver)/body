{
  logger.debug("Validating signature of the request for [{}]",profileRequest.getClass().getName());
  final Signature signature=profileRequest.getSignature();
  if (signature == null) {
    throw new SAMLException("Request is signed but there is no signature associated with the request");
  }
  logger.debug("Validating profile signature...");
  final SAMLSignatureProfileValidator validator=new SAMLSignatureProfileValidator();
  validator.validate(signature);
  final MetadataCredentialResolver kekCredentialResolver=new MetadataCredentialResolver();
  final BasicRoleDescriptorResolver roleDescriptorResolver=new BasicRoleDescriptorResolver(metadataResolver);
  roleDescriptorResolver.initialize();
  final BasicSignatureValidationConfiguration config=DefaultSecurityConfigurationBootstrap.buildDefaultSignatureValidationConfiguration();
  kekCredentialResolver.setRoleDescriptorResolver(roleDescriptorResolver);
  kekCredentialResolver.setKeyInfoCredentialResolver(DefaultSecurityConfigurationBootstrap.buildBasicInlineKeyInfoCredentialResolver());
  kekCredentialResolver.initialize();
  final CriteriaSet criteriaSet=new CriteriaSet();
  criteriaSet.add(new SignatureValidationConfigurationCriterion(config));
  criteriaSet.add(new EntityIdCriterion(SamlIdPUtils.getIssuerFromSamlRequest(profileRequest)));
  criteriaSet.add(new EntityRoleCriterion(SPSSODescriptor.DEFAULT_ELEMENT_NAME));
  criteriaSet.add(new UsageCriterion(UsageType.SIGNING));
  final Credential credential=kekCredentialResolver.resolveSingle(criteriaSet);
  if (credential == null) {
    throw new SamlException("Signing credential for validation could not be resolved");
  }
  logger.debug("Validating signature using credentials for [{}]",credential.getEntityId());
  SignatureValidator.validate(signature,credential);
  logger.info("Successfully validated the request signature.");
}
