{
  final Map<Long,RegisteredService> temp=new ConcurrentHashMap<Long,RegisteredService>();
  final FilenameFilter filter=new SuffixFileFilter(FILE_EXTENSION);
  int errorCount=0;
  for (  final File file : this.serviceRegistryDirectory.listFiles(filter)) {
    BufferedInputStream in=null;
    try {
      if (file.length() > 0) {
        in=new BufferedInputStream(new FileInputStream(file));
        Object oo=this.objectMapper.readValue(in,Object.class);
        System.out.print(oo);
        final Map<?,?> record=null;
        final String serviceId=record.get(SERVICE_ID_KEY).toString();
        final Class<? extends RegisteredService> clazz=getRegisteredServiceInstance(serviceId);
        final RegisteredService service=this.objectMapper.convertValue(record,clazz);
        temp.put(service.getId(),service);
      }
    }
 catch (    final Exception e) {
      errorCount++;
      LOGGER.error("Error reading {}",file,e);
    }
 finally {
      IOUtils.closeQuietly(in);
    }
  }
  if (errorCount == 0) {
    this.serviceMap=temp;
  }
  return new ArrayList<RegisteredService>(this.serviceMap.values());
}
