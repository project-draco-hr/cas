{
  final Map<Long,RegisteredService> temp=new ConcurrentHashMap<>();
  int errorCount=0;
  final Collection<File> c=FileUtils.listFiles(this.serviceRegistryDirectory,new String[]{FILE_EXTENSION},true);
  for (  final File file : c) {
    if (file.length() > 0) {
      try (final BufferedInputStream in=new BufferedInputStream(new FileInputStream(file))){
        final RegisteredService service=this.registeredServiceJsonSerializer.fromJson(in);
        if (temp.containsKey(service.getId())) {
          LOGGER.warn("Found a service definition [{}] with a duplicate id [{}]. " + "This will overwrite previous service definitions and is likely a " + "configuration problem. Make sure all services have a unique id and try again.",service.getServiceId(),service.getId());
        }
        temp.put(service.getId(),service);
      }
 catch (      final Exception e) {
        errorCount++;
        LOGGER.error("Error reading configuration file",e);
      }
    }
  }
  if (errorCount == 0) {
    this.serviceMap=temp;
  }
  return new ArrayList<>(this.serviceMap.values());
}
