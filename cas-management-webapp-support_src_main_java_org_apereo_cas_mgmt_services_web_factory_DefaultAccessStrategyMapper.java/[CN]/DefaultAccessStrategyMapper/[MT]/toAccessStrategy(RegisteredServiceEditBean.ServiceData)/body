{
  final RegisteredServiceSupportAccessEditBean supportAccess=bean.getSupportAccess();
  final DefaultRegisteredServiceAccessStrategy accessStrategy;
  if (supportAccess.getType() == RegisteredServiceSupportAccessEditBean.Types.REMOTE) {
    accessStrategy=new RemoteEndpointServiceAccessStrategy();
  }
 else   if (supportAccess.getType() == RegisteredServiceSupportAccessEditBean.Types.GROUPER) {
    accessStrategy=new GrouperRegisteredServiceAccessStrategy();
  }
 else   if (supportAccess.getType() == RegisteredServiceSupportAccessEditBean.Types.TIME) {
    accessStrategy=new TimeBasedRegisteredServiceAccessStrategy();
  }
 else {
    accessStrategy=new DefaultRegisteredServiceAccessStrategy();
  }
  accessStrategy.setEnabled(supportAccess.isCasEnabled());
  accessStrategy.setSsoEnabled(supportAccess.isSsoEnabled());
  accessStrategy.setRequireAllAttributes(supportAccess.isRequireAll());
  accessStrategy.setCaseInsensitive(supportAccess.isCaseSensitive());
  final Map<String,Set<String>> requiredAttrs=supportAccess.getRequiredAttr();
  final Set<Map.Entry<String,Set<String>>> entries=requiredAttrs.entrySet();
  final Iterator<Map.Entry<String,Set<String>>> it=entries.iterator();
  while (it.hasNext()) {
    final Map.Entry<String,Set<String>> entry=it.next();
    if (entry.getValue().isEmpty()) {
      it.remove();
    }
  }
  accessStrategy.setRequiredAttributes(requiredAttrs);
  final Map<String,Set<String>> rejectedAttrs=supportAccess.getRejectedAttr();
  final Set<Map.Entry<String,Set<String>>> rejectedEntries=rejectedAttrs.entrySet();
  final Iterator<Map.Entry<String,Set<String>>> it2=rejectedEntries.iterator();
  while (it2.hasNext()) {
    final Map.Entry<String,Set<String>> entry=it2.next();
    if (entry.getValue().isEmpty()) {
      it2.remove();
    }
  }
  accessStrategy.setRejectedAttributes(rejectedAttrs);
  if (supportAccess.getUnauthorizedRedirectUrl() != null && !supportAccess.getUnauthorizedRedirectUrl().trim().isEmpty()) {
    try {
      accessStrategy.setUnauthorizedRedirectUrl(new URI(supportAccess.getUnauthorizedRedirectUrl()));
    }
 catch (    final Exception e) {
      throw Throwables.propagate(e);
    }
  }
  if (supportAccess.getType() == RegisteredServiceSupportAccessEditBean.Types.TIME || supportAccess.getType() == RegisteredServiceSupportAccessEditBean.Types.GROUPER) {
    ((TimeBasedRegisteredServiceAccessStrategy)accessStrategy).setEndingDateTime(supportAccess.getEndingTime());
    ((TimeBasedRegisteredServiceAccessStrategy)accessStrategy).setStartingDateTime(supportAccess.getStartingTime());
  }
  if (supportAccess.getType() == RegisteredServiceSupportAccessEditBean.Types.GROUPER) {
    if (StringUtils.isNotBlank(supportAccess.getGroupField())) {
      ((GrouperRegisteredServiceAccessStrategy)accessStrategy).setGroupField(GrouperRegisteredServiceAccessStrategy.GrouperGroupField.valueOf(supportAccess.getGroupField()));
    }
  }
  if (supportAccess.getType() == RegisteredServiceSupportAccessEditBean.Types.REMOTE) {
    if (StringUtils.isNotBlank(supportAccess.getUrl())) {
      ((RemoteEndpointServiceAccessStrategy)accessStrategy).setAcceptableResponseCodes(supportAccess.getCodes());
      ((RemoteEndpointServiceAccessStrategy)accessStrategy).setEndpointUrl(supportAccess.getUrl());
    }
  }
  return accessStrategy;
}
