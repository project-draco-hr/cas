{
  final WebApplicationService service=this.argumentExtractor.extractService(request);
  final String serviceTicketId=service != null ? service.getArtifactId() : null;
  if (service == null || serviceTicketId == null) {
    logger.debug("Could not identify service and/or service ticket for service: [{}]",service);
    return generateErrorView(CasProtocolConstants.ERROR_CODE_INVALID_REQUEST,CasProtocolConstants.ERROR_CODE_INVALID_REQUEST,null,request,service);
  }
  try {
    TicketGrantingTicket proxyGrantingTicketId=null;
    final Credential serviceCredential=getServiceCredentialsFromRequest(service,request);
    if (serviceCredential != null) {
      proxyGrantingTicketId=handleProxyGrantingTicketDelivery(serviceTicketId,serviceCredential);
      if (proxyGrantingTicketId == null) {
        return generateErrorView(CasProtocolConstants.ERROR_CODE_INVALID_PROXY_CALLBACK,CasProtocolConstants.ERROR_CODE_INVALID_PROXY_CALLBACK,new Object[]{serviceCredential.getId()},request,service);
      }
    }
    final Assertion assertion=this.centralAuthenticationService.validateServiceTicket(serviceTicketId,service);
    if (!validateAssertion(request,serviceTicketId,assertion)) {
      return generateErrorView(CasProtocolConstants.ERROR_CODE_INVALID_TICKET,CasProtocolConstants.ERROR_CODE_INVALID_TICKET,new Object[]{serviceTicketId},request,service);
    }
    String proxyIou=null;
    if (serviceCredential != null && this.proxyHandler.canHandle(serviceCredential)) {
      proxyIou=this.proxyHandler.handle(serviceCredential,proxyGrantingTicketId);
      if (StringUtils.isEmpty(proxyIou)) {
        return generateErrorView(CasProtocolConstants.ERROR_CODE_INVALID_PROXY_CALLBACK,CasProtocolConstants.ERROR_CODE_INVALID_PROXY_CALLBACK,new Object[]{serviceCredential.getId()},request,service);
      }
    }
    onSuccessfulValidation(serviceTicketId,assertion);
    logger.debug("Successfully validated service ticket {} for service [{}]",serviceTicketId,service.getId());
    return generateSuccessView(assertion,proxyIou,service,proxyGrantingTicketId);
  }
 catch (  final AbstractTicketValidationException e) {
    final String code=e.getCode();
    return generateErrorView(code,code,new Object[]{serviceTicketId,e.getOriginalService().getId(),service.getId()},request,service);
  }
catch (  final AbstractTicketException te) {
    return generateErrorView(te.getCode(),te.getCode(),new Object[]{serviceTicketId},request,service);
  }
catch (  final UnauthorizedProxyingException e) {
    return generateErrorView(e.getMessage(),e.getMessage(),new Object[]{service.getId()},request,service);
  }
catch (  final UnauthorizedServiceException e) {
    return generateErrorView(e.getMessage(),e.getMessage(),null,request,service);
  }
}
