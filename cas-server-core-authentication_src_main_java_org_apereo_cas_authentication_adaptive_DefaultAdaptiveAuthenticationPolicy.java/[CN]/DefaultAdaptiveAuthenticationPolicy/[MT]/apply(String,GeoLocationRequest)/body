{
  final ClientInfo clientInfo=ClientInfoHolder.getClientInfo();
  final String clientIp=clientInfo.getClientIpAddress();
  LOGGER.debug("Located client IP address as {}",clientIp);
  if (isClientIpAddressRejected(clientIp)) {
    LOGGER.warn("Client IP {} is rejected for authentication",clientIp);
    return false;
  }
  if (isUserAgentRejected(userAgent)) {
    LOGGER.warn("User agent {} is rejected for authentication",userAgent);
    return false;
  }
  LOGGER.debug("User agent {} is authorized to proceed",userAgent);
  if (this.geoLocationService != null && location != null && StringUtils.isNotBlank(clientIp) && StringUtils.isNotBlank(this.adaptiveAuthenticationProperties.getRejectCountries())) {
    final GeoLocationResponse loc=this.geoLocationService.locate(clientIp,location);
    if (loc != null) {
      LOGGER.debug("Determined geolocation to be {}",loc);
      if (isGeoLocationCountryRejected(loc)) {
        LOGGER.warn("Client {} is rejected for authentication",clientIp);
        return false;
      }
    }
 else {
      LOGGER.info("Could not determine geolocation for {}",clientIp);
    }
  }
  LOGGER.debug("Adaptive authentication policy has authorized client {} to proceed.",clientIp);
  return true;
}
