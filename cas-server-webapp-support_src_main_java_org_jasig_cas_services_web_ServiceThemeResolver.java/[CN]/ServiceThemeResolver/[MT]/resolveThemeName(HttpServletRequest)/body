{
  if (this.servicesManager == null) {
    return getDefaultThemeName();
  }
  final String userAgent=request.getHeader("User-Agent");
  if (StringUtils.isBlank(userAgent)) {
    return getDefaultThemeName();
  }
  for (  final Map.Entry<Pattern,String> entry : this.overrides.entrySet()) {
    if (entry.getKey().matcher(userAgent).matches()) {
      request.setAttribute("isMobile","true");
      request.setAttribute("browserType",entry.getValue());
      break;
    }
  }
  final RequestContext context=RequestContextHolder.getRequestContext();
  final Service service=WebUtils.getService(context);
  if (service != null) {
    final RegisteredService rService=this.servicesManager.findServiceBy(service);
    if (rService != null && rService.getAuthorizationStrategy().isServiceAccessAllowed() && StringUtils.isNotBlank(rService.getTheme())) {
      LOGGER.debug("Service [{}] is configured to use a custom theme [{}]",rService,rService.getTheme());
      final CasThemeResourceBundleMessageSource messageSource=new CasThemeResourceBundleMessageSource();
      messageSource.setBasename(rService.getTheme());
      if (messageSource.doGetBundle(rService.getTheme(),request.getLocale()) != null) {
        LOGGER.debug("Found custom theme [{}] for service [{}]",rService.getTheme(),rService);
        return rService.getTheme();
      }
 else {
        LOGGER.warn("Custom theme {} for service {} cannot be located. Falling back to default theme...",rService.getTheme(),rService);
      }
    }
  }
  return getDefaultThemeName();
}
