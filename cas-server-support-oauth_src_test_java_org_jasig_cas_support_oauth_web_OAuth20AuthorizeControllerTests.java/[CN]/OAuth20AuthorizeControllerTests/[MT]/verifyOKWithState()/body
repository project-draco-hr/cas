{
  clearAllServices();
  final MockHttpServletRequest mockRequest=new MockHttpServletRequest("GET",CONTEXT + OAuthConstants.AUTHORIZE_URL);
  mockRequest.setParameter(OAuthConstants.CLIENT_ID,CLIENT_ID);
  mockRequest.setParameter(OAuthConstants.REDIRECT_URI,REDIRECT_URI);
  mockRequest.setParameter(OAuthConstants.STATE,STATE);
  mockRequest.setServerName(CAS_SERVER);
  mockRequest.setServerPort(CAS_PORT);
  mockRequest.setScheme(CAS_SCHEME);
  final MockHttpServletResponse mockResponse=new MockHttpServletResponse();
  ((OAuth20WrapperController)oauth20WrapperController).getServicesManager().save(getRegisteredService(REDIRECT_URI,SERVICE_NAME));
  final Controller c=((OAuth20WrapperController)oauth20WrapperController).getAuthorizeController();
  ((OAuth20AuthorizeController)c).setLoginUrl(CAS_URL);
  final ModelAndView modelAndView=oauth20WrapperController.handleRequest(mockRequest,mockResponse);
  final HttpSession session=mockRequest.getSession();
  assertEquals(REDIRECT_URI,session.getAttribute(OAuthConstants.OAUTH20_CALLBACKURL));
  assertEquals(SERVICE_NAME,session.getAttribute(OAuthConstants.OAUTH20_SERVICE_NAME));
  assertEquals(STATE,session.getAttribute(OAuthConstants.OAUTH20_STATE));
  final View view=modelAndView.getView();
  assertTrue(view instanceof RedirectView);
  final RedirectView redirectView=(RedirectView)view;
  final MockHttpServletRequest reqSvc=new MockHttpServletRequest("GET",CONTEXT + OAuthConstants.CALLBACK_AUTHORIZE_URL);
  reqSvc.setServerName(CAS_SERVER);
  reqSvc.setServerPort(CAS_PORT);
  reqSvc.setScheme(CAS_SCHEME);
  final URL url=new URL(OAuthUtils.addParameter(CAS_URL,"service",reqSvc.getRequestURL().toString()));
  final URL url2=new URL(redirectView.getUrl());
  assertEquals(url,url2);
}
