{
  final MockHttpServletRequest mockRequest=new MockHttpServletRequest("GET",CONTEXT + OAuthConstants.AUTHORIZE_URL);
  mockRequest.setParameter(OAuthConstants.CLIENT_ID,CLIENT_ID);
  mockRequest.setParameter(OAuthConstants.REDIRECT_URI,REDIRECT_URI);
  mockRequest.setParameter(OAuthConstants.STATE,STATE);
  mockRequest.setServerName(CAS_SERVER);
  mockRequest.setServerPort(CAS_PORT);
  mockRequest.setScheme(CAS_SCHEME);
  final MockHttpServletResponse mockResponse=new MockHttpServletResponse();
  final ServicesManager servicesManager=mock(ServicesManager.class);
  final RegisteredServiceImpl registeredServiceImpl=new RegisteredServiceImpl();
  registeredServiceImpl.setName(CLIENT_ID);
  registeredServiceImpl.setServiceId(REDIRECT_URI);
  registeredServiceImpl.setTheme(SERVICE_NAME);
  final List<RegisteredService> services=new ArrayList<RegisteredService>();
  services.add(registeredServiceImpl);
  when(servicesManager.getAllServices()).thenReturn(services);
  final OAuth20WrapperController oauth20WrapperController=new OAuth20WrapperController();
  oauth20WrapperController.setLoginUrl(CAS_URL);
  oauth20WrapperController.setServicesManager(servicesManager);
  oauth20WrapperController.afterPropertiesSet();
  final ModelAndView modelAndView=oauth20WrapperController.handleRequest(mockRequest,mockResponse);
  final HttpSession session=mockRequest.getSession();
  assertEquals(REDIRECT_URI,session.getAttribute(OAuthConstants.OAUTH20_CALLBACKURL));
  assertEquals(SERVICE_NAME,session.getAttribute(OAuthConstants.OAUTH20_SERVICE_NAME));
  assertEquals(STATE,session.getAttribute(OAuthConstants.OAUTH20_STATE));
  final View view=modelAndView.getView();
  assertTrue(view instanceof RedirectView);
  final RedirectView redirectView=(RedirectView)view;
  assertEquals(OAuthUtils.addParameter(CAS_URL,"service",CAS_URL + CONTEXT + OAuthConstants.CALLBACK_AUTHORIZE_URL),redirectView.getUrl());
}
