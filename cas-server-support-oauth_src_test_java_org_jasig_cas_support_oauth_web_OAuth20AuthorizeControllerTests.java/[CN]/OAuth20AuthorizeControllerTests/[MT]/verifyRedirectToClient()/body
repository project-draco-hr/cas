{
  clearAllServices();
  final MockHttpServletRequest mockRequest=new MockHttpServletRequest("GET",CONTEXT + OAuthConstants.AUTHORIZE_URL);
  mockRequest.setParameter(OAuthConstants.CLIENT_ID,CLIENT_ID);
  mockRequest.setParameter(OAuthConstants.REDIRECT_URI,REDIRECT_URI);
  mockRequest.setServerName(CAS_SERVER);
  mockRequest.setServerPort(CAS_PORT);
  mockRequest.setScheme(CAS_SCHEME);
  final MockHttpServletResponse mockResponse=new MockHttpServletResponse();
  OAuthRegisteredService service=getRegisteredService(REDIRECT_URI,SERVICE_NAME);
  service.setBypassApprovalPrompt(true);
  oAuth20AuthorizeController.getServicesManager().save(service);
  final CasProfile profile=new CasProfile();
  profile.setId(ID);
  final Map<String,Object> attributes=new HashMap<>();
  attributes.put(FIRST_NAME_ATTRIBUTE,FIRST_NAME);
  profile.addAttributes(attributes);
  MockHttpSession session=new MockHttpSession();
  mockRequest.setSession(session);
  session.putValue(Pac4jConstants.USER_PROFILE,profile);
  final ModelAndView modelAndView=oAuth20AuthorizeController.handleRequest(mockRequest,mockResponse);
  final View view=modelAndView.getView();
  assertTrue(view instanceof RedirectView);
  final RedirectView redirectView=(RedirectView)view;
  final String redirectUrl=redirectView.getUrl();
  assertTrue(redirectUrl.startsWith(REDIRECT_URI + "?code=COD-"));
  final String code=StringUtils.substringAfter(redirectUrl,"?code=");
  OAuthCodeImpl oAuthCode=(OAuthCodeImpl)oAuth20AuthorizeController.getTicketRegistry().getTicket(code);
  assertNotNull(oAuthCode);
  final Principal principal=oAuthCode.getAuthentication().getPrincipal();
  assertEquals(ID,principal.getId());
  final Map<String,Object> principalAttributes=principal.getAttributes();
  assertEquals(1,principalAttributes.size());
  assertEquals(FIRST_NAME,principalAttributes.get(FIRST_NAME_ATTRIBUTE));
}
