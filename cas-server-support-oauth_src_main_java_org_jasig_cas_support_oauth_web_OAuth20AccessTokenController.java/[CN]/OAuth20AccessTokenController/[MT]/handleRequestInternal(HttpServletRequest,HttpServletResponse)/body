{
  final String redirectUri=request.getParameter(OAuthConstants.REDIRECT_URI);
  LOGGER.debug("{} : {}",OAuthConstants.REDIRECT_URI,redirectUri);
  final String clientId=request.getParameter(OAuthConstants.CLIENT_ID);
  LOGGER.debug("{} : {}",OAuthConstants.CLIENT_ID,clientId);
  final String clientSecret=request.getParameter(OAuthConstants.CLIENT_SECRET);
  final String code=request.getParameter(OAuthConstants.CODE);
  LOGGER.debug("{} : {}",OAuthConstants.CODE,code);
  final boolean isVerified=verifyAccessTokenRequest(response,redirectUri,clientId,clientSecret,code);
  if (!isVerified) {
    return OAuthUtils.writeTextError(response,OAuthConstants.INVALID_REQUEST,HttpStatus.SC_BAD_REQUEST);
  }
  final ServiceTicket serviceTicket=(ServiceTicket)ticketRegistry.getTicket(code);
  if (serviceTicket == null || serviceTicket.isExpired()) {
    LOGGER.error("Code expired : {}",code);
    return OAuthUtils.writeTextError(response,OAuthConstants.INVALID_GRANT,HttpStatus.SC_BAD_REQUEST);
  }
  final TicketGrantingTicket ticketGrantingTicket=serviceTicket.getGrantingTicket();
  ticketRegistry.deleteTicket(serviceTicket.getId());
  response.setContentType("text/plain");
  final int expires=(int)(timeout - TimeUnit.MILLISECONDS.toSeconds(System.currentTimeMillis() - ticketGrantingTicket.getCreationTime()));
  final String text=String.format("%s=%s&%s=%s",OAuthConstants.ACCESS_TOKEN,ticketGrantingTicket.getId(),OAuthConstants.EXPIRES,expires);
  LOGGER.debug("text : {}",text);
  return OAuthUtils.writeText(response,text,HttpStatus.SC_OK);
}
