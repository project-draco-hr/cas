{
  String redirectUri=request.getParameter(OAuthConstants.REDIRECT_URI);
  logger.debug("redirect_uri : {}",redirectUri);
  String clientId=request.getParameter(OAuthConstants.CLIENT_ID);
  logger.debug("clientId : {}",clientId);
  String clientSecret=request.getParameter(OAuthConstants.CLIENT_SECRET);
  logger.debug("clientSecret : {}",clientSecret);
  String code=request.getParameter(OAuthConstants.CODE);
  logger.debug("code : {}",clientSecret);
  if (StringUtils.isBlank(clientId)) {
    logger.error("missing clientId");
    return OAuthUtils.writeTextError(response,OAuthConstants.MISSING_CLIENT_ID);
  }
  if (StringUtils.isBlank(redirectUri)) {
    logger.error("missing redirectUri");
    return OAuthUtils.writeTextError(response,OAuthConstants.MISSING_REDIRECT_URI);
  }
  if (StringUtils.isBlank(clientSecret)) {
    logger.error("missing clientSecret");
    return OAuthUtils.writeTextError(response,OAuthConstants.MISSING_CLIENT_SECRET);
  }
  if (StringUtils.isBlank(code)) {
    logger.error("missing code");
    return OAuthUtils.writeTextError(response,OAuthConstants.MISSING_CODE);
  }
  Collection<RegisteredService> services=servicesManager.getAllServices();
  RegisteredService service=null;
  for (  RegisteredService aService : services) {
    if (StringUtils.equals(aService.getName(),clientId)) {
      service=aService;
      break;
    }
  }
  if (service == null) {
    logger.error("Unknown clientId : {}",clientId);
    return OAuthUtils.writeTextError(response,OAuthConstants.UNKNOWN_CLIENT_ID);
  }
  String serviceId=service.getServiceId();
  if (!StringUtils.startsWith(redirectUri,serviceId)) {
    logger.error("Unsupported redirectUri : {} for serviceId : {}",redirectUri,serviceId);
    return OAuthUtils.writeTextError(response,OAuthConstants.UNSUPPORTED_REDIRECT_URI);
  }
  String serviceDescription=service.getDescription();
  if (!StringUtils.equals(serviceDescription,clientSecret)) {
    logger.error("Wrong client secret : {} for service description : {}",clientSecret,serviceDescription);
    return OAuthUtils.writeTextError(response,OAuthConstants.UNKNOWN_CLIENT_ID);
  }
  ServiceTicketImpl serviceTicket=(ServiceTicketImpl)ticketRegistry.getTicket(code);
  if (serviceTicket == null || serviceTicket.isExpired()) {
    logger.error("Code expired : {}",code);
    return OAuthUtils.writeTextError(response,OAuthConstants.CODE_EXPIRED);
  }
  TicketGrantingTicketImpl ticketGrantingTicketImpl=(TicketGrantingTicketImpl)serviceTicket.getGrantingTicket();
  ticketRegistry.deleteTicket(serviceTicket.getId());
  int expires=(int)(timeout - ((System.currentTimeMillis() - ticketGrantingTicketImpl.getLastTimeUsed()) / 1000));
  String text="access_token=" + ticketGrantingTicketImpl.getId() + "&expires="+ expires;
  logger.debug("text : {}",text);
  return OAuthUtils.writeText(response,text);
}
