{
  response.setContentType("text/plain");
  if (!verifyAccessTokenRequest(request,response)) {
    return OAuthUtils.writeTextError(response,OAuthConstants.INVALID_REQUEST);
  }
  final String grantType=request.getParameter(OAuthConstants.GRANT_TYPE);
  final Service service;
  final Authentication authentication;
  final boolean generateRefreshToken;
  if (isGrantType(grantType,OAuthGrantType.AUTHORIZATION_CODE) || isGrantType(grantType,OAuthGrantType.REFRESH_TOKEN)) {
    final J2EContext context=new J2EContext(request,response);
    final ProfileManager manager=new ProfileManager(context);
    final UserProfile profile=manager.get(true);
    final String clientId=profile.getId();
    final OAuthRegisteredService registeredService=OAuthUtils.getRegisteredOAuthService(this.servicesManager,clientId);
    generateRefreshToken=registeredService.isGenerateRefreshToken() && isGrantType(grantType,OAuthGrantType.AUTHORIZATION_CODE);
    final String parameterName;
    if (isGrantType(grantType,OAuthGrantType.AUTHORIZATION_CODE)) {
      parameterName=OAuthConstants.CODE;
    }
 else {
      parameterName=OAuthConstants.REFRESH_TOKEN;
    }
    final OAuthToken token=getToken(request,parameterName);
    if (token == null) {
      return OAuthUtils.writeTextError(response,OAuthConstants.INVALID_GRANT);
    }
    service=token.getService();
    authentication=token.getAuthentication();
  }
 else {
    final String clientId=request.getParameter(OAuthConstants.CLIENT_ID);
    final OAuthRegisteredService registeredService=OAuthUtils.getRegisteredOAuthService(this.servicesManager,clientId);
    generateRefreshToken=registeredService.isGenerateRefreshToken();
    final J2EContext context=new J2EContext(request,response);
    final ProfileManager manager=new ProfileManager(context);
    final OAuthUserProfile profile=(OAuthUserProfile)manager.get(true);
    service=createService(registeredService);
    authentication=createAuthentication(profile);
  }
  final AccessToken accessToken=generateAccessToken(service,authentication);
  String text=String.format("%s=%s&%s=%s",OAuthConstants.ACCESS_TOKEN,accessToken.getId(),OAuthConstants.EXPIRES,timeout);
  if (generateRefreshToken) {
    final RefreshToken refreshToken=refreshTokenFactory.create(service,authentication);
    ticketRegistry.addTicket(refreshToken);
    text+="&" + OAuthConstants.REFRESH_TOKEN + "="+ refreshToken.getId();
  }
  logger.debug("OAuth access token response: {}",text);
  return OAuthUtils.writeText(response,text,HttpStatus.SC_OK);
}
