{
  response.setContentType("text/plain");
  if (!verifyAccessTokenRequest(request,response)) {
    logger.error("Access token request verification fails");
    return OAuthUtils.writeTextError(response,OAuthConstants.INVALID_REQUEST);
  }
  final String grantType=request.getParameter(OAuthConstants.GRANT_TYPE);
  final Service service;
  final Authentication authentication;
  final boolean generateRefreshToken;
  final boolean jsonFormat;
  if (isGrantType(grantType,OAuthGrantType.AUTHORIZATION_CODE) || isGrantType(grantType,OAuthGrantType.REFRESH_TOKEN)) {
    final J2EContext context=new J2EContext(request,response);
    final ProfileManager manager=new ProfileManager(context);
    final UserProfile profile=manager.get(true);
    final String clientId=profile.getId();
    final OAuthRegisteredService registeredService=OAuthUtils.getRegisteredOAuthService(this.servicesManager,clientId);
    generateRefreshToken=registeredService.isGenerateRefreshToken() && isGrantType(grantType,OAuthGrantType.AUTHORIZATION_CODE);
    jsonFormat=registeredService.isJsonFormat();
    final String parameterName;
    if (isGrantType(grantType,OAuthGrantType.AUTHORIZATION_CODE)) {
      parameterName=OAuthConstants.CODE;
    }
 else {
      parameterName=OAuthConstants.REFRESH_TOKEN;
    }
    final OAuthToken token=getToken(request,parameterName);
    if (token == null) {
      logger.error("No token found for authorization_code or refresh_token grant types");
      return OAuthUtils.writeTextError(response,OAuthConstants.INVALID_GRANT);
    }
    service=token.getService();
    authentication=token.getAuthentication();
  }
 else {
    final String clientId=request.getParameter(OAuthConstants.CLIENT_ID);
    final OAuthRegisteredService registeredService=OAuthUtils.getRegisteredOAuthService(this.servicesManager,clientId);
    generateRefreshToken=registeredService.isGenerateRefreshToken();
    jsonFormat=registeredService.isJsonFormat();
    final J2EContext context=new J2EContext(request,response);
    final ProfileManager manager=new ProfileManager(context);
    final OAuthUserProfile profile=(OAuthUserProfile)manager.get(true);
    service=createService(registeredService);
    authentication=createAuthentication(profile,registeredService);
    try {
      RegisteredServiceAccessStrategyUtils.ensurePrincipalAccessIsAllowedForService(service,registeredService,authentication);
    }
 catch (    final UnauthorizedServiceException|PrincipalException e) {
      logger.error(e.getMessage(),e);
      return OAuthUtils.writeTextError(response,OAuthConstants.INVALID_GRANT);
    }
  }
  final AccessToken accessToken=generateAccessToken(service,authentication);
  final String accessTokenId=accessToken.getId();
  String refreshTokenId=null;
  if (generateRefreshToken) {
    final RefreshToken refreshToken=this.refreshTokenFactory.create(service,authentication);
    this.ticketRegistry.addTicket(refreshToken);
    refreshTokenId=refreshToken.getId();
  }
  logger.debug("access token: {} / timeout: {} / refresh token: {}",accessTokenId,this.timeout,refreshTokenId);
  if (jsonFormat) {
    response.setContentType("application/json");
    try (final JsonGenerator jsonGenerator=this.jsonFactory.createGenerator(response.getWriter())){
      jsonGenerator.writeStartObject();
      jsonGenerator.writeStringField(OAuthConstants.ACCESS_TOKEN,accessTokenId);
      jsonGenerator.writeNumberField(OAuthConstants.EXPIRES,this.timeout);
      if (CommonHelper.isNotBlank(refreshTokenId)) {
        jsonGenerator.writeStringField(OAuthConstants.REFRESH_TOKEN,refreshTokenId);
      }
      jsonGenerator.writeEndObject();
    }
     return null;
  }
 else {
    String text=String.format("%s=%s&%s=%s",OAuthConstants.ACCESS_TOKEN,accessTokenId,OAuthConstants.EXPIRES,this.timeout);
    if (CommonHelper.isNotBlank(refreshTokenId)) {
      text+='&' + OAuthConstants.REFRESH_TOKEN + '='+ refreshTokenId;
    }
    return OAuthUtils.writeText(response,text,HttpStatus.SC_OK);
  }
}
