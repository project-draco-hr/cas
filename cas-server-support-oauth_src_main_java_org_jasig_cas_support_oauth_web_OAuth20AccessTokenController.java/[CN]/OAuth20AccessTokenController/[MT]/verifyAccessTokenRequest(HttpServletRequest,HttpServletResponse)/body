{
  final String grantType=request.getParameter(OAuthConstants.GRANT_TYPE);
  if (!checkGrantTypes(grantType,OAuthGrantType.AUTHORIZATION_CODE,OAuthGrantType.PASSWORD,OAuthGrantType.REFRESH_TOKEN)) {
    return false;
  }
  final J2EContext context=new J2EContext(request,response);
  final ProfileManager manager=new ProfileManager(context);
  final UserProfile profile=manager.get(true);
  if (profile == null) {
    return false;
  }
  if (isGrantType(grantType,OAuthGrantType.AUTHORIZATION_CODE)) {
    final String clientId=profile.getId();
    final String redirectUri=request.getParameter(OAuthConstants.REDIRECT_URI);
    final OAuthRegisteredService registeredService=OAuthUtils.getRegisteredOAuthService(this.servicesManager,clientId);
    return profile instanceof OAuthClientProfile && this.validator.checkParameterExist(request,OAuthConstants.REDIRECT_URI) && this.validator.checkParameterExist(request,OAuthConstants.CODE)&& this.validator.checkCallbackValid(registeredService,redirectUri);
  }
 else   if (isGrantType(grantType,OAuthGrantType.REFRESH_TOKEN)) {
    return profile instanceof OAuthClientProfile && this.validator.checkParameterExist(request,OAuthConstants.REFRESH_TOKEN);
  }
 else {
    final String clientId=request.getParameter(OAuthConstants.CLIENT_ID);
    final OAuthRegisteredService registeredService=OAuthUtils.getRegisteredOAuthService(this.servicesManager,clientId);
    return profile instanceof OAuthUserProfile && this.validator.checkParameterExist(request,OAuthConstants.CLIENT_ID) && this.validator.checkServiceValid(registeredService);
  }
}
