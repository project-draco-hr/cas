{
  if (getRequiredAttributes().isEmpty()) {
    logger.debug("No required attributes are specified");
    return true;
  }
  if (principalAttributes.isEmpty()) {
    logger.warn("No principal attributes are found to satisfy attribute requirements for [{}]",service.getId());
    return false;
  }
  if (principalAttributes.size() < getRequiredAttributes().size()) {
    logger.warn("The size of the principal attributes that are [{}] does not match requirements, " + "which means the principal is not carrying enough data to grant authorization",principalAttributes);
    return false;
  }
  logger.debug("These required attributes [{}] are examined against [{}] before service [{}] can proceed.",getRequiredAttributes(),principalAttributes,service.getId());
  final Sets.SetView<String> difference=Sets.intersection(getRequiredAttributes().keySet(),principalAttributes.keySet());
  final Set<String> copy=difference.immutableCopy();
  if (isRequireAllAttributes() && copy.size() < getRequiredAttributes().size()) {
    logger.warn("Not all required attributes are available to the principal");
    return false;
  }
  for (  final String key : copy) {
    final Set<?> requiredValues=getRequiredAttributes().get(key);
    Set<?> availableValues=null;
    final Object objVal=principalAttributes.get(key);
    if (objVal instanceof Collection) {
      final Collection valCol=(Collection)objVal;
      availableValues=Sets.newHashSet(valCol.toArray());
    }
 else {
      availableValues=Collections.singleton(objVal);
    }
    final Sets.SetView<?> differenceInValues=Sets.intersection(availableValues,requiredValues);
    if (differenceInValues.size() > 0) {
      logger.info("Principal is authorized to access service [{}]",service.getId());
      return true;
    }
  }
  logger.info("Principal is denied access to service [{}]",service.getId());
  return false;
}
