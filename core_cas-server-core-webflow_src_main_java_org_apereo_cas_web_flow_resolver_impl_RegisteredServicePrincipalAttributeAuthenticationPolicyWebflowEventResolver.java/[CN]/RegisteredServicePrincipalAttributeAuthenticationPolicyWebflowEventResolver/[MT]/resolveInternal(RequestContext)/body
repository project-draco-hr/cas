{
  final RegisteredService service=WebUtils.getRegisteredService(context);
  final Authentication authentication=WebUtils.getAuthentication(context);
  final RegisteredServiceMultifactorPolicy policy=service != null ? service.getMultifactorPolicy() : null;
  if (policy == null || service.getMultifactorPolicy().getMultifactorAuthenticationProviders().isEmpty()) {
    logger.debug("Authentication policy is absent or does not contain any multifactor authentication providers");
    return null;
  }
  if (StringUtils.isBlank(policy.getPrincipalAttributeNameTrigger()) || StringUtils.isBlank(policy.getPrincipalAttributeValueToMatch())) {
    logger.debug("Authentication policy does not define a principal attribute and/or value to trigger multifactor authentication");
    return null;
  }
  final Principal principal=authentication.getPrincipal();
  final Set<MultifactorAuthenticationProvider> providers=getAuthenticationProviderForService(service);
  return resolveEventViaPrincipalAttribute(principal,org.springframework.util.StringUtils.commaDelimitedListToSet(policy.getPrincipalAttributeNameTrigger()),service,context,providers,Predicates.containsPattern(policy.getPrincipalAttributeValueToMatch()));
}
