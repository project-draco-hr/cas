{
  final RegisteredServiceAttributeReleasePolicyEditBean attrRelease=data.getAttrRelease();
  final RegisteredServiceAttributeReleasePolicyStrategyEditBean policyBean=attrRelease.getAttrPolicy();
  final String policyType=policyBean.getType();
  AbstractRegisteredServiceAttributeReleasePolicy policy;
  if (StringUtils.equalsIgnoreCase(policyType,AbstractRegisteredServiceAttributeReleasePolicyStrategyBean.Types.ALL.toString())) {
    policy=new ReturnAllAttributeReleasePolicy();
  }
 else   if (StringUtils.equalsIgnoreCase(policyType,AbstractRegisteredServiceAttributeReleasePolicyStrategyBean.Types.ALLOWED.toString())) {
    policy=new ReturnAllowedAttributeReleasePolicy((List)policyBean.getAttributes());
  }
 else   if (StringUtils.equalsIgnoreCase(policyType,AbstractRegisteredServiceAttributeReleasePolicyStrategyBean.Types.MAPPED.toString())) {
    policy=new ReturnMappedAttributeReleasePolicy((Map)policyBean.getAttributes());
  }
 else {
    policy=new ReturnAllowedAttributeReleasePolicy();
  }
  policy.setAuthorizedToReleaseCredentialPassword(attrRelease.isReleasePassword());
  policy.setAuthorizedToReleaseProxyGrantingTicket(attrRelease.isReleaseTicket());
  final RegisteredServiceAttributeFilter filter=attributeFilterMapper.toAttributeFilter(data);
  if (filter != null) {
    policy.setAttributeFilter(filter);
  }
  final PrincipalAttributesRepository principalRepository=principalAttributesRepositoryMapper.toPrincipalRepository(data);
  if (principalRepository != null) {
    policy.setPrincipalAttributesRepository(principalRepository);
  }
  return policy;
}
