{
  final RegisteredServiceAttributeReleasePolicyStrategyEditBean policyBean=this.attrRelease.getAttrPolicy();
  final String policyType=policyBean.getType();
  AbstractAttributeReleasePolicy policy=null;
  if (StringUtils.equalsIgnoreCase(policyType,AbstractRegisteredServiceAttributeReleasePolicyStrategyBean.Types.ALL.toString())) {
    policy=new ReturnAllAttributeReleasePolicy();
  }
 else   if (StringUtils.equalsIgnoreCase(policyType,AbstractRegisteredServiceAttributeReleasePolicyStrategyBean.Types.ALLOWED.toString())) {
    policy=new ReturnAllowedAttributeReleasePolicy((List)policyBean.getAttributes());
  }
 else   if (StringUtils.equalsIgnoreCase(policyType,AbstractRegisteredServiceAttributeReleasePolicyStrategyBean.Types.MAPPED.toString())) {
    policy=new ReturnMappedAttributeReleasePolicy((Map)policyBean.getAttributes());
  }
 else {
    policy=new ReturnAllowedAttributeReleasePolicy();
  }
  final String filter=this.attrRelease.getAttrFilter();
  if (StringUtils.isNotBlank(filter)) {
    policy.setAttributeFilter(new RegisteredServiceRegexAttributeFilter(filter));
  }
  policy.setAuthorizedToReleaseCredentialPassword(this.attrRelease.isReleasePassword());
  policy.setAuthorizedToReleaseProxyGrantingTicket(this.attrRelease.isReleaseTicket());
  final String attrType=this.attrRelease.getAttrOption();
  if (StringUtils.equalsIgnoreCase(attrType,RegisteredServiceAttributeReleasePolicyEditBean.Types.CACHED.toString())) {
    policy.setPrincipalAttributesRepository(new CachingPrincipalAttributesRepository(dao,TimeUnit.valueOf(this.attrRelease.getCachedTimeUnit().toUpperCase()),this.attrRelease.getCachedExpiration()));
  }
 else   if (StringUtils.equalsIgnoreCase(attrType,RegisteredServiceAttributeReleasePolicyEditBean.Types.DEFAULT.toString())) {
    policy.setPrincipalAttributesRepository(new DefaultPrincipalAttributesRepository());
  }
  regSvc.setAttributeReleasePolicy(policy);
}
