{
  final String uidType=this.userAttrProvider.getType();
  if (StringUtils.equalsIgnoreCase(uidType,RegisteredServiceUsernameAttributeProviderEditBean.Types.DEFAULT.toString())) {
    regSvc.setUsernameAttributeProvider(new DefaultRegisteredServiceUsernameProvider());
  }
 else   if (StringUtils.equalsIgnoreCase(uidType,RegisteredServiceUsernameAttributeProviderEditBean.Types.ANONYMOUS.toString())) {
    final String salt=this.userAttrProvider.getValue();
    if (StringUtils.isNotBlank(salt)) {
      final ShibbolethCompatiblePersistentIdGenerator generator=new ShibbolethCompatiblePersistentIdGenerator(salt);
      regSvc.setUsernameAttributeProvider(new AnonymousRegisteredServiceUsernameAttributeProvider(generator));
    }
 else {
      throw new IllegalArgumentException("Invalid sale value for anonymous ids " + salt);
    }
  }
 else   if (StringUtils.equalsIgnoreCase(uidType,RegisteredServiceUsernameAttributeProviderEditBean.Types.ATTRIBUTE.toString())) {
    final String attr=this.userAttrProvider.getValue();
    if (StringUtils.isNotBlank(attr)) {
      regSvc.setUsernameAttributeProvider(new PrincipalAttributeRegisteredServiceUsernameProvider(attr));
    }
 else {
      throw new IllegalArgumentException("Invalid attribute specified for username");
    }
  }
}
