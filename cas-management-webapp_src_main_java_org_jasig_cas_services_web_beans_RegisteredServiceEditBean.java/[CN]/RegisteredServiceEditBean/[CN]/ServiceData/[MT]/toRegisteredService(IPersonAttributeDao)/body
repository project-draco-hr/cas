{
  try {
    final AbstractRegisteredService regSvc;
    if (StringUtils.equalsIgnoreCase(this.type,RegisteredServiceTypeEditBean.OAUTH_CALLBACK_AUTHZ.toString())) {
      regSvc=new OAuthRegisteredCallbackAuthorizeService();
    }
 else     if (StringUtils.equalsIgnoreCase(this.type,RegisteredServiceTypeEditBean.OAUTH.toString())) {
      regSvc=new OAuthRegisteredService();
      final RegisteredServiceOAuthTypeEditBean oauthBean=this.oauth;
      ((OAuthRegisteredService)regSvc).setClientId(oauthBean.getClientId());
      ((OAuthRegisteredService)regSvc).setClientSecret(oauthBean.getClientSecret());
      ((OAuthRegisteredService)regSvc).setBypassApprovalPrompt(oauthBean.isBypass());
    }
 else {
      regSvc=determineServiceTypeByPattern(this.serviceId);
    }
    if (this.assignedId <= 0) {
      regSvc.setId(RegisteredService.INITIAL_IDENTIFIER_VALUE);
    }
 else {
      regSvc.setId(this.assignedId);
    }
    regSvc.setServiceId(this.serviceId);
    regSvc.setName(this.name);
    regSvc.setDescription(this.description);
    if (StringUtils.isNotBlank(this.logoUrl)) {
      regSvc.setLogo(new URL(this.logoUrl));
    }
    regSvc.setTheme(this.theme);
    regSvc.setEvaluationOrder(this.evalOrder);
    regSvc.setRequiredHandlers(this.requiredHandlers);
    convertLogoutTypesToService(regSvc);
    if (StringUtils.isNotBlank(this.logoutUrl)) {
      regSvc.setLogoutUrl(new URL(this.logoutUrl));
    }
    convertAccessStrategyToService(regSvc);
    convertProxyPolicyToService(regSvc);
    convertUsernameAttributeToService(regSvc);
    if (this.publicKey != null && this.publicKey.isValid()) {
      final RegisteredServicePublicKey publicKey=new RegisteredServicePublicKeyImpl(this.publicKey.getLocation(),this.publicKey.getAlgorithm());
      regSvc.setPublicKey(publicKey);
    }
    final RegisteredServiceAttributeReleasePolicyStrategyEditBean policyBean=this.attrRelease.getAttrPolicy();
    final String policyType=policyBean.getType();
    AbstractAttributeReleasePolicy policy=null;
    if (StringUtils.equalsIgnoreCase(policyType,AbstractRegisteredServiceAttributeReleasePolicyStrategyBean.Types.ALL.toString())) {
      policy=new ReturnAllAttributeReleasePolicy();
    }
 else     if (StringUtils.equalsIgnoreCase(policyType,AbstractRegisteredServiceAttributeReleasePolicyStrategyBean.Types.ALLOWED.toString())) {
      policy=new ReturnAllowedAttributeReleasePolicy((List)policyBean.getAttributes());
    }
 else     if (StringUtils.equalsIgnoreCase(policyType,AbstractRegisteredServiceAttributeReleasePolicyStrategyBean.Types.MAPPED.toString())) {
      policy=new ReturnMappedAttributeReleasePolicy((Map)policyBean.getAttributes());
    }
 else {
      policy=new ReturnAllowedAttributeReleasePolicy();
    }
    final String filter=this.attrRelease.getAttrFilter();
    if (StringUtils.isNotBlank(filter)) {
      policy.setAttributeFilter(new RegisteredServiceRegexAttributeFilter(filter));
    }
    policy.setAuthorizedToReleaseCredentialPassword(this.attrRelease.isReleasePassword());
    policy.setAuthorizedToReleaseProxyGrantingTicket(this.attrRelease.isReleaseTicket());
    final String attrType=this.attrRelease.getAttrOption();
    if (StringUtils.equalsIgnoreCase(attrType,RegisteredServiceAttributeReleasePolicyEditBean.Types.CACHED.toString())) {
      policy.setPrincipalAttributesRepository(new CachingPrincipalAttributesRepository(dao,TimeUnit.valueOf(this.attrRelease.getCachedTimeUnit().toUpperCase()),this.attrRelease.getCachedExpiration()));
    }
 else     if (StringUtils.equalsIgnoreCase(attrType,RegisteredServiceAttributeReleasePolicyEditBean.Types.DEFAULT.toString())) {
      policy.setPrincipalAttributesRepository(new DefaultPrincipalAttributesRepository());
    }
    regSvc.setAttributeReleasePolicy(policy);
    return regSvc;
  }
 catch (  final Exception e) {
    throw new RuntimeException(e);
  }
}
