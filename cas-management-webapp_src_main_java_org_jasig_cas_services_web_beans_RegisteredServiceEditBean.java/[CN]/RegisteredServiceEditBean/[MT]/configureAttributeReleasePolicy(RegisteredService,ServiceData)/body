{
  final AbstractAttributeReleasePolicy attrPolicy=(AbstractAttributeReleasePolicy)svc.getAttributeReleasePolicy();
  if (attrPolicy != null) {
    final RegisteredServiceAttributeReleasePolicyEditBean attrPolicyBean=bean.getAttrRelease();
    attrPolicyBean.setReleasePassword(attrPolicy.isAuthorizedToReleaseCredentialPassword());
    attrPolicyBean.setReleaseTicket(attrPolicy.isAuthorizedToReleaseProxyGrantingTicket());
    final AttributeFilter filter=attrPolicy.getAttributeFilter();
    if (filter != null) {
      if (filter instanceof RegisteredServiceRegexAttributeFilter) {
        final RegisteredServiceRegexAttributeFilter regex=(RegisteredServiceRegexAttributeFilter)filter;
        attrPolicyBean.setAttrFilter(regex.getPattern().pattern());
      }
    }
    final PrincipalAttributesRepository pr=attrPolicy.getPrincipalAttributesRepository();
    if (pr instanceof DefaultPrincipalAttributesRepository) {
      attrPolicyBean.setAttrOption(RegisteredServiceAttributeReleasePolicyEditBean.Types.DEFAULT.toString());
    }
 else     if (pr instanceof CachingPrincipalAttributesRepository) {
      attrPolicyBean.setAttrOption(RegisteredServiceAttributeReleasePolicyEditBean.Types.CACHED.toString());
      final CachingPrincipalAttributesRepository cc=(CachingPrincipalAttributesRepository)pr;
      final Duration duration=cc.getDuration();
      attrPolicyBean.setCachedExpiration(duration.getDurationAmount());
      attrPolicyBean.setCachedTimeUnit(duration.getTimeUnit().name());
      final IAttributeMerger merger=cc.getMergingStrategy();
      if (merger != null) {
        if (merger instanceof NoncollidingAttributeAdder) {
          attrPolicyBean.setMergingStrategy(RegisteredServiceAttributeReleasePolicyEditBean.AttributeMergerTypes.ADD.toString());
        }
 else         if (merger instanceof MultivaluedAttributeMerger) {
          attrPolicyBean.setMergingStrategy(RegisteredServiceAttributeReleasePolicyEditBean.AttributeMergerTypes.MULTIVALUED.toString());
        }
 else         if (merger instanceof ReplacingAttributeAdder) {
          attrPolicyBean.setMergingStrategy(RegisteredServiceAttributeReleasePolicyEditBean.AttributeMergerTypes.REPLACE.toString());
        }
      }
    }
    final RegisteredServiceAttributeReleasePolicyStrategyEditBean sBean=attrPolicyBean.getAttrPolicy();
    if (attrPolicy instanceof ReturnAllAttributeReleasePolicy) {
      sBean.setType(AbstractRegisteredServiceAttributeReleasePolicyStrategyBean.Types.ALL.toString());
    }
 else     if (attrPolicy instanceof ReturnAllowedAttributeReleasePolicy) {
      final ReturnAllowedAttributeReleasePolicy attrPolicyAllowed=(ReturnAllowedAttributeReleasePolicy)attrPolicy;
      sBean.setType(AbstractRegisteredServiceAttributeReleasePolicyStrategyBean.Types.ALLOWED.toString());
      sBean.setAttributes(attrPolicyAllowed.getAllowedAttributes());
    }
 else     if (attrPolicy instanceof ReturnMappedAttributeReleasePolicy) {
      final ReturnMappedAttributeReleasePolicy attrPolicyAllowed=(ReturnMappedAttributeReleasePolicy)attrPolicy;
      sBean.setType(AbstractRegisteredServiceAttributeReleasePolicyStrategyBean.Types.MAPPED.toString());
      sBean.setAttributes(attrPolicyAllowed.getAllowedAttributes());
    }
  }
}
