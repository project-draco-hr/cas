{
  final RegisteredServiceEditBean bean=new RegisteredServiceEditBean();
  bean.setAssignedId(svc.getId());
  bean.setServiceId(svc.getServiceId());
  bean.setName(svc.getName());
  bean.setDescription(svc.getDescription());
  if (svc.getLogo() != null) {
    bean.setLogoUrl(svc.getLogo().toExternalForm());
  }
  final RegisteredServiceAccessStrategy accessStrategy=svc.getAccessStrategy();
  final RegisteredServiceSupportAccessEditBean accessBean=bean.getSupportAccess();
  accessBean.setCasEnabled(accessStrategy.isServiceAccessAllowed());
  accessBean.setSsoEnabled(accessStrategy.isServiceAccessAllowedForSso());
  if (accessStrategy instanceof DefaultRegisteredServiceAccessStrategy) {
    final DefaultRegisteredServiceAccessStrategy def=(DefaultRegisteredServiceAccessStrategy)accessStrategy;
    accessBean.setRequireAll(def.isRequireAllAttributes());
    accessBean.setRequiredAttr(def.getRequiredAttributes());
  }
  if (svc instanceof OAuthRegisteredCallbackAuthorizeService) {
    bean.setType(RegisteredServiceTypeEditBean.OAUTH_CALLBACK_AUTHZ.toString());
  }
  if (svc instanceof OAuthRegisteredService) {
    bean.setType(RegisteredServiceTypeEditBean.OAUTH.toString());
    final OAuthRegisteredService oauth=(OAuthRegisteredService)svc;
    final RegisteredServiceOAuthTypeEditBean oauthBean=bean.getOauth();
    oauthBean.setBypass(oauth.isBypassApprovalPrompt());
    oauthBean.setClientId(oauth.getClientId());
    oauthBean.setClientSecret(oauth.getClientSecret());
  }
  bean.setTheme(svc.getTheme());
  bean.setEvalOrder(svc.getEvaluationOrder());
  final LogoutType logoutType=svc.getLogoutType();
switch (logoutType) {
case BACK_CHANNEL:
    bean.setLogoutType(RegisteredServiceLogoutTypeEditBean.BACK.toString());
  break;
case FRONT_CHANNEL:
bean.setLogoutType(RegisteredServiceLogoutTypeEditBean.FRONT.toString());
break;
default :
bean.setLogoutType(RegisteredServiceLogoutTypeEditBean.NONE.toString());
break;
}
final URL url=svc.getLogoutUrl();
if (url != null) {
bean.setLogoUrl(url.toExternalForm());
}
final RegisteredServiceUsernameAttributeProvider provider=svc.getUsernameAttributeProvider();
final RegisteredServiceUsernameAttributeProviderEditBean uBean=bean.getUserAttrProvider();
if (provider instanceof DefaultRegisteredServiceUsernameProvider) {
uBean.setType(RegisteredServiceUsernameAttributeProviderEditBean.Types.DEFAULT.toString());
}
 else if (provider instanceof AnonymousRegisteredServiceUsernameAttributeProvider) {
final AnonymousRegisteredServiceUsernameAttributeProvider anonymous=(AnonymousRegisteredServiceUsernameAttributeProvider)provider;
uBean.setType(RegisteredServiceUsernameAttributeProviderEditBean.Types.ANONYMOUS.toString());
final PersistentIdGenerator generator=anonymous.getPersistentIdGenerator();
if (generator instanceof ShibbolethCompatiblePersistentIdGenerator) {
final ShibbolethCompatiblePersistentIdGenerator sh=(ShibbolethCompatiblePersistentIdGenerator)generator;
uBean.setValue(new String(sh.getSalt(),Charset.defaultCharset()));
}
}
 else if (provider instanceof PrincipalAttributeRegisteredServiceUsernameProvider) {
final PrincipalAttributeRegisteredServiceUsernameProvider p=(PrincipalAttributeRegisteredServiceUsernameProvider)provider;
uBean.setValue(p.getUsernameAttribute());
}
final RegisteredServicePublicKey key=svc.getPublicKey();
final RegisteredServicePublicKeyEditBean pBean=bean.getPublicKey();
if (key != null) {
pBean.setAlgorithm(key.getAlgorithm());
pBean.setLocation(key.getLocation());
}
final RegisteredServiceProxyPolicy policy=svc.getProxyPolicy();
final RegisteredServiceProxyPolicyBean cBean=bean.getProxyPolicy();
if (policy == null || policy instanceof RefuseRegisteredServiceProxyPolicy) {
cBean.setType(RegisteredServiceProxyPolicyBean.Types.REFUSE.toString());
}
 else if (policy instanceof RegexMatchingRegisteredServiceProxyPolicy) {
final RegexMatchingRegisteredServiceProxyPolicy regex=(RegexMatchingRegisteredServiceProxyPolicy)policy;
cBean.setType(RegisteredServiceProxyPolicyBean.Types.ALLOW.toString());
cBean.setValue(regex.getPattern().toString());
}
final AbstractAttributeReleasePolicy attrPolicy=(AbstractAttributeReleasePolicy)svc.getAttributeReleasePolicy();
if (attrPolicy != null) {
final RegisteredServiceAttributeReleasePolicyEditBean attrPolicyBean=bean.getAttrRelease();
attrPolicyBean.setReleasePassword(attrPolicy.isAuthorizedToReleaseCredentialPassword());
attrPolicyBean.setReleaseTicket(attrPolicy.isAuthorizedToReleaseProxyGrantingTicket());
final AttributeFilter filter=attrPolicy.getAttributeFilter();
if (filter != null) {
if (filter instanceof RegisteredServiceRegexAttributeFilter) {
final RegisteredServiceRegexAttributeFilter regex=(RegisteredServiceRegexAttributeFilter)filter;
attrPolicyBean.setAttrFilter(regex.getPattern().pattern());
}
}
final PrincipalAttributesRepository pr=attrPolicy.getPrincipalAttributesRepository();
if (pr instanceof DefaultPrincipalAttributesRepository) {
attrPolicyBean.setAttrOption(RegisteredServiceAttributeReleasePolicyEditBean.Types.DEFAULT.toString());
}
 else if (pr instanceof CachingPrincipalAttributesRepository) {
attrPolicyBean.setAttrOption(RegisteredServiceAttributeReleasePolicyEditBean.Types.CACHED.toString());
final CachingPrincipalAttributesRepository cc=(CachingPrincipalAttributesRepository)pr;
final Duration duration=cc.getDuration();
attrPolicyBean.setCachedExpiration(duration.getDurationAmount());
attrPolicyBean.setCachedTimeUnit(duration.getTimeUnit().name());
final IAttributeMerger merger=cc.getMergingStrategy();
if (merger != null) {
if (merger instanceof NoncollidingAttributeAdder) {
attrPolicyBean.setMergingStrategy(RegisteredServiceAttributeReleasePolicyEditBean.AttributeMergerTypes.ADD.toString());
}
 else if (merger instanceof MultivaluedAttributeMerger) {
attrPolicyBean.setMergingStrategy(RegisteredServiceAttributeReleasePolicyEditBean.AttributeMergerTypes.MULTIVALUED.toString());
}
 else if (merger instanceof ReplacingAttributeAdder) {
attrPolicyBean.setMergingStrategy(RegisteredServiceAttributeReleasePolicyEditBean.AttributeMergerTypes.REPLACE.toString());
}
}
}
final RegisteredServiceAttributeReleasePolicyStrategyEditBean sBean=attrPolicyBean.getAttrPolicy();
if (attrPolicy instanceof ReturnAllAttributeReleasePolicy) {
sBean.setType(AbstractRegisteredServiceAttributeReleasePolicyStrategyBean.Types.ALL.toString());
}
 else if (attrPolicy instanceof ReturnAllowedAttributeReleasePolicy) {
final ReturnAllowedAttributeReleasePolicy attrPolicyAllowed=(ReturnAllowedAttributeReleasePolicy)attrPolicy;
sBean.setType(AbstractRegisteredServiceAttributeReleasePolicyStrategyBean.Types.ALLOWED.toString());
sBean.setAttributes(attrPolicyAllowed.getAllowedAttributes());
}
 else if (attrPolicy instanceof ReturnMappedAttributeReleasePolicy) {
final ReturnMappedAttributeReleasePolicy attrPolicyAllowed=(ReturnMappedAttributeReleasePolicy)attrPolicy;
sBean.setType(AbstractRegisteredServiceAttributeReleasePolicyStrategyBean.Types.MAPPED.toString());
sBean.setAttributes(attrPolicyAllowed.getAllowedAttributes());
}
}
return bean;
}
