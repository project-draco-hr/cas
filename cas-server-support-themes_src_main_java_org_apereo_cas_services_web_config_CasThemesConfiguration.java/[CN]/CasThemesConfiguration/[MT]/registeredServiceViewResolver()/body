{
  final RegisteredServiceThemeBasedViewResolver r=new RegisteredServiceThemeBasedViewResolver();
  r.setApplicationContext(this.thymeleafViewResolver.getApplicationContext());
  r.setCache(this.properties.isCache());
  if (!r.isCache()) {
    r.setCacheLimit(0);
  }
  r.setCacheUnresolved(this.thymeleafViewResolver.isCacheUnresolved());
  r.setCharacterEncoding(this.thymeleafViewResolver.getCharacterEncoding());
  r.setContentType(this.thymeleafViewResolver.getContentType());
  r.setExcludedViewNames(this.thymeleafViewResolver.getExcludedViewNames());
  r.setOrder(this.thymeleafViewResolver.getOrder());
  r.setRedirectContextRelative(this.thymeleafViewResolver.isRedirectContextRelative());
  r.setRedirectHttp10Compatible(this.thymeleafViewResolver.isRedirectHttp10Compatible());
  r.setStaticVariables(this.thymeleafViewResolver.getStaticVariables());
  final SpringTemplateEngine engine=this.thymeleafViewResolver.getTemplateEngine();
  if (!engine.isInitialized()) {
    final ITemplateWriter writer=new AbstractGeneralTemplateWriter(){
      @Override protected boolean shouldWriteXmlDeclaration(){
        return false;
      }
      @Override protected boolean useXhtmlTagMinimizationRules(){
        return true;
      }
      @Override protected void writeText(      final Arguments arguments,      final Writer writer,      final Text text) throws IOException {
        final String contentString=text.getContent();
        if (!contentString.isEmpty() && contentString.trim().isEmpty()) {
          return;
        }
        super.writeText(arguments,writer,text);
      }
      @Override public void writeNode(      final Arguments arguments,      final Writer writer,      final Node node) throws IOException {
        super.writeNode(arguments,writer,node);
        if (node instanceof Element || node instanceof Comment || node instanceof Macro) {
          writer.write("\n");
        }
      }
    }
;
    final ITemplateModeHandler handler=new TemplateModeHandler("HTML5",new XhtmlAndHtml5NonValidatingSAXTemplateParser(2),writer);
    engine.setTemplateModeHandlers(Collections.singleton(handler));
  }
  r.setTemplateEngine(engine);
  r.setViewNames(this.thymeleafViewResolver.getViewNames());
  r.setServicesManager(this.servicesManager);
  r.setArgumentExtractors(this.argumentExtractors);
  r.setPrefix(this.properties.getPrefix());
  r.setSuffix(this.properties.getSuffix());
  return r;
}
