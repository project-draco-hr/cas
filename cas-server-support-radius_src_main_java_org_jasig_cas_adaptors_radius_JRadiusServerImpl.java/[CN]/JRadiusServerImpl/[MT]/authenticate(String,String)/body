{
  final AttributeList attributeList=new AttributeList();
  attributeList.add(new Attr_UserName(username));
  attributeList.add(new Attr_UserPassword(password));
  if (StringUtils.isNotBlank(this.nasIpAddress)) {
    attributeList.add(new Attr_NASIPAddress(this.nasIpAddress));
  }
  if (StringUtils.isNotBlank(this.nasIpv6Address)) {
    attributeList.add(new Attr_NASIPv6Address(this.nasIpv6Address));
  }
  if (this.nasPort != -1) {
    attributeList.add(new Attr_NASPort(this.nasPort));
  }
  if (this.nasPortId != -1) {
    attributeList.add(new Attr_NASPortId(this.nasPortId));
  }
  if (this.nasIdentifier != -1) {
    attributeList.add(new Attr_NASIdentifier(this.nasIdentifier));
  }
  if (this.nasRealPort != -1) {
    attributeList.add(new Attr_NASRealPort(this.nasRealPort));
  }
  if (this.nasPortType != -1) {
    attributeList.add(new Attr_NASPortType(this.nasPortType));
  }
  RadiusClient client=null;
  try {
    client=this.radiusClientFactory.newInstance();
    final AccessRequest request=new AccessRequest(client,attributeList);
    final RadiusPacket response=client.authenticate(request,RadiusClient.getAuthProtocol(this.protocol.getName()),this.retries);
    LOGGER.debug("RADIUS response from {}: {}",client.getRemoteInetAddress().getCanonicalHostName(),response.getClass().getName());
    if (response instanceof AccessAccept) {
      final AccessAccept acceptedResponse=(AccessAccept)response;
      return new RadiusResponse(acceptedResponse.getCode(),acceptedResponse.getIdentifier(),acceptedResponse.getAttributes().getAttributeList());
    }
  }
 catch (  final Exception e) {
    throw new PreventedException(e);
  }
 finally {
    if (client != null) {
      client.close();
    }
  }
  return null;
}
