{
  final AttributeList attributeList=new AttributeList();
  attributeList.add(new Attr_UserName(username));
  attributeList.add(new Attr_UserPassword(password));
  final RadiusClient client=this.radiusClientFactory.newInstance();
  try {
    final AccessRequest request=new AccessRequest(client,attributeList);
    final RadiusPacket response=client.authenticate(request,RadiusClient.getAuthProtocol(this.protocol.name()),this.retries);
    LOGGER.debug("RADIUS response from {}: {}",client.getRemoteInetAddress().getCanonicalHostName(),response.getClass().getName());
    if (response instanceof AccessAccept) {
      return true;
    }
  }
 catch (  final UnknownAttributeException e) {
    throw new PreventedException(e);
  }
catch (  final RadiusException e) {
    throw new PreventedException(e);
  }
 finally {
    client.close();
  }
  return false;
}
