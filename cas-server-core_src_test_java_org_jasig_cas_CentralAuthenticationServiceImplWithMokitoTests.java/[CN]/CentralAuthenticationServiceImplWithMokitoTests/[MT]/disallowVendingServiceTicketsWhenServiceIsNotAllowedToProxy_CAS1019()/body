{
  CentralAuthenticationServiceImpl cas=new CentralAuthenticationServiceImpl();
  ServiceTicket stMock=mock(ServiceTicket.class);
  when(stMock.getId()).thenReturn("st-id");
  TicketGrantingTicket tgtMock=mock(TicketGrantingTicket.class);
  when(tgtMock.isExpired()).thenReturn(false);
  when(tgtMock.grantServiceTicket(anyString(),any(Service.class),any(ExpirationPolicy.class),anyBoolean())).thenReturn(stMock);
  List<Authentication> authnListMock=mock(List.class);
  when(authnListMock.size()).thenReturn(2);
  when(tgtMock.getChainedAuthentications()).thenReturn(authnListMock);
  TicketRegistry ticketRegMock=mock(TicketRegistry.class);
  when(ticketRegMock.getTicket(anyString(),eq(TicketGrantingTicket.class))).thenReturn(tgtMock);
  RegisteredServiceImpl registeredService=new RegisteredServiceImpl();
  registeredService.setAllowedToProxy(false);
  ServicesManager smMock=mock(ServicesManager.class);
  when(smMock.findServiceBy(any(Service.class))).thenReturn(registeredService);
  cas.setTicketRegistry(ticketRegMock);
  cas.setServicesManager(smMock);
  try {
    cas.grantServiceTicket("tgt-id",TestUtils.getService());
    fail("Should have thrown UnauthorizedProxyingException");
  }
 catch (  UnauthorizedProxyingException e) {
  }
}
