{
  this.authentication=mock(Authentication.class);
  when(this.authentication.getAuthenticatedDate()).thenReturn(new Date());
  final CredentialMetaData metadata=new BasicCredentialMetaData(TestUtils.getCredentialsWithSameUsernameAndPassword("principal"));
  final Map<String,HandlerResult> successes=new HashMap<String,HandlerResult>();
  successes.put("handler1",new HandlerResult(mock(AuthenticationHandler.class),metadata));
  when(this.authentication.getCredentials()).thenReturn(Arrays.asList(metadata));
  when(this.authentication.getSuccesses()).thenReturn(successes);
  when(this.authentication.getPrincipal()).thenReturn(new SimplePrincipal(PRINCIPAL));
  final ServiceTicket stMock=mock(ServiceTicket.class);
  when(stMock.getService()).thenReturn(TestUtils.getService());
  when(stMock.getId()).thenReturn(ST_ID);
  when(stMock.isValidFor(TestUtils.getService())).thenReturn(true);
  final TicketGrantingTicket tgtRootMock=mock(TicketGrantingTicket.class);
  when(tgtRootMock.isExpired()).thenReturn(false);
  when(tgtRootMock.getAuthentication()).thenReturn(this.authentication);
  final TicketGrantingTicket tgtMock=mock(TicketGrantingTicket.class);
  when(tgtMock.isExpired()).thenReturn(false);
  when(tgtMock.getId()).thenReturn(TGT_ID);
  when(tgtMock.grantServiceTicket(anyString(),argThat(new VerifyServiceByIdMatcher(TestUtils.getService().getId())),any(ExpirationPolicy.class),anyBoolean())).thenReturn(stMock);
  when(tgtMock.getRoot()).thenReturn(tgtRootMock);
  final List<Authentication> authnListMock=mock(List.class);
  when(authnListMock.size()).thenReturn(2);
  when(authnListMock.get(anyInt())).thenReturn(this.authentication);
  when(tgtMock.getChainedAuthentications()).thenReturn(authnListMock);
  when(stMock.getGrantingTicket()).thenReturn(tgtMock);
  final Service service2=TestUtils.getService(SVC2_ID);
  final ServiceTicket stMock2=mock(ServiceTicket.class);
  when(stMock2.getService()).thenReturn(service2);
  when(stMock2.getId()).thenReturn(ST2_ID);
  when(stMock2.isValidFor(service2)).thenReturn(true);
  final TicketGrantingTicket tgtMock2=mock(TicketGrantingTicket.class);
  when(tgtMock2.isExpired()).thenReturn(false);
  when(tgtMock2.getId()).thenReturn(TGT2_ID);
  when(tgtMock2.grantServiceTicket(anyString(),argThat(new VerifyServiceByIdMatcher(service2.getId())),any(ExpirationPolicy.class),anyBoolean())).thenReturn(stMock2);
  when(tgtMock2.getRoot()).thenReturn(tgtRootMock);
  when(tgtMock2.getChainedAuthentications()).thenReturn(authnListMock);
  when(stMock2.getGrantingTicket()).thenReturn(tgtMock2);
  final TicketRegistry ticketRegMock=mock(TicketRegistry.class);
  when(ticketRegMock.getTicket(eq(tgtMock.getId()),eq(TicketGrantingTicket.class))).thenReturn(tgtMock);
  when(ticketRegMock.getTicket(eq(tgtMock2.getId()),eq(TicketGrantingTicket.class))).thenReturn(tgtMock2);
  when(ticketRegMock.getTicket(eq(stMock.getId()),eq(ServiceTicket.class))).thenReturn(stMock);
  when(ticketRegMock.getTicket(eq(stMock2.getId()),eq(ServiceTicket.class))).thenReturn(stMock2);
  final RegisteredService mockRegSvc1=mock(RegisteredService.class);
  when(mockRegSvc1.getServiceId()).thenReturn(SVC1_ID);
  when(mockRegSvc1.isEnabled()).thenReturn(true);
  when(mockRegSvc1.isAllowedToProxy()).thenReturn(false);
  when(mockRegSvc1.getName()).thenReturn(SVC1_ID);
  final RegisteredService mockRegSvc2=mock(RegisteredService.class);
  when(mockRegSvc2.getServiceId()).thenReturn("test");
  when(mockRegSvc2.isEnabled()).thenReturn(false);
  when(mockRegSvc2.getName()).thenReturn("test");
  final RegisteredService mockRegSvc3=mock(RegisteredService.class);
  when(mockRegSvc3.getServiceId()).thenReturn(service2.getId());
  when(mockRegSvc3.isEnabled()).thenReturn(true);
  when(mockRegSvc3.isAllowedToProxy()).thenReturn(true);
  when(mockRegSvc3.getName()).thenReturn(service2.getId());
  when(mockRegSvc3.matches(argThat(new VerifyServiceByIdMatcher(service2.getId())))).thenReturn(true);
  final ServicesManager smMock=mock(ServicesManager.class);
  when(smMock.findServiceBy(argThat(new VerifyServiceByIdMatcher(SVC1_ID)))).thenReturn(mockRegSvc1);
  when(smMock.findServiceBy(argThat(new VerifyServiceByIdMatcher("test")))).thenReturn(mockRegSvc2);
  when(smMock.findServiceBy(argThat(new VerifyServiceByIdMatcher(SVC2_ID)))).thenReturn(mockRegSvc3);
  final Map ticketIdGenForServiceMock=mock(Map.class);
  when(ticketIdGenForServiceMock.containsKey(any())).thenReturn(true);
  when(ticketIdGenForServiceMock.get(any())).thenReturn(new DefaultUniqueTicketIdGenerator());
  this.cas=new CentralAuthenticationServiceImpl(ticketRegMock,null,mock(AuthenticationManager.class),mock(UniqueTicketIdGenerator.class),ticketIdGenForServiceMock,mock(ExpirationPolicy.class),mock(ExpirationPolicy.class),smMock,mock(LogoutManager.class));
}
