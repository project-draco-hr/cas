{
  final ServiceTicket stMock=mock(ServiceTicket.class);
  when(stMock.getId()).thenReturn("st-id");
  when(stMock.getService()).thenReturn(TestUtils.getService());
  final TicketGrantingTicket tgtMock=mock(TicketGrantingTicket.class);
  when(tgtMock.isExpired()).thenReturn(false);
  when(tgtMock.grantServiceTicket(anyString(),any(Service.class),any(ExpirationPolicy.class),anyBoolean())).thenReturn(stMock);
  final List<Authentication> authnListMock=mock(List.class);
  when(authnListMock.size()).thenReturn(2);
  when(tgtMock.getChainedAuthentications()).thenReturn(authnListMock);
  final TicketRegistry ticketRegMock=mock(TicketRegistry.class);
  when(ticketRegMock.getTicket(anyString(),eq(TicketGrantingTicket.class))).thenReturn(tgtMock);
  when(ticketRegMock.getTicket(eq(stMock.getId()),eq(ServiceTicket.class))).thenReturn(stMock);
  final RegisteredService mockRegSvc1=mock(RegisteredService.class);
  when(mockRegSvc1.getServiceId()).thenReturn("test1");
  when(mockRegSvc1.isEnabled()).thenReturn(true);
  when(mockRegSvc1.isAllowedToProxy()).thenReturn(false);
  final RegisteredService mockRegSvc2=mock(RegisteredService.class);
  when(mockRegSvc2.getServiceId()).thenReturn("test");
  when(mockRegSvc2.isEnabled()).thenReturn(false);
  final ServicesManager smMock=mock(ServicesManager.class);
  when(smMock.findServiceBy(argThat(new VerifyServiceByIdMatcher("test1")))).thenReturn(mockRegSvc1);
  when(smMock.findServiceBy(argThat(new VerifyServiceByIdMatcher("test")))).thenReturn(mockRegSvc2);
  this.cas=new CentralAuthenticationServiceImpl(ticketRegMock,null,mock(AuthenticationManager.class),mock(UniqueTicketIdGenerator.class),mock(Map.class),mock(ExpirationPolicy.class),mock(ExpirationPolicy.class),smMock,mock(LogoutManager.class));
}
