{
  this.action=new PrincipalFromRequestUserPrincipalNonInteractiveCredentialsAction();
  final CentralAuthenticationServiceImpl centralAuthenticationService=new CentralAuthenticationServiceImpl();
  centralAuthenticationService.setTicketRegistry(new DefaultTicketRegistry());
  final Map<String,UniqueTicketIdGenerator> idGenerators=new HashMap<String,UniqueTicketIdGenerator>();
  idGenerators.put(SimpleWebApplicationServiceImpl.class.getName(),new DefaultUniqueTicketIdGenerator());
  final AuthenticationManagerImpl authenticationManager=new AuthenticationManagerImpl();
  final AuthenticationHandler[] handlers=new AuthenticationHandler[]{new LegacyAuthenticationHandlerAdapter(new PrincipalBearingCredentialsAuthenticationHandler())};
  authenticationManager.setAuthenticationHandlers(Arrays.asList(handlers));
  authenticationManager.setCredentialsToPrincipalResolvers(Arrays.asList(new CredentialsToPrincipalResolver[]{new PrincipalBearingCredentialsToPrincipalResolver()}));
  centralAuthenticationService.setTicketGrantingTicketUniqueTicketIdGenerator(new DefaultUniqueTicketIdGenerator());
  centralAuthenticationService.setUniqueTicketIdGeneratorsForService(idGenerators);
  centralAuthenticationService.setServiceTicketExpirationPolicy(new NeverExpiresExpirationPolicy());
  centralAuthenticationService.setTicketGrantingTicketExpirationPolicy(new NeverExpiresExpirationPolicy());
  centralAuthenticationService.setAuthenticationManager(authenticationManager);
  this.action.setCentralAuthenticationService(centralAuthenticationService);
}
