{
  try {
    final UsernamePasswordCredential creds=new UsernamePasswordCredential(c.getUsername(),c.getPassword());
    final ResponseEntity<SimplePrincipal> authenticationResponse=api.authenticate(creds);
    if (authenticationResponse.getStatusCode().value() == HttpStatus.OK.value()) {
      final SimplePrincipal principalFromRest=authenticationResponse.getBody();
      if (principalFromRest == null || StringUtils.isBlank(principalFromRest.getId())) {
        throw new FailedLoginException("Could not determine authentication response from rest endpoint for " + c.getUsername());
      }
      return createHandlerResult(c,this.principalFactory.createPrincipal(principalFromRest.getId()),new ArrayList<>());
    }
  }
 catch (  final HttpClientErrorException e) {
    if (e.getStatusCode().value() == HttpStatus.FORBIDDEN.value()) {
      throw new AccountDisabledException("Could not authenticate forbidden account for " + c.getUsername());
    }
    if (e.getStatusCode().value() == HttpStatus.UNAUTHORIZED.value()) {
      throw new FailedLoginException("Could not authenticate account for " + c.getUsername());
    }
    if (e.getStatusCode().value() == HttpStatus.NOT_FOUND.value()) {
      throw new AccountNotFoundException("Could not locate account for " + c.getUsername());
    }
    throw new FailedLoginException("Rest endpoint returned an unknown status code " + e.getStatusCode() + " for "+ c.getUsername());
  }
  throw new FailedLoginException("Rest endpoint returned an unknown response for " + c.getUsername());
}
