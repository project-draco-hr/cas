{
  final Principal principal=createPrincipal();
  final OAuthCode code=addCode(principal,service);
  final MockHttpServletRequest mockRequest=new MockHttpServletRequest("GET",CONTEXT + OAuthConstants.ACCESS_TOKEN_URL);
  mockRequest.setParameter(OAuthConstants.REDIRECT_URI,REDIRECT_URI);
  mockRequest.setParameter(OAuthConstants.GRANT_TYPE,OAuthGrantType.AUTHORIZATION_CODE.name().toLowerCase());
  if (basicAuth) {
    final String auth=CLIENT_ID + ':' + CLIENT_SECRET;
    final String value=Base64.encodeBase64String(auth.getBytes("UTF-8"));
    mockRequest.addHeader(HttpConstants.AUTHORIZATION_HEADER,HttpConstants.BASIC_HEADER_PREFIX + value);
  }
 else {
    mockRequest.setParameter(OAuthConstants.CLIENT_ID,CLIENT_ID);
    mockRequest.setParameter(OAuthConstants.CLIENT_SECRET,CLIENT_SECRET);
  }
  mockRequest.setParameter(OAuthConstants.CODE,code.getId());
  final MockHttpServletResponse mockResponse=new MockHttpServletResponse();
  requiresAuthenticationInterceptor.preHandle(mockRequest,mockResponse,null);
  oAuth20AccessTokenController.handleRequest(mockRequest,mockResponse);
  assertNull(oAuth20AccessTokenController.getTicketRegistry().getTicket((code.getId())));
  assertEquals("text/plain",mockResponse.getContentType());
  assertEquals(200,mockResponse.getStatus());
  final String body=mockResponse.getContentAsString();
  assertTrue(body.contains(OAuthConstants.ACCESS_TOKEN + '='));
  if (refreshToken) {
    assertTrue(body.contains(OAuthConstants.REFRESH_TOKEN + '='));
  }
  assertTrue(body.contains(OAuthConstants.EXPIRES + '='));
  final String accessTokenId=StringUtils.substringBetween(body,OAuthConstants.ACCESS_TOKEN + '=',"&");
  final AccessToken accessToken=oAuth20AccessTokenController.getTicketRegistry().getTicket(accessTokenId,AccessToken.class);
  assertEquals(principal,accessToken.getAuthentication().getPrincipal());
  final int timeLeft=getTimeLeft(body,refreshToken);
  assertTrue(timeLeft >= TIMEOUT - 10 - DELTA);
}
