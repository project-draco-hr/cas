{
  final MockHttpServletRequest mockRequest=new MockHttpServletRequest("GET",CONTEXT + OAuthConstants.ACCESS_TOKEN_URL);
  mockRequest.setParameter(OAuthConstants.CLIENT_ID,CLIENT_ID);
  mockRequest.setParameter(OAuthConstants.REDIRECT_URI,REDIRECT_URI);
  mockRequest.setParameter(OAuthConstants.CLIENT_SECRET,CLIENT_SECRET);
  mockRequest.setParameter(OAuthConstants.CODE,CODE);
  final MockHttpServletResponse mockResponse=new MockHttpServletResponse();
  final ServicesManager servicesManager=mock(ServicesManager.class);
  when(servicesManager.getAllServices()).thenReturn(new ArrayList<RegisteredService>());
  final OAuth20WrapperController oauth20WrapperController=new OAuth20WrapperController();
  oauth20WrapperController.setServicesManager(servicesManager);
  oauth20WrapperController.afterPropertiesSet();
  final Logger logger=mock(Logger.class);
  OAuth20AccessTokenController.setLogger(logger);
  oauth20WrapperController.handleRequest(mockRequest,mockResponse);
  assertEquals(400,mockResponse.getStatus());
  assertEquals("error=" + OAuthConstants.INVALID_REQUEST,mockResponse.getContentAsString());
  verify(logger).error("Unknown clientId : {}",CLIENT_ID);
}
