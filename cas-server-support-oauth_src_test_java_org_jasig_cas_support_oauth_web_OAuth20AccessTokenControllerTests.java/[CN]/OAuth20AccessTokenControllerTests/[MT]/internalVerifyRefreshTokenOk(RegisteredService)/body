{
  final Principal principal=createPrincipal();
  final RefreshToken refreshToken=addRefreshToken(principal,service);
  final MockHttpServletRequest mockRequest=new MockHttpServletRequest("GET",CONTEXT + OAuthConstants.ACCESS_TOKEN_URL);
  mockRequest.setParameter(OAuthConstants.GRANT_TYPE,OAuthGrantType.REFRESH_TOKEN.name().toLowerCase());
  mockRequest.setParameter(OAuthConstants.CLIENT_ID,CLIENT_ID);
  mockRequest.setParameter(OAuthConstants.CLIENT_SECRET,CLIENT_SECRET);
  mockRequest.setParameter(OAuthConstants.REFRESH_TOKEN,refreshToken.getId());
  final MockHttpServletResponse mockResponse=new MockHttpServletResponse();
  requiresAuthenticationInterceptor.preHandle(mockRequest,mockResponse,null);
  oAuth20AccessTokenController.handleRequest(mockRequest,mockResponse);
  assertNotNull(oAuth20AccessTokenController.getTicketRegistry().getTicket((refreshToken.getId())));
  assertEquals("text/plain",mockResponse.getContentType());
  assertEquals(200,mockResponse.getStatus());
  final String body=mockResponse.getContentAsString();
  assertTrue(body.contains(OAuthConstants.ACCESS_TOKEN + '='));
  assertFalse(body.contains(OAuthConstants.REFRESH_TOKEN + '='));
  assertTrue(body.contains(OAuthConstants.EXPIRES + '='));
  final String accessTokenId=StringUtils.substringBetween(body,OAuthConstants.ACCESS_TOKEN + '=',"&");
  final AccessToken accessToken=oAuth20AccessTokenController.getTicketRegistry().getTicket(accessTokenId,AccessToken.class);
  assertEquals(principal,accessToken.getAuthentication().getPrincipal());
  final int timeLeft=getTimeLeft(body,false);
  assertTrue(timeLeft >= TIMEOUT - 10 - DELTA);
}
