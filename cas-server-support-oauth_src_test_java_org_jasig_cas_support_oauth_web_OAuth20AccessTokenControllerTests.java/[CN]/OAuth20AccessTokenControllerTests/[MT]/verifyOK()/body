{
  final MockHttpServletRequest mockRequest=new MockHttpServletRequest("GET",CONTEXT + OAuthConstants.ACCESS_TOKEN_URL);
  mockRequest.setParameter(OAuthConstants.CLIENT_ID,CLIENT_ID);
  mockRequest.setParameter(OAuthConstants.REDIRECT_URI,REDIRECT_URI);
  mockRequest.setParameter(OAuthConstants.CLIENT_SECRET,CLIENT_SECRET);
  mockRequest.setParameter(OAuthConstants.CODE,CODE);
  final MockHttpServletResponse mockResponse=new MockHttpServletResponse();
  final ServicesManager servicesManager=mock(ServicesManager.class);
  final List<RegisteredService> services=new ArrayList<>();
  services.add(getRegisteredService(REDIRECT_URI,CLIENT_SECRET));
  when(servicesManager.getAllServices()).thenReturn(services);
  final TicketRegistry ticketRegistry=mock(TicketRegistry.class);
  final ServiceTicket serviceTicket=mock(ServiceTicket.class);
  final TicketGrantingTicket ticketGrantingTicket=mock(TicketGrantingTicket.class);
  final int timeBefore=10;
  when(ticketGrantingTicket.getCreationTime()).thenReturn(System.currentTimeMillis() - timeBefore * 1000);
  when(ticketGrantingTicket.getId()).thenReturn(TGT_ID);
  when(serviceTicket.isExpired()).thenReturn(false);
  when(serviceTicket.getId()).thenReturn(CODE);
  when(serviceTicket.getGrantingTicket()).thenReturn(ticketGrantingTicket);
  when(ticketRegistry.getTicket(CODE)).thenReturn(serviceTicket);
  final OAuth20WrapperController oauth20WrapperController=new OAuth20WrapperController();
  oauth20WrapperController.setServicesManager(servicesManager);
  oauth20WrapperController.setTicketRegistry(ticketRegistry);
  oauth20WrapperController.setTimeout(TIMEOUT);
  oauth20WrapperController.handleRequest(mockRequest,mockResponse);
  verify(ticketRegistry).deleteTicket(CODE);
  assertEquals("text/plain",mockResponse.getContentType());
  assertEquals(200,mockResponse.getStatus());
  final String body=mockResponse.getContentAsString();
  assertTrue(body.startsWith(OAuthConstants.ACCESS_TOKEN + "=" + TGT_ID+ "&"+ OAuthConstants.EXPIRES+ "="));
  final int delta=2;
  final int timeLeft=Integer.parseInt(StringUtils.substringAfter(body,"&" + OAuthConstants.EXPIRES + "="));
  assertTrue(timeLeft >= TIMEOUT - timeBefore - delta);
  assertTrue(timeLeft <= TIMEOUT - timeBefore + delta);
}
