{
  clearAllServices();
  final MockHttpServletRequest mockRequest=new MockHttpServletRequest("GET",CONTEXT + OAuthConstants.ACCESS_TOKEN_URL);
  mockRequest.setParameter(OAuthConstants.CLIENT_ID,CLIENT_ID);
  mockRequest.setParameter(OAuthConstants.REDIRECT_URI,REDIRECT_URI);
  mockRequest.setParameter(OAuthConstants.CLIENT_SECRET,CLIENT_SECRET);
  mockRequest.setParameter(OAuthConstants.CODE,CODE);
  final MockHttpServletResponse mockResponse=new MockHttpServletResponse();
  oAuth20AccessTokenController.getServicesManager().save(getRegisteredService(REDIRECT_URI,CLIENT_SECRET));
  final Map<String,Object> map=new HashMap<>();
  map.put(NAME,VALUE);
  final List<String> list=Arrays.asList(VALUE,VALUE);
  map.put(NAME2,list);
  final Principal p=org.jasig.cas.authentication.TestUtils.getPrincipal(ID,map);
  final TicketGrantingTicketImpl impl=new TicketGrantingTicketImpl(TGT_ID,org.jasig.cas.authentication.TestUtils.getAuthentication(p),new NeverExpiresExpirationPolicy());
  oAuth20AccessTokenController.getTicketRegistry().addTicket(new ServiceTicketImpl("ST1",impl,org.jasig.cas.authentication.TestUtils.getService(),false,new ExpirationPolicy(){
    private static final long serialVersionUID=-7321055962209199811L;
    @Override public boolean isExpired(    final TicketState ticketState){
      return true;
    }
  }
));
  oAuth20AccessTokenController.handleRequest(mockRequest,mockResponse);
  assertEquals(400,mockResponse.getStatus());
  assertEquals("error=" + OAuthConstants.INVALID_GRANT,mockResponse.getContentAsString());
}
