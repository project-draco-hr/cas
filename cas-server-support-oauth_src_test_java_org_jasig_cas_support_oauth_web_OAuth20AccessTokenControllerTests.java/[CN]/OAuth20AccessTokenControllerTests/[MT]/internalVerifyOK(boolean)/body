{
  clearAllServices();
  final RegisteredService registeredService=getRegisteredService(REDIRECT_URI,CLIENT_SECRET);
  oAuth20AccessTokenController.getServicesManager().save(registeredService);
  final Map<String,Object> map=new HashMap<>();
  map.put(NAME,VALUE);
  final List<String> list=Arrays.asList(VALUE,VALUE);
  map.put(NAME2,list);
  final Principal principal=org.jasig.cas.authentication.TestUtils.getPrincipal(ID,map);
  final Authentication authentication=new OAuthAuthentication(ZonedDateTime.now(),principal);
  final Service service=new OAuthWebApplicationService("" + registeredService.getId(),registeredService.getServiceId());
  final OAuthCodeImpl code=(OAuthCodeImpl)oAuthCodeFactory.create(service,authentication);
  oAuth20AccessTokenController.getTicketRegistry().addTicket(code);
  final MockHttpServletRequest mockRequest=new MockHttpServletRequest("GET",CONTEXT + OAuthConstants.ACCESS_TOKEN_URL);
  mockRequest.setParameter(OAuthConstants.REDIRECT_URI,REDIRECT_URI);
  if (basicAuth) {
    final String auth=CLIENT_ID + ":" + CLIENT_SECRET;
    final String value=Base64.encodeBase64String(auth.getBytes("UTF-8"));
    mockRequest.addHeader(HttpConstants.AUTHORIZATION_HEADER,HttpConstants.BASIC_HEADER_PREFIX + value);
  }
 else {
    mockRequest.setParameter(OAuthConstants.CLIENT_ID,CLIENT_ID);
    mockRequest.setParameter(OAuthConstants.CLIENT_SECRET,CLIENT_SECRET);
  }
  mockRequest.setParameter(OAuthConstants.CODE,code.getId());
  final MockHttpServletResponse mockResponse=new MockHttpServletResponse();
  oAuth20AccessTokenController.handleRequest(mockRequest,mockResponse);
  assertNull(oAuth20AccessTokenController.getTicketRegistry().getTicket((code.getId())));
  assertEquals("text/plain",mockResponse.getContentType());
  assertEquals(200,mockResponse.getStatus());
  final String body=mockResponse.getContentAsString();
  assertTrue(body.contains(OAuthConstants.ACCESS_TOKEN + '='));
  assertTrue(body.contains(OAuthConstants.EXPIRES + '='));
  final String accessTokenId=StringUtils.substringBetween(body,OAuthConstants.ACCESS_TOKEN + '=',"&");
  final AccessToken accessToken=oAuth20AccessTokenController.getTicketRegistry().getTicket(accessTokenId,AccessToken.class);
  assertEquals(principal,accessToken.getAuthentication().getPrincipal());
  final int delta=2;
  final int timeLeft=Integer.parseInt(StringUtils.substringAfter(body,'&' + OAuthConstants.EXPIRES + '='));
  assertTrue(timeLeft >= TIMEOUT - 10 - delta);
}
