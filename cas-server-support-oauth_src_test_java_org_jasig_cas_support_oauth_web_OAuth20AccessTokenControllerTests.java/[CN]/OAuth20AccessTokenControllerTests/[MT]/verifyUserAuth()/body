{
  addRegisteredService();
  final MockHttpServletRequest mockRequest=new MockHttpServletRequest("GET",CONTEXT + OAuthConstants.ACCESS_TOKEN_URL);
  mockRequest.setParameter(OAuthConstants.CLIENT_ID,CLIENT_ID);
  mockRequest.setParameter(OAuthConstants.GRANT_TYPE,OAuthGrantType.PASSWORD.name().toLowerCase());
  mockRequest.setParameter(USERNAME,GOOD_USERNAME);
  mockRequest.setParameter(PASSWORD,GOOD_PASSWORD);
  final MockHttpServletResponse mockResponse=new MockHttpServletResponse();
  requiresAuthenticationInterceptor.preHandle(mockRequest,mockResponse,null);
  oAuth20AccessTokenController.handleRequest(mockRequest,mockResponse);
  assertEquals("text/plain",mockResponse.getContentType());
  assertEquals(200,mockResponse.getStatus());
  final String body=mockResponse.getContentAsString();
  assertTrue(body.contains(OAuthConstants.ACCESS_TOKEN + '='));
  assertTrue(body.contains(OAuthConstants.EXPIRES + '='));
  final String accessTokenId=StringUtils.substringBetween(body,OAuthConstants.ACCESS_TOKEN + '=',"&");
  final AccessToken accessToken=oAuth20AccessTokenController.getTicketRegistry().getTicket(accessTokenId,AccessToken.class);
  assertEquals(GOOD_USERNAME,accessToken.getAuthentication().getPrincipal().getId());
  final int delta=2;
  final int timeLeft=Integer.parseInt(StringUtils.substringAfter(body,'&' + OAuthConstants.EXPIRES + '='));
  assertTrue(timeLeft >= TIMEOUT - 10 - delta);
}
