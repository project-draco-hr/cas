{
  final RegisteredServiceBean bean=new RegisteredServiceBean();
  bean.setAssignedId(svc.getId());
  bean.setServiceId(svc.getServiceId());
  bean.setName(bean.getName());
  if (svc.getLogo() != null) {
    bean.setLogoUrl(svc.getLogo().toExternalForm());
  }
  final RegisteredServiceProxyPolicy policy=svc.getProxyPolicy();
  if (policy instanceof RefuseRegisteredServiceProxyPolicy) {
    final RefuseRegisteredServiceProxyPolicy refuse=(RefuseRegisteredServiceProxyPolicy)policy;
    bean.getProxyPolicy().setType(ProxyPolicy.Types.REFUSE.toString());
  }
 else   if (policy instanceof RegexMatchingRegisteredServiceProxyPolicy) {
    final RegexMatchingRegisteredServiceProxyPolicy option=(RegexMatchingRegisteredServiceProxyPolicy)policy;
    bean.getProxyPolicy().setType(ProxyPolicy.Types.ALLOW.toString());
    bean.getProxyPolicy().setValue(option.getPattern().toString());
  }
  final AbstractAttributeReleasePolicy attrPolicy=(AbstractAttributeReleasePolicy)svc.getAttributeReleasePolicy();
  bean.getAttrRelease().setReleasePassword(attrPolicy.isAuthorizedToReleaseCredentialPassword());
  bean.getAttrRelease().setReleaseTicket(attrPolicy.isAuthorizedToReleaseProxyGrantingTicket());
  if (attrPolicy instanceof ReturnAllAttributeReleasePolicy) {
    bean.getAttrRelease().getAttrPolicy().setType(AttributeReleasePolicy.ReleasePolicyStrategy.Types.ALL.toString());
  }
 else   if (attrPolicy instanceof ReturnAllowedAttributeReleasePolicy) {
    bean.getAttrRelease().getAttrPolicy().setType(AttributeReleasePolicy.ReleasePolicyStrategy.Types.ALLOWED.toString());
  }
 else   if (attrPolicy instanceof ReturnMappedAttributeReleasePolicy) {
    bean.getAttrRelease().getAttrPolicy().setType(AttributeReleasePolicy.ReleasePolicyStrategy.Types.MAPPED.toString());
  }
  bean.setSasCASEnabled(svc.getAccessStrategy().isServiceAccessAllowed());
  return bean;
}
