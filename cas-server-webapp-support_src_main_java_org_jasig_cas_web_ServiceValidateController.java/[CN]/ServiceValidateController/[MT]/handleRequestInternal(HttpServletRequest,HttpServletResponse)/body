{
  final WebApplicationService service=this.argumentExtractor.extractService(request);
  final String serviceTicketId=service != null ? service.getArtifactId() : null;
  if (service == null || serviceTicketId == null) {
    logger.debug("Could not identify service and/or service ticket for service: [{}]",service);
    return generateErrorView(CasProtocolConstants.ERROR_CODE_INVALID_REQUEST,CasProtocolConstants.ERROR_CODE_INVALID_REQUEST,null);
  }
  try {
    final Credential serviceCredential=getServiceCredentialsFromRequest(service,request);
    TicketGrantingTicket proxyGrantingTicketId=null;
    if (serviceCredential != null) {
      try {
        proxyGrantingTicketId=this.centralAuthenticationService.delegateTicketGrantingTicket(serviceTicketId,serviceCredential);
        logger.debug("Generated PGT [{}] off of service ticket [{}] and credential [{}]",proxyGrantingTicketId.getId(),serviceTicketId,serviceCredential);
      }
 catch (      final AuthenticationException e) {
        logger.info("Failed to authenticate service credential {}",serviceCredential);
      }
catch (      final TicketException e) {
        logger.error("Failed to create proxy granting ticket for {}",serviceCredential,e);
      }
      if (proxyGrantingTicketId == null) {
        return generateErrorView(CasProtocolConstants.ERROR_CODE_INVALID_PROXY_CALLBACK,CasProtocolConstants.ERROR_CODE_INVALID_PROXY_CALLBACK,new Object[]{serviceCredential.getId()});
      }
    }
    final Assertion assertion=this.centralAuthenticationService.validateServiceTicket(serviceTicketId,service);
    final ValidationSpecification validationSpecification=this.getCommandClass();
    final ServletRequestDataBinder binder=new ServletRequestDataBinder(validationSpecification,"validationSpecification");
    initBinder(request,binder);
    binder.bind(request);
    if (!validationSpecification.isSatisfiedBy(assertion)) {
      logger.debug("Service ticket [{}] does not satisfy validation specification.",serviceTicketId);
      return generateErrorView(CasProtocolConstants.ERROR_CODE_INVALID_TICKET,CasProtocolConstants.ERROR_CODE_INVALID_TICKET,null);
    }
    String proxyIou=null;
    if (serviceCredential != null && this.proxyHandler.canHandle(serviceCredential)) {
      proxyIou=this.proxyHandler.handle(serviceCredential,proxyGrantingTicketId);
      if (StringUtils.isEmpty(proxyIou)) {
        return generateErrorView(CasProtocolConstants.ERROR_CODE_INVALID_PROXY_CALLBACK,CasProtocolConstants.ERROR_CODE_INVALID_PROXY_CALLBACK,new Object[]{serviceCredential.getId()});
      }
    }
    onSuccessfulValidation(serviceTicketId,assertion);
    logger.debug("Successfully validated service ticket {} for service [{}]",serviceTicketId,service.getId());
    return generateSuccessView(assertion,proxyIou);
  }
 catch (  final TicketValidationException e) {
    final String code=e.getCode();
    return generateErrorView(code,code,new Object[]{serviceTicketId,e.getOriginalService().getId(),service.getId()});
  }
catch (  final TicketException te) {
    return generateErrorView(te.getCode(),te.getCode(),new Object[]{serviceTicketId});
  }
catch (  final UnauthorizedProxyingException e) {
    return generateErrorView(e.getMessage(),e.getMessage(),new Object[]{service.getId()});
  }
catch (  final UnauthorizedServiceException e) {
    return generateErrorView(e.getMessage(),e.getMessage(),null);
  }
}
