{
  final ClassLoader parent=getClass().getClassLoader();
  try (GroovyClassLoader loader=new GroovyClassLoader(parent)){
    final File groovyFile=ResourceUtils.getResourceFrom(this.groovyScript).getFile();
    if (groovyFile.exists()) {
      final Class<?> groovyClass=loader.parseClass(groovyFile);
      final GroovyObject groovyObject=(GroovyObject)groovyClass.newInstance();
      LOGGER.debug("Created groovy object instance from class {}",groovyFile.getCanonicalPath());
      final Object[] args={attributes,LOGGER};
      LOGGER.debug("Executing groovy script's run method, with parameters {}",args);
      final Map<String,Object> personAttributesMap=(Map<String,Object>)groovyObject.invokeMethod("run",args);
      LOGGER.debug("Final set of attributes determined by the script are {}",personAttributesMap);
      return personAttributesMap;
    }
  }
 catch (  final Exception e) {
    LOGGER.error(e.getMessage(),e);
  }
  LOGGER.warn("Groovy script {} does not exist, or cannot be loaded",groovyScript);
  return new HashMap<>();
}
