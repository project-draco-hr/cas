{
  try {
    final ConnectionSocketFactory plainsf=PlainConnectionSocketFactory.getSocketFactory();
    final LayeredConnectionSocketFactory sslsf=configuration.getSslSocketFactory();
    final Registry<ConnectionSocketFactory> registry=RegistryBuilder.<ConnectionSocketFactory>create().register("http",plainsf).register("https",sslsf).build();
    final PoolingHttpClientConnectionManager connMgmr=new PoolingHttpClientConnectionManager(registry);
    connMgmr.setMaxTotal(configuration.getMaxPooledConnections());
    connMgmr.setDefaultMaxPerRoute(configuration.getMaxConnectionsPerRoute());
    final HttpHost httpHost=new HttpHost(InetAddress.getLocalHost());
    final HttpRoute httpRoute=new HttpRoute(httpHost);
    connMgmr.setMaxPerRoute(httpRoute,SimpleHttpClientConfiguration.MAX_CONNECTIONS_PER_ROUTE);
    final RequestConfig requestConfig=RequestConfig.custom().setSocketTimeout(configuration.getReadTimeout()).setConnectTimeout(configuration.getConnectionTimeout()).setConnectionRequestTimeout(configuration.getConnectionTimeout()).setStaleConnectionCheckEnabled(true).setCircularRedirectsAllowed(configuration.isCircularRedirectsAllowed()).setRedirectsEnabled(configuration.isRedirectsEnabled()).setAuthenticationEnabled(configuration.isAuthenticationEnabled()).build();
    final HttpClientBuilder builder=HttpClients.custom().setConnectionManager(connMgmr).setDefaultRequestConfig(requestConfig).setSSLSocketFactory(sslsf).setHostnameVerifier(configuration.getHostnameVerifier()).setRedirectStrategy(configuration.getRedirectionStrategy()).setDefaultCredentialsProvider(configuration.getCredentialsProvider()).setDefaultCookieStore(configuration.getCookieStore()).setConnectionReuseStrategy(configuration.getConnectionReuseStrategy()).setConnectionBackoffStrategy(configuration.getConnectionBackoffStrategy()).setServiceUnavailableRetryStrategy(configuration.getServiceUnavailableRetryStrategy()).setProxyAuthenticationStrategy(configuration.getProxyAuthenticationStrategy()).setDefaultHeaders(configuration.getDefaultHeaders()).useSystemProperties();
    return builder.build();
  }
 catch (  final Exception e) {
    LOGGER.error(e.getMessage(),e);
    throw new RuntimeException(e);
  }
}
