{
  final String serviceId=requestBody.getFirst("serviceId");
  final String serviceName=requestBody.getFirst("name");
  final String description=requestBody.getFirst("description");
  final String evaluationOrder=requestBody.getFirst("evaluationOrder");
  final String enabled=requestBody.getFirst("enabled");
  final String ssoEnabled=requestBody.getFirst("ssoEnabled");
  if (StringUtils.isBlank(serviceId) || StringUtils.isBlank(serviceName) || StringUtils.isBlank(description)) {
    throw new IllegalArgumentException("Service name/description/id is missing");
  }
  final RegexRegisteredService service=new RegexRegisteredService();
  service.setServiceId(serviceId);
  service.setDescription(description);
  service.setName(serviceName);
  if (StringUtils.isBlank(evaluationOrder)) {
    service.setEvaluationOrder(Integer.MAX_VALUE);
  }
 else {
    service.setEvaluationOrder(Integer.parseInt(evaluationOrder));
  }
  boolean enabledService=false;
  boolean ssoEnabledService=false;
  if (!StringUtils.isBlank(enabled)) {
    enabledService=BooleanUtils.toBoolean(enabled);
  }
  if (!StringUtils.isBlank(ssoEnabled)) {
    ssoEnabledService=BooleanUtils.toBoolean(ssoEnabled);
  }
  service.setAccessStrategy(new DefaultRegisteredServiceAccessStrategy(enabledService,ssoEnabledService));
  return service;
}
