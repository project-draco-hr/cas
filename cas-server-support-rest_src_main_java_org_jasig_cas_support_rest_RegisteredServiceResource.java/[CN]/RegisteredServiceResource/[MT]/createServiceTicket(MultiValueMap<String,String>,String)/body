{
  try {
    if (StringUtils.isBlank(this.attributeName) || StringUtils.isBlank(this.attributeValue)) {
      throw new IllegalArgumentException("Attribute name and/or value must be configured");
    }
    final TicketGrantingTicket ticket=this.centralAuthenticationService.getTicket(tgtId,TicketGrantingTicket.class);
    final Map<String,Object> attributes=ticket.getAuthentication().getPrincipal().getAttributes();
    final Map<String,Set<String>> requiredAttrs=new HashMap<>();
    requiredAttrs.put(this.attributeName,Collections.singleton(this.attributeValue));
    if (attributes.containsKey(this.attributeName)) {
      final Set requiredValues=new HashSet(requiredAttrs.values());
      final Set presentValues=new HashSet(attributes.values());
      final Sets.SetView<String> difference=Sets.intersection(requiredValues,presentValues);
      final Set<String> copy=difference.immutableCopy();
      if (!copy.isEmpty()) {
        final String serviceId=requestBody.getFirst("serviceId");
        final String serviceName=requestBody.getFirst("name");
        final String description=requestBody.getFirst("description");
        final String evaluationOrder=requestBody.getFirst("evaluationOrder");
        if (StringUtils.isBlank(serviceId) || StringUtils.isBlank(serviceName) || StringUtils.isBlank(description)) {
          throw new IllegalArgumentException("Service name/description/id is missing");
        }
        final RegexRegisteredService service=new RegexRegisteredService();
        service.setServiceId(serviceId);
        service.setDescription(description);
        service.setName(serviceName);
        service.setAccessStrategy(new DefaultRegisteredServiceAccessStrategy(false,false));
        if (StringUtils.isBlank(evaluationOrder)) {
          service.setEvaluationOrder(Integer.MAX_VALUE);
        }
 else {
          service.setEvaluationOrder(Integer.parseInt(evaluationOrder));
        }
        this.servicesManager.save(service);
        return new ResponseEntity<>(String.valueOf(service.getId()),HttpStatus.OK);
      }
    }
    throw new IllegalArgumentException("Request is not authorized");
  }
 catch (  final InvalidTicketException e) {
    return new ResponseEntity<>("TicketGrantingTicket could not be found",HttpStatus.NOT_FOUND);
  }
catch (  final Exception e) {
    LOGGER.error(e.getMessage(),e);
    return new ResponseEntity<>(e.getMessage(),HttpStatus.BAD_REQUEST);
  }
}
