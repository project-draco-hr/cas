{
  try {
    if (StringUtils.isBlank(this.attributeName) || StringUtils.isBlank(this.attributeValue)) {
      throw new IllegalArgumentException("Attribute name and/or value must be configured");
    }
    final TicketGrantingTicket ticket=this.centralAuthenticationService.getTicket(tgtId,TicketGrantingTicket.class);
    if (ticket == null || ticket.isExpired()) {
      throw new InvalidTicketException("Ticket-granting ticket " + tgtId + " is not found");
    }
    final Map<String,Object> attributes=ticket.getAuthentication().getPrincipal().getAttributes();
    final Map<String,Set<String>> requiredAttrs=new HashMap<>();
    requiredAttrs.put(this.attributeName,Collections.singleton(this.attributeValue));
    if (attributes.containsKey(this.attributeName)) {
      final Collection<String> attributeValuesToCompare=new HashSet<>();
      final Object value=attributes.get(this.attributeName);
      if (value instanceof Collection) {
        attributeValuesToCompare.addAll((Collection<String>)value);
      }
 else {
        attributeValuesToCompare.add(value.toString());
      }
      if (attributeValuesToCompare.contains(this.attributeValue)) {
        final RegisteredService service=serviceDataHolder.getRegisteredService();
        final RegisteredService savedService=this.servicesManager.save(service);
        return new ResponseEntity<>(String.valueOf(savedService.getId()),HttpStatus.OK);
      }
    }
    throw new IllegalArgumentException("Request is not authorized");
  }
 catch (  final InvalidTicketException e) {
    return new ResponseEntity<>("TicketGrantingTicket could not be found",HttpStatus.NOT_FOUND);
  }
catch (  final Exception e) {
    LOGGER.error(e.getMessage(),e);
    return new ResponseEntity<>(e.getMessage(),HttpStatus.BAD_REQUEST);
  }
}
