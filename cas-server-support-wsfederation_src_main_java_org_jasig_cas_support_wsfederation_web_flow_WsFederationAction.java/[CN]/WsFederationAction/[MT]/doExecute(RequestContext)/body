{
  try {
    final HttpServletRequest request=WebUtils.getHttpServletRequest(context);
    final HttpSession session=request.getSession();
    final String wa=request.getParameter(WA);
    if (StringUtils.isNotBlank(wa) && wa.equalsIgnoreCase(WSIGNIN)) {
      final String wresult=request.getParameter(WRESULT);
      logger.debug("Parameter [{}] received: {}",WRESULT,wresult);
      final Assertion assertion=wsFederationHelper.parseTokenFromString(wresult);
      if (wsFederationHelper.validateSignature(assertion,configuration)) {
        final WsFederationCredential credential=wsFederationHelper.createCredentialFromToken(assertion);
        if (credential != null && credential.isValid(configuration.getRelyingPartyIdentifier(),configuration.getIdentityProviderIdentifier(),configuration.getTolerance())) {
          if (configuration.getAttributeMutator() != null) {
            configuration.getAttributeMutator().modifyAttributes(credential.getAttributes());
          }
        }
 else {
          logger.warn("SAML assertions are blank or no longer valid.");
          return error();
        }
        try {
          final Service service=(Service)session.getAttribute(SERVICE);
          context.getFlowScope().put(SERVICE,service);
          restoreRequestAttribute(request,session,THEME);
          restoreRequestAttribute(request,session,LOCALE);
          restoreRequestAttribute(request,session,METHOD);
        }
 catch (        final Exception ex) {
          logger.warn("Session is most-likely empty: {}",ex.getMessage());
        }
        try {
          this.authenticationTransactionManager.processAuthenticationAttempt(credential);
          final AuthenticationContext authenticationContext=this.authenticationTransactionManager.build();
          WebUtils.putTicketGrantingTicketInScopes(context,this.centralAuthenticationService.createTicketGrantingTicket(authenticationContext));
          logger.info("Token validated and new {} created: {}",credential.getClass().getName(),credential);
          return success();
        }
 catch (        final AbstractTicketException e) {
          logger.error(e.getMessage(),e);
          return error();
        }
      }
 else {
        logger.error("WS Requested Security Token is blank or the signature is not valid.");
        return error();
      }
    }
 else {
      final Service service=(Service)context.getFlowScope().get(SERVICE);
      if (service != null) {
        session.setAttribute(SERVICE,service);
      }
      saveRequestParameter(request,session,THEME);
      saveRequestParameter(request,session,LOCALE);
      saveRequestParameter(request,session,METHOD);
      final String key=PROVIDERURL;
      final String authorizationUrl=this.configuration.getIdentityProviderUrl() + QUERYSTRING + this.configuration.getRelyingPartyIdentifier();
      logger.info("Preparing to redirect to the IdP {}",authorizationUrl);
      context.getFlowScope().put(key,authorizationUrl);
    }
    logger.debug("Redirecting to the IdP");
    return error();
  }
 catch (  final Exception ex) {
    logger.error(ex.getMessage(),ex);
    return error();
  }
}
