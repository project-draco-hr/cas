{
  final Map<String,Object> sessionsMap=new HashMap<>();
  final Map<String,String> failedTickets=new HashMap<>();
  final SsoSessionReportOptions option=SsoSessionReportOptions.valueOf(type);
  final Collection<Map<String,Object>> collection=getActiveSsoSessions(option);
  for (  final Map<String,Object> sso : collection) {
    final String ticketGrantingTicket=sso.get(SsoSessionAttributeKeys.TICKET_GRANTING_TICKET.toString()).toString();
    try {
      this.authenticationSupervisor.clear();
      this.centralAuthenticationService.destroyTicketGrantingTicket(ticketGrantingTicket);
    }
 catch (    final Exception e) {
      LOGGER.error(e.getMessage(),e);
      failedTickets.put(ticketGrantingTicket,e.getMessage());
    }
  }
  if (failedTickets.isEmpty()) {
    sessionsMap.put("status",HttpServletResponse.SC_OK);
  }
 else {
    sessionsMap.put("status",HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
    sessionsMap.put("failedTicketGrantingTickets",failedTickets);
  }
  return sessionsMap;
}
