{
  response.setContentType(MediaType.TEXT_PLAIN_VALUE);
  if (!verifyAccessTokenRequest(request,response)) {
    logger.error("Access token request verification fails");
    return OAuthUtils.writeTextError(response,OAuthConstants.INVALID_REQUEST);
  }
  final String grantType=request.getParameter(OAuthConstants.GRANT_TYPE);
  final Service service;
  final Authentication authentication;
  final boolean generateRefreshToken;
  final OAuthRegisteredService registeredService;
  final J2EContext context=new J2EContext(request,response);
  final ProfileManager manager=new ProfileManager(context);
  if (isGrantType(grantType,OAuthGrantType.AUTHORIZATION_CODE) || isGrantType(grantType,OAuthGrantType.REFRESH_TOKEN)) {
    final UserProfile profile=manager.get(true);
    final String clientId=profile.getId();
    registeredService=OAuthUtils.getRegisteredOAuthService(this.servicesManager,clientId);
    generateRefreshToken=registeredService != null && registeredService.isGenerateRefreshToken() && isGrantType(grantType,OAuthGrantType.AUTHORIZATION_CODE);
    final String parameterName;
    if (isGrantType(grantType,OAuthGrantType.AUTHORIZATION_CODE)) {
      parameterName=OAuthConstants.CODE;
    }
 else {
      parameterName=OAuthConstants.REFRESH_TOKEN;
    }
    final OAuthToken token=getToken(request,parameterName);
    if (token == null) {
      logger.error("No token found for authorization_code or refresh_token grant types");
      return OAuthUtils.writeTextError(response,OAuthConstants.INVALID_GRANT);
    }
    service=token.getService();
    authentication=token.getAuthentication();
  }
 else {
    final String clientId=request.getParameter(OAuthConstants.CLIENT_ID);
    registeredService=OAuthUtils.getRegisteredOAuthService(this.servicesManager,clientId);
    generateRefreshToken=registeredService != null && registeredService.isGenerateRefreshToken();
    final OAuthUserProfile profile=(OAuthUserProfile)manager.get(true);
    service=createService(registeredService);
    authentication=createAuthentication(profile,registeredService,context);
    try {
      RegisteredServiceAccessStrategyUtils.ensurePrincipalAccessIsAllowedForService(service,registeredService,authentication);
    }
 catch (    final UnauthorizedServiceException|PrincipalException e) {
      logger.error(e.getMessage(),e);
      return OAuthUtils.writeTextError(response,OAuthConstants.INVALID_GRANT);
    }
  }
  final AccessToken accessToken=generateAccessToken(service,authentication,context);
  RefreshToken refreshToken=null;
  if (generateRefreshToken) {
    refreshToken=this.refreshTokenFactory.create(service,authentication);
    this.ticketRegistry.addTicket(refreshToken);
  }
  logger.debug("access token: {} / timeout: {} / refresh token: {}",accessToken,this.timeout,refreshToken);
  this.accessTokenResponseGenerator.generate(request,response,registeredService,service,accessToken,refreshToken,this.timeout);
  response.setStatus(HttpServletResponse.SC_OK);
  return null;
}
