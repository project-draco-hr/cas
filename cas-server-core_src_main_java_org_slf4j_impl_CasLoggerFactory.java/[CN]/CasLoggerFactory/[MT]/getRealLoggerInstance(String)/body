{
  try {
    final Set<Class<? extends ILoggerFactory>> subTypesOf=this.reflections.getSubTypesOf(ILoggerFactory.class);
    subTypesOf.remove(this.getClass());
    if (subTypesOf.size() > 1) {
      Util.report("Multiple ILoggerFactory bindings are found on the classpath:");
      for (      final Class<? extends ILoggerFactory> c : subTypesOf) {
        Util.report("* " + c.getCanonicalName());
      }
    }
    if (subTypesOf.size() > 0) {
      final Class<? extends ILoggerFactory> factoryClass=subTypesOf.iterator().next();
      final ILoggerFactory factInstance=factoryClass.newInstance();
      return factInstance.getLogger(name);
    }
  }
 catch (  final Exception e) {
    throw new RuntimeException(e.getMessage(),e);
  }
  return null;
}
