{
  try {
    if (shouldScheduleLoaderJob()) {
      LOGGER.debug("Preparing to schedule reloader job");
      final JobDetail job=JobBuilder.newJob(ServiceRegistryReloaderJob.class).withIdentity(this.getClass().getSimpleName().concat(UUID.randomUUID().toString())).build();
      final Trigger trigger=TriggerBuilder.newTrigger().withIdentity(this.getClass().getSimpleName().concat(UUID.randomUUID().toString())).startAt(DateTime.now().plusSeconds(this.startDelay).toDate()).withSchedule(SimpleScheduleBuilder.simpleSchedule().withIntervalInSeconds(this.refreshInterval).repeatForever()).build();
      LOGGER.debug("Scheduling {} job",this.getClass().getName());
      scheduler.scheduleJob(job,trigger);
      LOGGER.info("Services manager will reload service definitions every {} seconds",this.refreshInterval);
    }
  }
 catch (  final Exception e) {
    LOGGER.warn(e.getMessage(),e);
  }
}
