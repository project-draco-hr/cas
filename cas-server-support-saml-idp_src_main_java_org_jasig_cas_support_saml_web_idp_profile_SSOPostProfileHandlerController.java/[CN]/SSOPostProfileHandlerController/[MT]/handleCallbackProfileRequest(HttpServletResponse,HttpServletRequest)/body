{
  logger.info("Received SAML callback profile request {}",request.getRequestURI());
  final AuthnRequest authnRequest=retrieveAuthnRequest(request);
  if (authnRequest == null) {
    logger.error("Can not validate the request because the original Authn request can not be found.");
    response.setStatus(HttpServletResponse.SC_FORBIDDEN);
    return;
  }
  final String ticket=CommonUtils.safeGetParameter(request,CasProtocolConstants.PARAMETER_TICKET);
  if (StringUtils.isBlank(ticket)) {
    logger.error("Can not validate the request because no {} is provided via the request",CasProtocolConstants.PARAMETER_TICKET);
    response.setStatus(HttpServletResponse.SC_FORBIDDEN);
    return;
  }
  final Cas30ServiceTicketValidator validator=new Cas30ServiceTicketValidator(this.casServerPrefix);
  validator.setRenew(authnRequest.isForceAuthn());
  final String serviceUrl=constructServiceUrl(request,response,this.callbackService.getId(),this.casServerName);
  logger.debug("Created service url for validation: {}",serviceUrl);
  final Assertion assertion=validator.validate(ticket,serviceUrl);
  logValidationAssertion(assertion);
  if (assertion.isValid()) {
    final SamlRegisteredService registeredService=getRegisteredServiceAndVerify(authnRequest);
    logger.debug("Preparing SAML response to {}",registeredService);
    final Response samlResponse=responseBuilder.build(authnRequest,request,response,assertion,registeredService);
  }
  storeAuthnRequest(request,null);
}
