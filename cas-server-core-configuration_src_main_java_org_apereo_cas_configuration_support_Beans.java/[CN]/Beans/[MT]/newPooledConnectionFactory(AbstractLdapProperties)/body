{
  final PoolConfig pc=new PoolConfig();
  pc.setMinPoolSize(l.getMinPoolSize());
  pc.setMaxPoolSize(l.getMaxPoolSize());
  pc.setValidateOnCheckOut(l.isValidateOnCheckout());
  pc.setValidatePeriodically(l.isValidatePeriodically());
  pc.setValidatePeriod(newDuration(l.getValidatePeriod()));
  final ConnectionConfig cc=new ConnectionConfig();
  cc.setLdapUrl(l.getLdapUrl());
  cc.setUseSSL(l.isUseSsl());
  cc.setUseStartTLS(l.isUseStartTls());
  cc.setConnectTimeout(newDuration(l.getConnectTimeout()));
  if (l.getTrustCertificates() != null) {
    final X509CredentialConfig cfg=new X509CredentialConfig();
    cfg.setTrustCertificates(l.getTrustCertificates());
    cc.setSslConfig(new SslConfig());
  }
 else   if (l.getKeystore() != null) {
    final KeyStoreCredentialConfig cfg=new KeyStoreCredentialConfig();
    cfg.setKeyStore(l.getKeystore());
    cfg.setKeyStorePassword(l.getKeystorePassword());
    cfg.setKeyStoreType(l.getKeystoreType());
    cc.setSslConfig(new SslConfig(cfg));
  }
 else {
    cc.setSslConfig(new SslConfig());
  }
  if (StringUtils.equals(l.getBindCredential(),"*") && StringUtils.equals(l.getBindDn(),"*")) {
    cc.setConnectionInitializer(new FastBindOperation.FastBindConnectionInitializer());
  }
 else   if (StringUtils.isNotBlank(l.getBindDn()) && StringUtils.isNotBlank(l.getBindCredential())) {
    cc.setConnectionInitializer(new BindConnectionInitializer(l.getBindDn(),new Credential(l.getBindCredential())));
  }
  final DefaultConnectionFactory bindCf=new DefaultConnectionFactory(cc);
  if (l.getProviderClass() != null) {
    try {
      final Class clazz=ClassUtils.getClass(l.getProviderClass());
      bindCf.setProvider(Provider.class.cast(clazz.newInstance()));
    }
 catch (    final Exception e) {
      LOGGER.error(e.getMessage(),e);
    }
  }
  final BlockingConnectionPool cp=new BlockingConnectionPool(pc,bindCf);
  cp.setBlockWaitTime(newDuration(l.getBlockWaitTime()));
  cp.setPoolConfig(pc);
  final IdlePruneStrategy strategy=new IdlePruneStrategy();
  strategy.setIdleTime(newDuration(l.getIdleTime()));
  strategy.setPrunePeriod(newDuration(l.getPrunePeriod()));
  cp.setPruneStrategy(strategy);
  cp.setValidator(new SearchValidator());
  cp.setFailFastInitialize(l.isFailFast());
  return new PooledConnectionFactory(cp);
}
