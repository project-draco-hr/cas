{
  Config config;
  if (configLocation.exists()) {
    final URL configUrl=configLocation.getURL();
    config=new XmlConfigBuilder(configUrl).build();
    if (ResourceUtils.isFileURL(configUrl)) {
      config.setConfigurationFile(configLocation.getFile());
    }
 else {
      config.setConfigurationUrl(configUrl);
    }
  }
 else {
    config=new Config();
    final TcpIpConfig tcpIpConfig=new TcpIpConfig().setEnabled(this.hazelcastProperties.isTcpipEnabled()).setMembers(this.hazelcastProperties.getMembers());
    final MulticastConfig multicastConfig=new MulticastConfig().setEnabled(this.hazelcastProperties.isMulticastEnabled());
    final JoinConfig joinConfig=new JoinConfig().setMulticastConfig(multicastConfig).setTcpIpConfig(tcpIpConfig);
    final NetworkConfig networkConfig=new NetworkConfig().setPort(this.hazelcastProperties.getPort()).setPortAutoIncrement(this.hazelcastProperties.isPortAutoIncrement()).setJoin(joinConfig);
    final MapConfig mapConfig=new MapConfig().setName("tickets").setMaxIdleSeconds(this.hazelcastProperties.getMaxIdleSeconds()).setEvictionPolicy(this.hazelcastProperties.getEvictionPolicy()).setEvictionPercentage(this.hazelcastProperties.getEvictionPercentage()).setMaxSizeConfig(new MaxSizeConfig().setMaxSizePolicy(this.hazelcastProperties.getMaxSizePolicy()).setSize(this.hazelcastProperties.getMaxHeapSizePercentage()));
    final Map<String,MapConfig> mapConfigs=new HashMap<>();
    mapConfigs.put("tickets",mapConfig);
    config.setMapConfigs(mapConfigs).setNetworkConfig(networkConfig);
  }
  return config.setInstanceName(hazelcastProperties.getInstanceName()).setProperty(HazelcastProperties.LOGGING_TYPE_PROP,this.hazelcastProperties.getLoggingType()).setProperty(HazelcastProperties.MAX_HEARTBEAT_SECONDS_PROP,this.hazelcastProperties.getMaxNoHeartbeatSeconds());
}
