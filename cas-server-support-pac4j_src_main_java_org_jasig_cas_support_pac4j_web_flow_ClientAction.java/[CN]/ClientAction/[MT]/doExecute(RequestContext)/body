{
  final HttpServletRequest request=WebUtils.getHttpServletRequest(context);
  final HttpServletResponse response=WebUtils.getHttpServletResponse(context);
  final HttpSession session=request.getSession();
  final WebContext webContext=new J2EContext(request,response);
  final String clientName=request.getParameter(this.clients.getClientNameParameter());
  logger.debug("clientName: {}",clientName);
  if (StringUtils.isNotBlank(clientName)) {
    final BaseClient<Credentials,CommonProfile> client=(BaseClient<Credentials,CommonProfile>)this.clients.findClient(clientName);
    logger.debug("client: {}",client);
    final Mechanism mechanism=client.getMechanism();
    if (!SUPPORTED_PROTOCOLS.contains(mechanism)) {
      throw new TechnicalException("Only CAS, OAuth, OpenID and SAML protocols are supported: " + client);
    }
    final Credentials credentials;
    try {
      credentials=client.getCredentials(webContext);
      logger.debug("credentials: {}",credentials);
    }
 catch (    final RequiresHttpAction e) {
      logger.debug("requires http action: {}",e);
      response.flushBuffer();
      final ExternalContext externalContext=ExternalContextHolder.getExternalContext();
      externalContext.recordResponseComplete();
      return new Event(this,"stop");
    }
    final Service service=(Service)session.getAttribute(SERVICE);
    context.getFlowScope().put(SERVICE,service);
    logger.debug("retrieve service: {}",service);
    if (service != null) {
      request.setAttribute(SERVICE,service.getId());
    }
    restoreRequestAttribute(request,session,THEME);
    restoreRequestAttribute(request,session,LOCALE);
    restoreRequestAttribute(request,session,METHOD);
    if (credentials != null) {
      final TicketGrantingTicket tgt=this.centralAuthenticationService.createTicketGrantingTicket(new ClientCredential(credentials));
      WebUtils.putTicketGrantingTicketInScopes(context,tgt);
      return success();
    }
  }
  prepareForLoginPage(context);
  return error();
}
