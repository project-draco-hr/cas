{
  final Map<String,Object> map=new HashMap<>();
  map.put(NAME,VALUE);
  final List<String> list=Lists.newArrayList(VALUE,VALUE);
  map.put(NAME2,list);
  final Principal principal=org.apereo.cas.authentication.TestUtils.getPrincipal(ID,map);
  final Authentication authentication=getAuthentication(principal);
  final AccessTokenImpl accessToken=(AccessTokenImpl)accessTokenFactory.create(TestUtils.getService(),authentication);
  oAuth20ProfileController.getTicketRegistry().addTicket(accessToken);
  final MockHttpServletRequest mockRequest=new MockHttpServletRequest("GET",CONTEXT + OAuthConstants.PROFILE_URL);
  mockRequest.setParameter(OAuthConstants.ACCESS_TOKEN,accessToken.getId());
  final MockHttpServletResponse mockResponse=new MockHttpServletResponse();
  final ResponseEntity<String> entity=oAuth20ProfileController.handleRequestInternal(mockRequest,mockResponse);
  assertEquals(HttpStatus.OK,entity.getStatusCode());
  assertEquals(CONTENT_TYPE,mockResponse.getContentType());
  final ObjectMapper mapper=new ObjectMapper();
  final String expected="{\"id\":\"" + ID + "\",\"attributes\":[{\""+ NAME+ "\":\""+ VALUE+ "\"},{\""+ NAME2+ "\":[\""+ VALUE+ "\",\""+ VALUE+ "\"]}]}";
  final JsonNode expectedObj=mapper.readTree(expected);
  final JsonNode receivedObj=mapper.readTree(entity.getBody());
  assertEquals(expectedObj.get("id").asText(),receivedObj.get("id").asText());
  final JsonNode expectedAttributes=expectedObj.get("attributes");
  final JsonNode receivedAttributes=receivedObj.get("attributes");
  assertEquals(expectedAttributes.findValue(NAME).asText(),receivedAttributes.findValue(NAME).asText());
  assertEquals(expectedAttributes.findValues(NAME2),receivedAttributes.findValues(NAME2));
}
