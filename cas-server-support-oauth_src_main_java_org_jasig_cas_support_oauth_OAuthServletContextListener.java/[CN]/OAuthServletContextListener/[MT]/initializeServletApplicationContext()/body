{
  addControllerToCasServletHandlerMapping(OAuthConstants.BASE_OAUTH20_URL + "/" + OAuthConstants.AUTHORIZE_URL,"authorizeController");
  addControllerToCasServletHandlerMapping(OAuthConstants.BASE_OAUTH20_URL + "/" + OAuthConstants.CALLBACK_AUTHORIZE_URL,"callbackAuthorizeController");
  addControllerToCasServletHandlerMapping(OAuthConstants.BASE_OAUTH20_URL + "/" + OAuthConstants.ACCESS_TOKEN_URL,"accessTokenController");
  addControllerToCasServletHandlerMapping(OAuthConstants.BASE_OAUTH20_URL + "/" + OAuthConstants.PROFILE_URL,"profileController");
  final String oAuthCallbackUrl=casServerUrl + OAuthConstants.BASE_OAUTH20_URL + "/"+ OAuthConstants.CALLBACK_AUTHORIZE_URL_DEFINITION;
  final ReloadableServicesManager servicesManager=getServicesManager();
  final Service callbackService=webApplicationServiceFactory.createService(oAuthCallbackUrl);
  if (!servicesManager.matchesExistingService(callbackService)) {
    final OAuthCallbackAuthorizeService service=new OAuthCallbackAuthorizeService();
    service.setName("OAuth Callback url");
    service.setDescription("OAuth Wrapper Callback Url");
    service.setServiceId(oAuthCallbackUrl);
    addRegisteredServiceToServicesManager(service);
    servicesManager.reload();
  }
  ticketRegistry.getTicketDelegators().add(0,new Pair(AccessToken.class,AbstractTicketDelegator.getDefaultConstructor(AccessTokenDelegator.class)));
  ticketRegistry.getTicketDelegators().add(1,new Pair(OAuthCode.class,AbstractTicketDelegator.getDefaultConstructor(OAuthCodeDelegator.class)));
}
