{
  final Service service=transaction.getService();
  if (service != null) {
    final RegisteredService registeredService=this.servicesManager.findServiceBy(service);
    if (registeredService == null || !registeredService.getAccessStrategy().isServiceAccessAllowed()) {
      logger.warn("Service [{}] is not allowed to use SSO.",registeredService);
      throw new UnauthorizedSsoServiceException();
    }
    if (!registeredService.getRequiredHandlers().isEmpty()) {
      logger.debug("authentication transaction requires {} for service {}",registeredService.getRequiredHandlers(),service);
      final Set<AuthenticationHandler> handlerSet=new LinkedHashSet<>(this.handlerResolverMap.keySet());
      logger.info("Candidate authentication handlers examined this transaction are {}",handlerSet);
      final Iterator<AuthenticationHandler> it=handlerSet.iterator();
      while (it.hasNext()) {
        final AuthenticationHandler handler=it.next();
        if (!registeredService.getRequiredHandlers().contains(handler.getName())) {
          logger.debug("Authentication handler {} is not required for this transaction and is removed",handler.getName());
          it.remove();
        }
      }
      logger.info("Authentication handlers used for this transaction are {}",handlerSet);
      return handlerSet;
    }
  }
  return this.handlerResolverMap.keySet();
}
