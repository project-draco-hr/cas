{
  final AuthenticationBuilder builder=new DefaultAuthenticationBuilder(NullPrincipal.getInstance());
  for (  final Credential c : credentials) {
    builder.addCredential(new BasicCredentialMetaData(c));
  }
  boolean found;
  for (  final Credential credential : credentials) {
    found=false;
    for (    final Map.Entry<AuthenticationHandler,PrincipalResolver> entry : this.handlerResolverMap.entrySet()) {
      final AuthenticationHandler handler=entry.getKey();
      if (handler.supports(credential)) {
        found=true;
        try {
          authenticateAndResolvePrincipal(builder,credential,entry.getValue(),handler);
          if (this.authenticationPolicy.isSatisfiedBy(builder.build())) {
            return builder;
          }
        }
 catch (        final GeneralSecurityException e) {
          logger.info("{} failed authenticating {}",handler.getName(),credential);
          logger.debug("{} exception details: {}",handler.getName(),e.getMessage());
          builder.addFailure(handler.getName(),e.getClass());
        }
catch (        final PreventedException e) {
          logger.error("{}: {}  (Details: {})",handler.getName(),e.getMessage(),e.getCause().getMessage());
          builder.addFailure(handler.getName(),e.getClass());
        }
      }
    }
    if (!found) {
      logger.warn("Cannot find authentication handler that supports {}, which suggests a configuration problem.",credential);
    }
  }
  evaluateProducedAuthenticationContext(builder);
  return builder;
}
