{
  final HttpServletRequest request=WebUtils.getHttpServletRequest(requestContext);
  final String gRecaptchaResponse=request.getParameter("g-recaptcha-response");
  if (StringUtils.isBlank(gRecaptchaResponse)) {
    LOGGER.warn("Recaptcha response is missing from the request");
    return getError(requestContext);
  }
  try {
    final URL obj=new URL(recaptchaProperties.getVerifyUrl());
    final HttpsURLConnection con=(HttpsURLConnection)obj.openConnection();
    con.setRequestMethod("POST");
    con.setRequestProperty("User-Agent",WebUtils.getHttpServletRequestUserAgent());
    con.setRequestProperty("Accept-Language","en-US,en;q=0.5");
    final String postParams="secret=" + recaptchaProperties.getSecret() + "&response="+ gRecaptchaResponse;
    LOGGER.debug("Sending 'POST' request to URL: {}",obj);
    con.setDoOutput(true);
    try (DataOutputStream wr=new DataOutputStream(con.getOutputStream())){
      wr.writeBytes(postParams);
      wr.flush();
    }
     final int responseCode=con.getResponseCode();
    LOGGER.debug("Response Code: {}",responseCode);
    if (responseCode == HttpStatus.OK.value()) {
      try (BufferedReader in=new BufferedReader(new InputStreamReader(con.getInputStream(),StandardCharsets.UTF_8))){
        String inputLine;
        final StringBuilder response=new StringBuilder();
        while ((inputLine=in.readLine()) != null) {
          response.append(inputLine);
        }
        LOGGER.debug("Google captcha response received: {}",response);
        final ObjectMapper mapper=new ObjectMapper();
        final JsonNode node=mapper.reader().readTree(response.toString());
        if (node.has("success") && node.get("success").booleanValue()) {
          return null;
        }
      }
     }
  }
 catch (  final Exception e) {
    LOGGER.error(e.getMessage(),e);
  }
  return getError(requestContext);
}
