{
  final String tgt=WebUtils.getTicketGrantingTicketId(context);
  final RegisteredService service=WebUtils.getRegisteredService(context);
  if (service == null) {
    logger.debug("No service is available to determine event for principal");
    return resumeFlow();
  }
  if (StringUtils.isBlank(tgt)) {
    logger.trace("TGT is blank; proceed with flow normally.");
    return resumeFlow();
  }
  final Authentication authentication=ticketRegistrySupport.getAuthenticationFrom(tgt);
  if (authentication == null) {
    logger.trace("TGT has no authentication and is blank; proceed with flow normally.");
    return resumeFlow();
  }
  final AuthenticationResultBuilder builder=this.authenticationSystemSupport.establishAuthenticationContextFromInitial(authentication);
  WebUtils.putAuthenticationResultBuilder(builder,context);
  WebUtils.putAuthentication(authentication,context);
  final Event event=initialAuthenticationAttemptWebflowEventResolver.resolveSingle(context);
  if (event == null) {
    logger.trace("Request does not indicate a requirement for authentication policy; proceed with flow normally.");
    return resumeFlow();
  }
  if (event.getId().equals(CasWebflowConstants.TRANSITION_ID_ERROR) || event.getId().equals(CasWebflowConstants.TRANSITION_ID_AUTHENTICATION_FAILURE)) {
    return ImmutableSet.of(event);
  }
  final Pair<Boolean,Optional<MultifactorAuthenticationProvider>> result=this.authenticationContextValidator.validate(authentication,event.getId(),service);
  if (result.getFirst()) {
    return resumeFlow();
  }
  if (result.getSecond().isPresent()) {
    return ImmutableSet.of(validateEventIdForMatchingTransitionInContext(event.getId(),context,buildEventAttributeMap(authentication.getPrincipal(),service,result.getSecond().get())));
  }
  logger.warn("The authentication context cannot be satisfied and the requested event {} is unrecognized",event.getId());
  return ImmutableSet.of(new Event(this,CasWebflowConstants.TRANSITION_ID_ERROR));
}
