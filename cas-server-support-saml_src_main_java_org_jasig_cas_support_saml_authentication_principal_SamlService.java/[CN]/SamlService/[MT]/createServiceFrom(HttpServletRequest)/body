{
  final String service=request.getParameter(SamlProtocolConstants.CONST_PARAM_TARGET);
  final String artifactId;
  final String requestBody=getRequestBody(request);
  final String requestId;
  if (!StringUtils.hasText(service) && !StringUtils.hasText(requestBody)) {
    LOGGER.debug("Request does not specify a {} or request body is empty",SamlProtocolConstants.CONST_PARAM_TARGET);
    return null;
  }
  final String id=cleanupUrl(service);
  if (StringUtils.hasText(requestBody)) {
    final String tagStart;
    final String tagEnd;
    if (requestBody.contains(CONST_START_ARTIFACT_XML_TAG)) {
      tagStart=CONST_START_ARTIFACT_XML_TAG;
      tagEnd=CONST_END_ARTIFACT_XML_TAG;
    }
 else {
      tagStart=CONST_START_ARTIFACT_XML_TAG_NO_NAMESPACE;
      tagEnd=CONST_END_ARTIFACT_XML_TAG_NO_NAMESPACE;
    }
    final int startTagLocation=requestBody.indexOf(tagStart);
    final int artifactStartLocation=startTagLocation + tagStart.length();
    final int endTagLocation=requestBody.indexOf(tagEnd);
    artifactId=requestBody.substring(artifactStartLocation,endTagLocation).trim();
    requestId=extractRequestId(requestBody);
  }
 else {
    artifactId=null;
    requestId=null;
  }
  LOGGER.debug("Attempted to extract Request from HttpServletRequest. Results:");
  LOGGER.debug("Request Body: {}",requestBody);
  LOGGER.debug("Extracted ArtifactId: {}",artifactId);
  LOGGER.debug("Extracted Request Id: {}",requestId);
  return new SamlService(id,service,artifactId,requestId);
}
