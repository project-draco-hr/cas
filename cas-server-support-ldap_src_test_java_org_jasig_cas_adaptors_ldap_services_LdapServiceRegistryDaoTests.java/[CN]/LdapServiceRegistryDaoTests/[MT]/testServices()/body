{
  List<RegisteredService> list1=this.dao.load();
  for (  final RegisteredService registeredService : list1) {
    this.dao.delete(registeredService);
  }
  list1=this.dao.load();
  assertEquals(0,list1.size());
  AbstractRegisteredService rs=new RegisteredServiceImpl();
  rs.setName("Service Name1");
  rs.setAllowedToProxy(false);
  rs.setAnonymousAccess(true);
  rs.setDescription("Service description");
  rs.setServiceId("https://?.edu/**");
  rs.setTheme("the theme name");
  rs.setUsernameAttribute("uid");
  rs.setEvaluationOrder(123);
  rs.setAllowedAttributes(Arrays.asList("test1","test2"));
  this.dao.save(rs);
  rs=new RegexRegisteredService();
  rs.setName("Service Name Regex");
  rs.setAllowedToProxy(false);
  rs.setAnonymousAccess(true);
  rs.setDescription("Service description");
  rs.setServiceId("^http?://.+");
  rs.setTheme("the theme name");
  rs.setUsernameAttribute("uid");
  rs.setEvaluationOrder(123);
  rs.setAllowedAttributes(Arrays.asList("test1","test2"));
  rs.setRequiredHandlers(new HashSet<String>(Arrays.asList("handler1","handler2")));
  this.dao.save(rs);
  list1=this.dao.load();
  assertEquals(2,list1.size());
  AbstractRegisteredService rs2=(AbstractRegisteredService)this.dao.findServiceById(list1.get(0).getId());
  assertNotNull(rs2);
  rs2.setEvaluationOrder(9999);
  rs2.setAllowedAttributes(Arrays.asList("test3"));
  rs2.setName("Another Test Service");
  rs2=(AbstractRegisteredService)this.dao.save(rs2);
  assertNotNull(rs2);
}
