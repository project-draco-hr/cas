{
  if (this.logger.isDebugEnabled()) {
    this.logger.debug("Checking account status for password...");
  }
  final String ticket=context.getRequestScope().getString("serviceTicketId");
  final UsernamePasswordCredentials credentials=(UsernamePasswordCredentials)context.getFlowScope().get("credentials");
  final String userId=credentials.getUsername();
  Event returnedEvent=error();
  String msgToLog=null;
  try {
    if (userId == null && ticket == null) {
      msgToLog="No user principal or service ticket available.";
      if (this.logger.isErrorEnabled()) {
        this.logger.error(msgToLog);
      }
      throw new LdapPasswordPolicyEnforcementException(BadCredentialsAuthenticationException.CODE,msgToLog);
    }
    if (userId == null && ticket != null) {
      returnedEvent=success();
      if (this.logger.isDebugEnabled()) {
        this.logger.debug("Received service ticket " + ticket + " but no user id. This is not a login attempt, so skip password enforcement.");
      }
    }
 else {
      if (this.logger.isDebugEnabled()) {
        this.logger.debug("Retrieving number of days to password expiration date for user " + userId);
      }
      final long daysToExpirationDate=getPasswordPolicyEnforcer().getNumberOfDaysToPasswordExpirationDate(userId);
      if (daysToExpirationDate == -1) {
        returnedEvent=success();
        if (this.logger.isDebugEnabled()) {
          this.logger.debug("Password for " + userId + " is not expiring");
        }
      }
 else {
        returnedEvent=warning();
        if (this.logger.isDebugEnabled()) {
          this.logger.debug("Password for " + userId + " is expiring in "+ daysToExpirationDate+ " days");
        }
        context.getFlowScope().put("expireDays",daysToExpirationDate);
      }
    }
  }
 catch (  final LdapAuthenticationException e) {
    if (this.logger.isErrorEnabled()) {
      this.logger.error(e.getMessage(),e);
    }
    populateErrorsInstance(e,context);
    returnedEvent=error();
  }
 finally {
    if (this.logger.isDebugEnabled()) {
      this.logger.debug("Switching to flow event id " + returnedEvent.getId() + " for user "+ userId);
    }
  }
  return returnedEvent;
}
