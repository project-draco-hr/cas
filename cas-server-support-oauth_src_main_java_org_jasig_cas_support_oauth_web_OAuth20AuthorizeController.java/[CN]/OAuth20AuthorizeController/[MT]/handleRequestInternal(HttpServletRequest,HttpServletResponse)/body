{
  if (!verifyAuthorizeRequest(request)) {
    return new ModelAndView(OAuthConstants.ERROR_VIEW);
  }
  final String clientId=request.getParameter(OAuthConstants.CLIENT_ID);
  final String redirectUri=request.getParameter(OAuthConstants.REDIRECT_URI);
  final String state=request.getParameter(OAuthConstants.STATE);
  final String bypassApprovalParameter=request.getParameter(OAuthConstants.BYPASS_APPROVAL_PROMPT);
  logger.debug("bypassApprovalParameter: {}",bypassApprovalParameter);
  final OAuthRegisteredService registeredService=OAuthUtils.getRegisteredOAuthService(this.servicesManager,clientId);
  final boolean bypassApprovalService=registeredService.isBypassApprovalPrompt();
  logger.debug("bypassApprovalService: {}",bypassApprovalService);
  final J2EContext context=new J2EContext(request,response);
  final ProfileManager manager=new ProfileManager(context);
  final UserProfile profile=manager.get(true);
  CommonHelper.assertNotNull("profile",profile);
  if (bypassApprovalService || bypassApprovalParameter != null) {
    final Principal principal=principalFactory.createPrincipal(profile.getId(),profile.getAttributes());
    final Authentication authentication=new OAuthAuthentication(ZonedDateTime.now(),principal);
    final Service service=new OAuthWebApplicationService("" + registeredService.getId(),registeredService.getServiceId());
    final String responseType=request.getParameter(OAuthConstants.RESPONSE_TYPE);
    String callbackUrl=redirectUri;
    if (StringUtils.equalsIgnoreCase(responseType,OAuthResponseType.CODE.name())) {
      final OAuthCode code=oAuthCodeFactory.create(service,authentication);
      logger.debug("Generated OAuth code: {}",code);
      ticketRegistry.addTicket(code);
      callbackUrl=CommonHelper.addParameter(callbackUrl,OAuthConstants.CODE,code.getId());
      if (state != null) {
        callbackUrl=CommonHelper.addParameter(callbackUrl,OAuthConstants.STATE,state);
      }
    }
 else     if (StringUtils.equalsIgnoreCase(responseType,OAuthResponseType.TOKEN.name())) {
      final AccessToken accessToken=generateAccessToken(service,authentication);
      logger.debug("Generated access token: {}",accessToken);
      callbackUrl+="#access_token=" + accessToken.getId() + "&token_type=bearer&expires_in="+ timeout;
      if (state != null) {
        callbackUrl+="&state=" + OAuthUtils.urlEncode(state);
      }
    }
    logger.debug("callbackUrl: {}",callbackUrl);
    return OAuthUtils.redirectTo(callbackUrl);
  }
 else {
    String callbackUrl=context.getFullRequestURL();
    callbackUrl=CommonHelper.addParameter(callbackUrl,OAuthConstants.BYPASS_APPROVAL_PROMPT,"true");
    final Map<String,Object> model=new HashMap<>();
    model.put("callbackUrl",callbackUrl);
    model.put("serviceName",registeredService.getName());
    logger.debug("callbackUrl: {}",callbackUrl);
    return new ModelAndView(OAuthConstants.CONFIRM_VIEW,model);
  }
}
