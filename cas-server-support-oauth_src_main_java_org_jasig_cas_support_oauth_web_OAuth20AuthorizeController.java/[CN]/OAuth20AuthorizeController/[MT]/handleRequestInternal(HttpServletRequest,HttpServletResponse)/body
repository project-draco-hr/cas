{
  final String clientId=request.getParameter(OAuthConstants.CLIENT_ID);
  log.debug("{} : {}",OAuthConstants.CLIENT_ID,clientId);
  final String redirectUri=request.getParameter(OAuthConstants.REDIRECT_URI);
  log.debug("{} : {}",OAuthConstants.REDIRECT_URI,redirectUri);
  final String state=request.getParameter(OAuthConstants.STATE);
  log.debug("{} : {}",OAuthConstants.STATE,state);
  if (StringUtils.isBlank(clientId)) {
    log.error("Missing {}",OAuthConstants.CLIENT_ID);
    return new ModelAndView(OAuthConstants.ERROR_VIEW);
  }
  if (StringUtils.isBlank(redirectUri)) {
    log.error("Missing {}",OAuthConstants.REDIRECT_URI);
    return new ModelAndView(OAuthConstants.ERROR_VIEW);
  }
  final Collection<RegisteredService> services=servicesManager.getAllServices();
  RegisteredService service=null;
  for (  final RegisteredService aService : services) {
    if (StringUtils.equals(aService.getName(),clientId)) {
      service=aService;
      break;
    }
  }
  if (service == null) {
    log.error("Unknown {} : {}",OAuthConstants.CLIENT_ID,clientId);
    return new ModelAndView(OAuthConstants.ERROR_VIEW);
  }
  final String serviceId=service.getServiceId();
  if (!StringUtils.startsWith(redirectUri,serviceId)) {
    log.error("Unsupported {} : {} for serviceId : {}",OAuthConstants.REDIRECT_URI,redirectUri,serviceId);
    return new ModelAndView(OAuthConstants.ERROR_VIEW);
  }
  final HttpSession session=request.getSession();
  session.setAttribute(OAuthConstants.OAUTH20_CALLBACKURL,redirectUri);
  session.setAttribute(OAuthConstants.OAUTH20_SERVICE_NAME,service.getTheme());
  session.setAttribute(OAuthConstants.OAUTH20_STATE,state);
  final String callbackAuthorizeUrl=request.getRequestURL().toString().replace("/" + OAuthConstants.AUTHORIZE_URL,"/" + OAuthConstants.CALLBACK_AUTHORIZE_URL);
  log.debug("{} : {}",OAuthConstants.CALLBACK_AUTHORIZE_URL,callbackAuthorizeUrl);
  final String loginUrlWithService=OAuthUtils.addParameter(loginUrl,OAuthConstants.SERVICE,callbackAuthorizeUrl);
  log.debug("loginUrlWithService : {}",loginUrlWithService);
  return OAuthUtils.redirectTo(loginUrlWithService);
}
