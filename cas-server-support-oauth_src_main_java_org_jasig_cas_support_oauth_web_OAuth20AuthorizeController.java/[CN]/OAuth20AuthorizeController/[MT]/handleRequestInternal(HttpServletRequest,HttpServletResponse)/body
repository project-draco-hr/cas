{
  if (!verifyAuthorizeRequest(request)) {
    return new ModelAndView(OAuthConstants.ERROR_VIEW);
  }
  final String clientId=request.getParameter(OAuthConstants.CLIENT_ID);
  final String redirectUri=request.getParameter(OAuthConstants.REDIRECT_URI);
  final String state=request.getParameter(OAuthConstants.STATE);
  final String bypassApprovalParameter=request.getParameter(OAuthConstants.BYPASS_APPROVAL_PROMPT);
  logger.debug("bypassApprovalParameter: {}",bypassApprovalParameter);
  final OAuthRegisteredService registeredService=OAuthUtils.getRegisteredOAuthService(this.servicesManager,clientId);
  try {
    RegisteredServiceAccessStrategySupport.ensureServiceAccessIsAllowed(clientId,registeredService);
  }
 catch (  final UnauthorizedServiceException e) {
    logger.error(e.getMessage(),e);
    return new ModelAndView(OAuthConstants.ERROR_VIEW);
  }
  final boolean bypassApprovalService=registeredService.isBypassApprovalPrompt();
  logger.debug("bypassApprovalService: {}",bypassApprovalService);
  final J2EContext context=new J2EContext(request,response);
  final ProfileManager manager=new ProfileManager(context);
  final UserProfile profile=manager.get(true);
  if (profile == null) {
    return new ModelAndView(OAuthConstants.ERROR_VIEW);
  }
  if (bypassApprovalService || bypassApprovalParameter != null) {
    final Authentication authentication=createAuthentication(profile);
    final Service service=createService(registeredService);
    final String responseType=request.getParameter(OAuthConstants.RESPONSE_TYPE);
    final String callbackUrl;
    if (isResponseType(responseType,OAuthResponseType.CODE)) {
      callbackUrl=buildCallbackUrlForAuthorizationCodeResponseType(state,authentication,service,redirectUri);
    }
 else {
      callbackUrl=buildCallbackUrlForImplicitResponseType(state,authentication,service,redirectUri);
    }
    logger.debug("callbackUrl: {}",callbackUrl);
    return OAuthUtils.redirectTo(callbackUrl);
  }
  return redirectToApproveView(registeredService,context);
}
