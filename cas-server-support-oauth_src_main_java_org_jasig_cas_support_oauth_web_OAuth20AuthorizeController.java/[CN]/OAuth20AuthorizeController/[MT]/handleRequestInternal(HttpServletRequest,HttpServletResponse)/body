{
  String redirectUri=request.getParameter(OAuthConstants.REDIRECT_URI);
  logger.debug("redirect_uri : {}",redirectUri);
  String clientId=request.getParameter(OAuthConstants.CLIENT_ID);
  logger.debug("clientId : {}",clientId);
  String clientSecret=request.getParameter(OAuthConstants.CLIENT_SECRET);
  logger.debug("clientSecret : {}",clientSecret);
  if (StringUtils.isBlank(clientId)) {
    logger.error("missing clientId");
    return OAuthUtils.redirectToError(redirectUri,OAuthConstants.MISSING_CLIENT_ID);
  }
  if (StringUtils.isBlank(redirectUri)) {
    logger.error("missing redirectUri");
    return OAuthUtils.redirectToError(redirectUri,OAuthConstants.MISSING_REDIRECT_URI);
  }
  Collection<RegisteredService> services=servicesManager.getAllServices();
  RegisteredService service=null;
  for (  RegisteredService aService : services) {
    if (StringUtils.equals(aService.getName(),clientId)) {
      service=aService;
      break;
    }
  }
  if (service == null) {
    logger.error("Unknown clientId : {}",clientId);
    return OAuthUtils.redirectToError(redirectUri,OAuthConstants.UNKNOWN_CLIENT_ID);
  }
  String serviceId=service.getServiceId();
  if (!StringUtils.startsWith(redirectUri,serviceId)) {
    logger.error("Unsupported redirectUri : {} for serviceId : {}",redirectUri,serviceId);
    return OAuthUtils.redirectToError(redirectUri,OAuthConstants.UNSUPPORTED_REDIRECT_URI);
  }
  HttpSession session=request.getSession();
  session.setAttribute(OAuthConstants.OAUTH20_CALLBACKURL,redirectUri);
  String callbackAuthorizeUrl=request.getRequestURL().toString().replace("/" + OAuthConstants.AUTHORIZE_URL,"/" + OAuthConstants.CALLBACK_AUTHORIZE_URL);
  logger.debug("callbackAuthorizeUrl : {}",callbackAuthorizeUrl);
  String loginUrlWithService=OAuthUtils.addParameter(loginUrl,"service",callbackAuthorizeUrl);
  logger.debug("loginUrlWithService : {}",loginUrlWithService);
  return OAuthUtils.redirectTo(loginUrlWithService);
}
