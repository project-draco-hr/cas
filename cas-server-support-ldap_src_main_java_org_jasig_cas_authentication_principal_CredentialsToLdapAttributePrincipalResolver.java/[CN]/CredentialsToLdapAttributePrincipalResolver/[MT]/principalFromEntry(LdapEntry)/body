{
  final LdapAttribute nameAttribute=entry.getAttribute(this.usernameProvider.getUsernameAttribute());
  if (nameAttribute == null) {
    log.warn("Username attribute {} not found on {}; Returning null principal.",this.usernameProvider.getUsernameAttribute(),entry);
    return null;
  }
  final String id=nameAttribute.getStringValue();
  final Map<String,Object> attributes=new HashMap<String,Object>(entry.getAttributes().size());
  Object value;
  for (  LdapAttribute attribute : entry.getAttributes()) {
    if (this.usernameProvider.getUsernameAttribute().equals(attribute.getName())) {
      continue;
    }
    log.debug("Resolving LDAP attribute [{}]",attribute.getName());
    if (attribute.size() == 1) {
      if (attribute.isBinary()) {
        value=attribute.getBinaryValue();
      }
 else {
        value=attribute.getStringValue();
      }
    }
 else {
      if (attribute.isBinary()) {
        value=attribute.getBinaryValues();
      }
 else {
        value=attribute.getStringValues();
      }
    }
    final String attrName=mapAttributeName(attribute.getName());
    log.debug("Resolved LDAP attribute [{}] with value [{}]",attrName,value);
    attributes.put(attrName,value);
  }
  return new SimplePrincipal(id,attributes);
}
