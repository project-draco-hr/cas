{
  final Credential userPassCredential=new UsernamePasswordCredential(USERNAME,PASSWORD);
  final AuthenticationBuilder bldr=new DefaultAuthenticationBuilder(new DefaultPrincipalFactory().createPrincipal("user",Collections.unmodifiableMap(this.principalAttributes)));
  bldr.setAttributes(Collections.unmodifiableMap(this.principalAttributes));
  bldr.setAuthenticationDate(new Date());
  bldr.addCredential(new BasicCredentialMetaData(userPassCredential));
  bldr.addFailure("error",AccountNotFoundException.class);
  bldr.addSuccess("authn",new DefaultHandlerResult(new AcceptUsersAuthenticationHandler(),new BasicCredentialMetaData(userPassCredential)));
  final TicketGrantingTicket parent=new TicketGrantingTicketImpl(TGT_ID,TestUtils.getService(),null,bldr.build(),new NeverExpiresExpirationPolicy());
  final TicketGrantingTicket expectedTGT=new TicketGrantingTicketImpl(TGT_ID,TestUtils.getService(),null,bldr.build(),new NeverExpiresExpirationPolicy());
  final ServiceTicket ticket=expectedTGT.grantServiceTicket(ST_ID,TestUtils.getService(),new NeverExpiresExpirationPolicy(),false);
  CachedData result=transcoder.encode(expectedTGT);
  final TicketGrantingTicket resultTicket=(TicketGrantingTicket)transcoder.decode(result);
  assertEquals(expectedTGT,resultTicket);
  result=transcoder.encode(ticket);
  final ServiceTicket resultStTicket=(ServiceTicket)transcoder.decode(result);
  assertEquals(ticket,resultStTicket);
}
