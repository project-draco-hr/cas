{
  response.setContentType(MediaType.APPLICATION_JSON_VALUE);
  String accessToken=request.getParameter(OAuthConstants.ACCESS_TOKEN);
  if (StringUtils.isBlank(accessToken)) {
    final String authHeader=request.getHeader(HttpConstants.AUTHORIZATION_HEADER);
    if (StringUtils.isNotBlank(authHeader) && authHeader.toLowerCase().startsWith(OAuthConstants.BEARER_TOKEN.toLowerCase() + ' ')) {
      accessToken=authHeader.substring(OAuthConstants.BEARER_TOKEN.length() + 1);
    }
  }
  logger.debug("{}: {}",OAuthConstants.ACCESS_TOKEN,accessToken);
  if (StringUtils.isBlank(accessToken)) {
    logger.error("Missing {}",OAuthConstants.ACCESS_TOKEN);
    final LinkedMultiValueMap<String,String> map=new LinkedMultiValueMap<>(1);
    map.add(OAuthConstants.ERROR,OAuthConstants.MISSING_ACCESS_TOKEN);
    final String value=OAuthUtils.jsonify(map);
    return new ResponseEntity<>(value,HttpStatus.UNAUTHORIZED);
  }
  final AccessToken accessTokenTicket=this.ticketRegistry.getTicket(accessToken,AccessToken.class);
  if (accessTokenTicket == null || accessTokenTicket.isExpired()) {
    logger.error("Expired access token: {}",OAuthConstants.ACCESS_TOKEN);
    final LinkedMultiValueMap<String,String> map=new LinkedMultiValueMap<>(1);
    map.add(OAuthConstants.ERROR,OAuthConstants.EXPIRED_ACCESS_TOKEN);
    final String value=OAuthUtils.jsonify(map);
    return new ResponseEntity<>(value,HttpStatus.UNAUTHORIZED);
  }
  final Map<String,Object> map=writeOutProfileResponse(accessTokenTicket.getAuthentication().getPrincipal());
  final String value=OAuthUtils.jsonify(map);
  return new ResponseEntity<>(value,HttpStatus.OK);
}
