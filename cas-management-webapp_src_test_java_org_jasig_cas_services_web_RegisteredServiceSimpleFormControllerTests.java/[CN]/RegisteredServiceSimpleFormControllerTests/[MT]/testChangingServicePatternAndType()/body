{
  final MockHttpServletRequest request1=new MockHttpServletRequest();
  final MockHttpServletResponse response1=new MockHttpServletResponse();
  request1.addParameter("description","description");
  request1.addParameter("serviceId","serviceId");
  request1.addParameter("name","ant");
  request1.addParameter("theme","theme");
  request1.addParameter("allowedToProxy","true");
  request1.addParameter("enabled","true");
  request1.addParameter("ssoEnabled","true");
  request1.addParameter("anonymousAccess","false");
  request1.addParameter("evaluationOrder","1");
  request1.setMethod("POST");
  final MockHttpServletRequest request2=new MockHttpServletRequest();
  this.controller.handleRequest(request1,response1);
  final Collection<RegisteredService> c=this.manager.getAllServices();
  assertEquals("Service collection size must be 1",c.size(),1);
  for (  final RegisteredService rs : c) {
    assertTrue(rs instanceof RegisteredServiceImpl);
  }
  final String id=String.valueOf(c.iterator().next().getId());
  final MockHttpServletResponse response2=new MockHttpServletResponse();
  request2.addParameter("description","description");
  request2.addParameter("serviceId","^https://.*");
  request2.addParameter("name","regex");
  request2.addParameter("theme","theme");
  request2.addParameter("allowedToProxy","true");
  request2.addParameter("enabled","true");
  request2.addParameter("ssoEnabled","true");
  request2.addParameter("anonymousAccess","false");
  request2.addParameter("evaluationOrder","1");
  request2.addParameter("id",id);
  request2.setMethod("POST");
  this.controller.handleRequest(request2,response2);
  final Collection<RegisteredService> services=this.manager.getAllServices();
  assertEquals(1,services.size());
  for (  final RegisteredService rs : services) {
    assertTrue(rs instanceof RegexRegisteredService);
  }
}
